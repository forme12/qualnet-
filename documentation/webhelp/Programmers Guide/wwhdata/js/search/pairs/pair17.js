function FileData_Pairs(x)
{
x.t("included","parameter");
x.t("included","packet");
x.t("example","traffic-gen");
x.t("example","scenario");
x.t("example","section");
x.t("example","qualnet");
x.t("example","consider");
x.t("example","specifying");
x.t("example","i/o");
x.t("passed","parameter");
x.t("passed","parameters");
x.t("passed","function");
x.t("particularly","useful");
x.t("mac_maca.h","mac_maca.cpp");
x.t("/libraries/wireless/src","maca");
x.t("min","max");
x.t("four","types");
x.t("shadowing","effects");
x.t("shadowing","models");
x.t("shadowing","model");
x.t("datasizedistribution.setseed","node-");
x.t("parameter","instance");
x.t("parameter","ensures");
x.t("parameter","whereas");
x.t("parameter","updates");
x.t("parameter","setdistributiondeterministic");
x.t("parameter","list");
x.t("parameter","setdistributionpareto4");
x.t("parameter","allows");
x.t("parameter","random");
x.t("parameter","function");
x.t("parameter","index");
x.t("parameter","types");
x.t("parameter","assigned");
x.t("parameter","calling");
x.t("parameter","configuration");
x.t("parameter","value");
x.t("parameter","declaration");
x.t("parameter","figure");
x.t("parameter","read");
x.t("parameter","setdistributionpareto");
x.t("parameter","specification");
x.t("parameter","deterministic");
x.t("parameter","pareto4");
x.t("parameter","setdistributionparetountruncated");
x.t("below","file");
x.t("below","offset");
x.t("available","qualnet");
x.t("exist","action");
x.t("protocols","4.1.2.3.1");
x.t("protocols","node");
x.t("determined","initial");
x.t("illustrate","built-in");
x.t("illustrate","basic");
x.t("illustrate","file");
x.t("macdatamaca","maca");
x.t("macdatamaca","includes");
x.t("macdatamaca","mem_malloc");
x.t("integers","setdistributiongeneralpareto");
x.t("else","strcmp");
x.t("else","figure");
x.t("else","propprofile-");
x.t("wavelength","float");
x.t("properties","randomdistribution");
x.t("token","encountered");
x.t("parametervalue","passed");
x.t("parametervalue","parametervalue");
x.t("parametervalue","function");
x.t("lead","simulator");
x.t("defines","type");
x.t("taking","example");
x.t("maca","macdatamaca");
x.t("maca","maca_t_backoff");
x.t("maca","clocktype");
x.t("maca","maca_t_yield");
x.t("maca","sizeof");
x.t("maca","null");
x.t("maca","implementation");
x.t("maca","data");
x.t("maca","protocol");
x.t("maca","maca-");
x.t("getrandomnumber","getrandomnumber");
x.t("getrandomnumber","function");
x.t("getrandomnumber","randomseed");
x.t("getrandomnumber","returns");
x.t("shadowingmean_db","else");
x.t("shadowingmean_db","0.0");
x.t("shadowingmean_db","figure");
x.t("converted","type");
x.t("converted","int");
x.t("200","250");
x.t("2008","2012");
x.t("needs","transported");
x.t("shown","figure");
x.t("lists","header");
x.t("files","mac_maca.h");
x.t("files","app_traffic_gen.h");
x.t("files","may");
x.t("files","qualnet");
x.t("files","values");
x.t("files","created");
x.t("message_alloc","node");
x.t("subtle","effects");
x.t("4.1.3.1","basic");
x.t("4.1.3.1","section");
x.t("4.1.3.1","used");
x.t("independently","assigned");
x.t("modeling","shadowing");
x.t("proppathprofile","pathprofile");
x.t("scalable","network");
x.t("create","access");
x.t("create","two");
x.t("describes","interface");
x.t("describes","apis");
x.t("describes","info");
x.t("sufficient","developing");
x.t("refer","api");
x.t("description","apis");
x.t("freeing","entire");
x.t("freeing","specific");
x.t("effects","data");
x.t("effects","simulation");
x.t("static","void");
x.t("static","trafficgenclient");
x.t("4.1.3.2","built-in");
x.t("built-in","random");
x.t("built-in","distributions");
x.t("prop_init","shown");
x.t("prop_init","implemented");
x.t("prop_init","prop_calculatepathloss");
x.t("prop_init","node");
x.t("table","4-1");
x.t("destinationtype","desttype");
x.t("instance","parameter");
x.t("instance","specified");
x.t("instance","identifiers");
x.t("instance","match");
x.t("instance","identifier");
x.t("instance","value");
x.t("variables","independently");
x.t("variables","setdistributionexponential");
x.t("variables","require");
x.t("variables","initialized");
x.t("variables","backoffseed");
x.t("variables","part");
x.t("variables","randomdistribution");
x.t("variables","distributions");
x.t("once","message");
x.t("once","two");
x.t("enum","message_info_type_str");
x.t("layer","prototypes");
x.t("layer","info_type_statcategoryname");
x.t("layer","protocol");
x.t("always","add");
x.t("always","return");
x.t("persistent","i.e");
x.t("persistent","4.1.3");
x.t("persistent","unless");
x.t("persistent","user-created");
x.t("persistent","model");
x.t("required","qualnet");
x.t("required","specifying");
x.t("required","application");
x.t("required","following");
x.t("having","correlated");
x.t("related","random");
x.t("ensures","different");
x.t("ensures","node");
x.t("eight","tokens");
x.t("intervaldistribution.getrandomnumber","figure");
x.t("/scenarios/default/default.config","protocol");
x.t("queue-weight","[1]");
x.t("queue-weight","[0]");
x.t("queue-weight","[2]");
x.t("void","maca");
x.t("void","prop_init");
x.t("void","prop_calculatepathloss");
x.t("void","setdistributionexponential");
x.t("void","setdistributiondeterministic");
x.t("void","trafficgenclientinit");
x.t("void","macmacainit");
x.t("void","setdistributionpareto4");
x.t("void","macmacayield");
x.t("void","setdistributionuniforminteger");
x.t("void","setdistributiongeneralpareto");
x.t("void","io_readstring");
x.t("void","setdistributionuniform");
x.t("void","setdistributiongaussianint");
x.t("void","io_readstringinstance");
x.t("void","setdistributionnull");
x.t("void","macmacabackoff");
x.t("void","setseed");
x.t("void","io_readcachedfile");
x.t("void","setdistributiongaussian");
x.t("void","setdistributionpareto");
x.t("void","random_setseed");
x.t("void","setdistributionparetountruncated");
x.t("parametername","const");
x.t("parametername","bool");
x.t("action","taken");
x.t("0.0","shadowing_db");
x.t("0.0","1.0");
x.t("0.0","propprofile-");
x.t("globalseed","uint32");
x.t("globalseed","seed");
x.t("globalseed","node-");
x.t("storing","propagation");
x.t("4-1","table");
x.t("4-1","plus");
x.t("4-1","distribution");
x.t("skips","ntoken");
x.t("skips","three");
x.t("independence","clientptr-");
x.t("parameter-name","name");
x.t("parameter-name","index");
x.t("double","wavelength");
x.t("double","float");
x.t("double","random_erand");
x.t("double","sigma");
x.t("double","shadowing_db");
x.t("double","pathloss_db");
x.t("double","alpha");
x.t("double","shadowingdistribution");
x.t("double","genprob");
x.t("double","probabilitydistribution");
x.t("nodeid","uint32");
x.t("nodeid","const");
x.t("nodeid","mac_protocol_maca");
x.t("nodeid","node");
x.t("nodeid","app_traffic_gen_client");
x.t("nodeid","channelindex");
x.t("nodeid","including");
x.t("discussed","4.1.2.1");
x.t("4-2","info");
x.t("4-2","typedef");
x.t("situations","specific");
x.t("creates","info");
x.t("user","change");
x.t("user","specified");
x.t("user","wants");
x.t("user","model");
x.t("organized","gives");
x.t("random_jrand","random_nrand");
x.t("random_jrand","(randomseed)");
x.t("ntoken","else");
x.t("ntoken","ntoken");
x.t("ntoken","initialize");
x.t("ntoken","number");
x.t("ntoken","function");
x.t("ntoken","clientptr-");
x.t("ntoken","strcmp");
x.t("0.2","value");
x.t("nodeaddress","nodeid");
x.t("nodeaddress","interfaceaddress");
x.t("nodeaddress","localaddr");
x.t("nodeaddress","remoteaddr");
x.t("field","passed");
x.t("field","freeing");
x.t("field","persistent");
x.t("field","info_type_default");
x.t("field","type");
x.t("field","freed");
x.t("field","default");
x.t("field","apis");
x.t("field","new");
x.t("field","over-written");
x.t("field","info");
x.t("field","api");
x.t("field","message_infoalloc");
x.t("field","specified");
x.t("field","info_type_appname");
x.t("field","store");
x.t("field","ones");
x.t("field","messageinfotype");
x.t("field","user-defined");
x.t("field","accessing");
x.t("field","types");
x.t("field","expected");
x.t("field","memory");
x.t("field","message");
x.t("field","specific");
x.t("field","described");
x.t("field","protocol");
x.t("field","info_type_abstractcfpropagation");
x.t("field","following");
x.t("field","used");
x.t("field","using");
x.t("field","adding");
x.t("field","operations");
x.t("field","modify");
x.t("field","user\u2019s");
x.t("declared","message.h");
x.t("declared","file");
x.t("4-3","user-defined");
x.t("4-3","declaring");
x.t("shows","access");
x.t("shows","add");
x.t("shows","remove");
x.t("shows","function");
x.t("shows","done");
x.t("uses","sequences");
x.t("uses","random");
x.t("uses","two");
x.t("uses","updated");
x.t("sequences","pseudo-random");
x.t("48-bit","random");
x.t("48-bit","seed");
x.t("experiments","nodeid");
x.t("last","parameter");
x.t("uniform","distribution");
x.t("uniform","uni");
x.t("generating","random");
x.t("maca_t_backoff","randomtime");
x.t("implemented","files");
x.t("implemented","file");
x.t("implemented","three");
x.t("implemented","means");
x.t("implemented","qualnet_home");
x.t("implemented","propgataion.cpp");
x.t("prop_calculatepathloss","shown");
x.t("prop_calculatepathloss","implemented");
x.t("prop_calculatepathloss","node");
x.t("shadowingdistribution.getrandomnumber","obtain");
x.t("shadowingdistribution.getrandomnumber","return");
x.t("rxantennaheight","proppathprofile");
x.t("line","determine");
x.t("line","input");
x.t("interface","built-in");
x.t("interface","queues");
x.t("interface","following");
x.t("0.3","queue-weight");
x.t("info_type_default","type");
x.t("info_type_default","default");
x.t("info_type_default","size");
x.t("info_type_default","message_copyinfo");
x.t("info_type_default","4.1.2.3");
x.t("modified","models");
x.t("4-4","void");
x.t("4-4","setting");
x.t("state","maca_s_yield");
x.t("state","maca_s_backoff");
x.t("free_space","case");
x.t("app_traffic_gen.cpp","folder");
x.t("app_traffic_gen.cpp","packet");
x.t("4.1.1","reading");
x.t("clocktype","void");
x.t("clocktype","randomtime");
x.t("clocktype","qualnet");
x.t("clocktype","intervaldistribution");
x.t("clocktype","value");
x.t("clocktype","dataintv");
x.t("clocktype","vacation");
x.t("payload","information");
x.t("type","passed");
x.t("type","exist");
x.t("type","create");
x.t("type","48-bit");
x.t("type","last");
x.t("type","info_type_default");
x.t("type","clocktype");
x.t("type","items");
x.t("type","indication");
x.t("type","size");
x.t("type","info");
x.t("type","specified");
x.t("type","part");
x.t("type","int");
x.t("type","randomdistribution");
x.t("type","setdistributionuniform");
x.t("type","4.1.2.3.2");
x.t("type","abstract");
x.t("type","message");
x.t("type","given");
x.t("type","myinfo");
x.t("type","qualnet");
x.t("type","value");
x.t("type","already");
x.t("type","message_removeinfo");
x.t("type","randomseed");
x.t("type","distribution");
x.t("type","information");
x.t("type","info_type_myinfo");
x.t("type","note");
x.t("type","integer");
x.t("type","used");
x.t("type","pointer");
x.t("type","returns");
x.t("type","associated");
x.t("type","including");
x.t("freed","freeing");
x.t("freed","once");
x.t("freed","automatically");
x.t("freed","info");
x.t("sample","shows");
x.t("sample","code");
x.t("basic","functions");
x.t("basic","random");
x.t("change","random");
x.t("times","once");
x.t("times","random");
x.t("times","generate");
x.t("assert","maca");
x.t("assert","maca-");
x.t("4-5","shows");
x.t("4-5","generating");
x.t("0.5","queue-weight");
x.t("4.1.2","programming");
x.t("delete","data");
x.t("explicitly","freed");
x.t("random_nrand","(randomseed)");
x.t("random_nrand","functions");
x.t("random_nrand","maca-");
x.t("random_nrand","used");
x.t("random_nrand","generates");
x.t("whereas","yieldseed");
x.t("calls","shadowingdistribution.getrandomnumber");
x.t("calls","function");
x.t("calls","distribution");
x.t("time","static");
x.t("time","4.1.3.2");
x.t("time","uniform");
x.t("4-6","shows");
x.t("4-6","generating");
x.t("public","void");
x.t("setdistributionexponential","function");
x.t("setdistributionexponential","mean");
x.t("nolb","first");
x.t("multiple","access");
x.t("multiple","info");
x.t("multiple","independent");
x.t("multiple","instances");
x.t("multiple","purposes");
x.t("i.e","modified");
x.t("i.e","number");
x.t("i.e","counterpart");
x.t("i.e","simulation");
x.t("down","layer");
x.t("variants","info");
x.t("pre-built","object");
x.t("4.1.3","random");
x.t("explains","qualnet");
x.t("4-7","template");
x.t("4-7","class");
x.t("parsing","function");
x.t("parsing","utility");
x.t("however","cases");
x.t("trafficgenclient","shown");
x.t("trafficgenclient","clientptr");
x.t("trafficgenclient","trafficgenclientnewclient");
x.t("trafficgenclient","figure");
x.t("trafficgenclient","mem_malloc");
x.t("scans","input");
x.t("intervaldistribution.setseed","node-");
x.t("default","info");
x.t("default","configuration");
x.t("require","instance");
x.t("require","multiple");
x.t("listed","below");
x.t("listed","table");
x.t("networks","therefore");
x.t("automatically","message");
x.t("apis","info");
x.t("apis","parameters");
x.t("apis","manipulating");
x.t("apis","called");
x.t("apis","used");
x.t("removes","info");
x.t("inadvertently","modify");
x.t("assumes","structure");
x.t("correlated","having");
x.t("correlated","input");
x.t("uint32","globalseed");
x.t("uint32","nodeid");
x.t("uint32","instanceid");
x.t("uint32","protocolid");
x.t("uint32","datasizedistribution");
x.t("mac","protocol");
x.t("channel","yield");
x.t("setdistributiongaussianinteger","function");
x.t("4-8","declaring");
x.t("4-8","contains");
x.t("convert","numeric");
x.t("constraint","unsigned");
x.t("contents","file");
x.t("new","size");
x.t("new","info");
x.t("new","random");
x.t("new","object");
x.t("access","info");
x.t("access","fields");
x.t("access","space");
x.t("access","collision");
x.t("access","memory");
x.t("access","data");
x.t("access","modify");
x.t("advanced","info");
x.t("items","enumeration");
x.t("over-written","persistent");
x.t("single","sequence");
x.t("updates","seed");
x.t("instanceid","input");
x.t("instanceid","figure");
x.t("instanceid","including");
x.t("4-9","initializing");
x.t("4-9","sets");
x.t("shadowingdistribution.setdistributiondeterministic","propprofile-");
x.t("4-10","calls");
x.t("4-10","acquiring");
x.t("denotes","uniform");
x.t("denotes","deterministic");
x.t("20ms","nolb");
x.t("20ms","denotes");
x.t("indication","type");
x.t("modeled","uniform");
x.t("tokenstr","first");
x.t("tokenstr","trafficgenclientskiptoken");
x.t("tokenstr","tokensep");
x.t("tokenstr","function");
x.t("tokenstr","null");
x.t("tokenstr","trafficgen");
x.t("desttype","char");
x.t("interfaceaddress","const");
x.t("interfaceaddress","pointer");
x.t("message.h","detailed");
x.t("message.h","implementation");
x.t("message.h","users");
x.t("size","passed");
x.t("size","field");
x.t("size","info");
x.t("size","function");
x.t("size","inter-packet");
x.t("size","interval");
x.t("size","packet");
x.t("includes","two");
x.t(".app","file");
x.t("printing","error");
x.t("4-11","declared");
x.t("4-11","declaring");
x.t("intervaldistribution.getdistribution","similar");
x.t("file","queue-weight");
x.t("file","user");
x.t("file","app_traffic_gen.cpp");
x.t("file","parsing");
x.t("file","listed");
x.t("file","message.h");
x.t("file","specified");
x.t("file","name");
x.t("file","app_traffic_gen.h");
x.t("file","prototypes");
x.t("file","fileio.h");
x.t("file","randomdistribution");
x.t("file","datasizedistribution");
x.t("file","may");
x.t("file","distributions");
x.t("file","qualnet_home");
x.t("file","node");
x.t("file","qualnet");
x.t("file","several");
x.t("file","typically");
x.t("file","used");
x.t("file","nodeinput");
x.t("file","including");
x.t("list","api");
x.t("list","parameters");
x.t("list","distribution");
x.t("list","result");
x.t("found","file");
x.t("found","input");
x.t("found","function");
x.t("found","unix");
x.t("info","field");
x.t("info","type");
x.t("info","fields");
x.t("simulator","crashing");
x.t("short","randomseed");
x.t("again","updates");
x.t("proper","type");
x.t("proper","seed");
x.t("macmacasettimer","node");
x.t("setdistributiondeterministic","function");
x.t("setdistributiondeterministic","val");
x.t("upper","limit");
x.t("upper","end");
x.t("determines","type");
x.t("determines","parameters");
x.t("need","read");
x.t("trafficgenclientinit","void");
x.t("trafficgenclientinit","implemented");
x.t("trafficgenclientinit","node");
x.t("trafficgenclientinit","figure");
x.t("4-12","static");
x.t("4-12","initializing");
x.t("indicates","uniform");
x.t("initialization","random");
x.t("complete","list");
x.t("/include/message.h","figure");
x.t("add","info");
x.t("add","end");
x.t("around","three");
x.t("det","20ms");
x.t("det","180");
x.t("det","value");
x.t("det","900");
x.t("clientptr","trafficgenclient");
x.t("clientptr","null");
x.t("4-13","initializing");
x.t("4-13","independent");
x.t("4-13","call");
x.t("180","det");
x.t("applies","instances");
x.t("applies","nodes");
x.t("float","rxantennaheight");
x.t("float","clocktype");
x.t("float","txantennaheight");
x.t("api","functions");
x.t("api","message_returninfo");
x.t("api","reference");
x.t("api","message_addinfo");
x.t("api","message_removeinfo");
x.t("api","message_free");
x.t("guide","file");
x.t("guide","complete");
x.t("unless","explicitly");
x.t("remove","info");
x.t("results","single");
x.t("results","invalid");
x.t("results","otherwise");
x.t("results","even");
x.t("random_erand","random_jrand");
x.t("random_erand","(randomseed)");
x.t("initialized","functions");
x.t("initialized","function");
x.t("initialized","null");
x.t("according","distribution");
x.t("traffic-gen","implemented");
x.t("traffic-gen","uses");
x.t("traffic-gen","det");
x.t("traffic-gen","client");
x.t("localaddr","nodeaddress");
x.t("4-14","shows");
x.t("4-14","acquiring");
x.t("network","technologies");
x.t("false","io_readstringinstance");
x.t("message_infoalloc","function");
x.t("referred","random");
x.t("traffic","properties");
x.t("traffic","gen");
x.t("traffic","ten");
x.t("traffic","stream");
x.t("traffic","clientptr-");
x.t("traffic","generator");
x.t("traffic","packet");
x.t("macmacainit","shown");
x.t("macmacainit","node");
x.t("setdistributionpareto4","function");
x.t("setdistributionpareto4","val1");
x.t("truncation","upper");
x.t("truncation","shape");
x.t("truncation","val2");
x.t("truncation","val3");
x.t("truncation","alpha");
x.t("specified","parameter");
x.t("specified","prop_init");
x.t("specified","user");
x.t("specified","type");
x.t("specified",".app");
x.t("specified","io_readstring");
x.t("specified","io_readstringinstance");
x.t("specified","qualnet_home");
x.t("specified","variable");
x.t("specified","deterministic");
x.t("specified","following");
x.t("specified","using");
x.t("specified","gaussian");
x.t("queues","interface");
x.t("queues","default");
x.t("queues","configuration");
x.t("(identifier)","specified");
x.t("true","sets");
x.t("exclusive","info");
x.t("writing","protocols");
x.t("eventtype","infoptr");
x.t("built","around");
x.t("directly","section");
x.t("converts","numeric");
x.t("processed","code");
x.t("enclosed","square");
x.t("name","parameter");
x.t("name","down");
x.t("name","file");
x.t("name","function");
x.t("name","index");
x.t("name","distribution");
x.t("name","data");
x.t("[1]","0.3");
x.t("stored","parametervalue");
x.t("stored","field");
x.t("stored","info");
x.t("backoffseed","parameter");
x.t("backoffseed","yieldseed");
x.t("backoffseed","calling");
x.t("backoffseed","node-");
x.t("backoffseed","maca-");
x.t("bomin","macmacasettimer");
x.t("range","min");
x.t("range","200");
x.t("range","0.0");
x.t("range","upper");
x.t("range","det");
x.t("range","microseconds");
x.t("range","val2");
x.t("range","alpha");
x.t("range","lower");
x.t("range","exponential");
x.t("untruncated","pareto");
x.t("obtain","number");
x.t("(trafffic-gen)","example");
x.t("identifiers","parameters");
x.t("identifiers","typically");
x.t("char","parametervalue");
x.t("char","parametername");
x.t("char","tokenstr");
x.t("char","inputstring");
x.t("char","buf");
x.t("char","index");
x.t("char","readval");
x.t("char","printstr");
x.t("tasks","collecting");
x.t("existed","object");
x.t("pseudo-random","numbers");
x.t("exactly","results");
x.t("inclusive","extern");
x.t("inclusive","call");
x.t("avoidance","(maca)");
x.t("macmacayield","calls");
x.t("macmacayield","node");
x.t("maca_s_yield","macmacasettimer");
x.t("setdistributionuniforminteger","min");
x.t("setdistributionuniforminteger","function");
x.t("app_traffic_gen.h","app_traffic_gen.cpp");
x.t("app_traffic_gen.h","typedef");
x.t("gen","dist");
x.t("initialize","client");
x.t("initialize","distribution");
x.t("brackets","specification");
x.t("brackets","used");
x.t("const","nodeaddress");
x.t("const","char");
x.t("const","int");
x.t("const","bool");
x.t("const","nodeinput");
x.t("enumeration","randomdatatype");
x.t("enumeration","messageinfotype");
x.t("crashing","typedef");
x.t("fill","data");
x.t("accuracy","repeatability");
x.t("(randomseed)","function");
x.t("protocolid","uint32");
x.t("protocolid","including");
x.t("inputstring","nodeaddress");
x.t("inputstring","char");
x.t("limit","truncation");
x.t("initializing","random");
x.t("initializing","distribution");
x.t("random_double","random_clocktype");
x.t("part","example");
x.t("part","function");
x.t("part","data");
x.t("traffic_gen_trf_type_rnd","ntoken");
x.t("parameters","converted");
x.t("parameters","uniform");
x.t("parameters","info");
x.t("parameters","specified");
x.t("parameters","input");
x.t("parameters","random");
x.t("parameters","io_readstring");
x.t("parameters","first");
x.t("parameters","initializes");
x.t("parameters","function");
x.t("parameters","follow");
x.t("parameters","message_addinfo");
x.t("parameters","generate");
x.t("parameters","distribution");
x.t("parameters","read");
x.t("parameters","protocol");
x.t("parameters","returns");
x.t("parameters","associated");
x.t("provides","api");
x.t("provides","several");
x.t("boolean","specifies");
x.t("boolean","variable");
x.t("exists","message");
x.t("replaced","new");
x.t("useful","user");
x.t("randomtime","assert");
x.t("randomtime","random_nrand");
x.t("randomtime","figure");
x.t("illustrates","file");
x.t("tokens","tokenstr");
x.t("tokens","traffic-gen");
x.t("tokens","sets");
x.t("tokens","input");
x.t("tokens","read");
x.t("plus","illustrate");
x.t("probabilitydistribution.setseed","node-");
x.t("prototypes","functions");
x.t("prototypes","i/o");
x.t("identified","info");
x.t("app","name");
x.t("declarations","related");
x.t("sigma","void");
x.t("sigma","sigma");
x.t("sigma","value");
x.t("randomdatatype","datatype");
x.t("randomdatatype","defined");
x.t("shape","parameter");
x.t("determine","distribution");
x.t("stack","node");
x.t("address","parameter");
x.t("address","interfaceaddress");
x.t("address","variable");
x.t("arrays","values");
x.t("fileio.h","api");
x.t("destination","string");
x.t("fallbackifnoinstancematch","boolean");
x.t("fallbackifnoinstancematch","bool");
x.t("transported","layers");
x.t("info_type_appname","pass");
x.t("allows","user");
x.t("explained","detail");
x.t("txantennaheight","float");
x.t("random_clocktype","tokenstr");
x.t("random_clocktype","enumeration");
x.t("weights","interface");
x.t("string","required");
x.t("string","tokenstr");
x.t("string","determines");
x.t("string","traffic-gen");
x.t("string","converts");
x.t("string","string");
x.t("string","parsed");
x.t("string","identifier");
x.t("string","identifying");
x.t("string","value");
x.t("string","correct");
x.t("string","values");
x.t("string","integer");
x.t("string","pointer");
x.t("string","corresponding");
x.t("string","used");
x.t("sets","untruncated");
x.t("sets","boolean");
x.t("sets","destination");
x.t("sets","truncated");
x.t("sets","generalized");
x.t("sets","initial");
x.t("sets","intervaldistribution");
x.t("sets","distribution");
x.t("sets","shadowingdistribution");
x.t("sets","wasfound");
x.t("sets","exponential");
x.t("sets","gaussian");
x.t("int","ntoken");
x.t("int","type");
x.t("int","interfaceindex");
x.t("int","numsignals");
x.t("int","clientptr-");
x.t("int","sessionbwrequirement");
x.t("int","numphyslistenable");
x.t("int","case");
x.t("int","numphyslistening");
x.t("int","channelindex");
x.t("int","parameterinstancenumber");
x.t("int","nodelistid");
x.t("int","setdistribution");
x.t("int","datalen");
x.t("fields","sufficient");
x.t("fields","type");
x.t("fields","freed");
x.t("fields","advanced");
x.t("fields","writing");
x.t("fields","identified");
x.t("fields","different");
x.t("fields","section");
x.t("fields","accessible");
x.t("fields","message");
x.t("fields","called");
x.t("fields","used");
x.t("fields","myinfofield");
x.t("fields","therefore");
x.t("empty","info");
x.t("copies","info");
x.t("entire","stream");
x.t("entire","message");
x.t("ten","independent");
x.t("ten","poisson");
x.t("impossible","verify");
x.t("jrand48","nrand48");
x.t("input","line");
x.t("input","file");
x.t("input","parameters");
x.t("input","string");
x.t("input","configuration");
x.t("input","streams");
x.t("three","variables");
x.t("three","basic");
x.t("three","tokens");
x.t("three","input");
x.t("three","distributions");
x.t("three","priority");
x.t("extra","parameters");
x.t("extra","information");
x.t("exchanging","information");
x.t("stream","required");
x.t("stream","multiple");
x.t("stream","size");
x.t("stream","protocolid");
x.t("stream","different");
x.t("stream","scenario");
x.t("stream","generated");
x.t("stream","application");
x.t("yieldseed","parameter");
x.t("yieldseed","type");
x.t("yieldseed","calling");
x.t("yieldseed","node-");
x.t("yieldseed","figure");
x.t("datatype","getrandomnumber");
x.t("specifications","random");
x.t("functions","available");
x.t("functions","taking");
x.t("functions","4.1.1");
x.t("functions","listed");
x.t("functions","found");
x.t("functions","random_erand");
x.t("functions","specified");
x.t("functions","parameters");
x.t("functions","declarations");
x.t("functions","developing");
x.t("functions","random");
x.t("functions","functions");
x.t("functions","seed");
x.t("functions","trafficgenclientnewclient");
x.t("functions","interest");
x.t("functions","extern");
x.t("functions","4.1");
x.t("functions","distribution");
x.t("functions","described");
x.t("functions","based");
x.t("functions","reading");
x.t("functions","extract");
x.t("developing","protocol");
x.t("overloaded","function");
x.t("store","contents");
x.t("store","extra");
x.t("store","information");
x.t("store","seeds");
x.t("contention","free");
x.t("ones","defined");
x.t("random","channel");
x.t("random","stream");
x.t("random","random");
x.t("random","number");
x.t("random","distributions");
x.t("random","dist");
x.t("random","variable");
x.t("random","yield");
x.t("random","value");
x.t("random","generator");
x.t("random","distribution");
x.t("random","sequence");
x.t("random","backoff");
x.t("random","numbers");
x.t("random","streams");
x.t("uniformly","distributed");
x.t("randomdistribution","double");
x.t("randomdistribution","type");
x.t("randomdistribution","clocktype");
x.t("randomdistribution","public");
x.t("randomdistribution","uint32");
x.t("randomdistribution","randomdistribution");
x.t("randomdistribution","function");
x.t("randomdistribution","defined");
x.t("randomdistribution","class");
x.t("randomdistribution","struct");
x.t("setdistributiongeneralpareto","function");
x.t("setdistributiongeneralpareto","val1");
x.t("[channelindex]","propdata-");
x.t("shadowing_db","0.0");
x.t("shadowing_db","propdata-");
x.t("microseconds","milliseconds");
x.t("io_readstring","const");
x.t("io_readstring","overloaded");
x.t("io_readstring","function");
x.t("io_readstring","two");
x.t("io_readstring","except");
x.t("independent","random");
x.t("independent","unique");
x.t("independent","given");
x.t("independent","seeds");
x.t("point","i.e");
x.t("error","messages");
x.t("configured","user");
x.t("representation","input");
x.t("poisson","processes");
x.t("[3]","random");
x.t("1.0","inclusive");
x.t("1.0","strcmp");
x.t("1.0","packet");
x.t("next","three");
x.t("next","random");
x.t("next","function");
x.t("next","two");
x.t("next","call");
x.t("mac_protocol_maca","interfaceindex");
x.t("maca_t_yield","vacation");
x.t("give","examples");
x.t("pathloss_db","switch");
x.t("io_readstringintance","similar");
x.t("first","token");
x.t("first","eight");
x.t("first","parameterinstancenumber");
x.t("space","info");
x.t("space","allocated");
x.t("space","message");
x.t("space","used");
x.t("space","following");
x.t("info_type_myinfotype","type");
x.t("means","class");
x.t("setdistributionuniform","min");
x.t("setdistributionuniform","function");
x.t("messages","typically");
x.t("trafficgenclientskiptoken","skips");
x.t("trafficgenclientskiptoken","tokenstr");
x.t("processing","message");
x.t("model\u2019s","info");
x.t("number","0.0");
x.t("number","updates");
x.t("number","tokens");
x.t("number","parameters");
x.t("number","stream");
x.t("number","random");
x.t("number","function");
x.t("number","distributions");
x.t("number","returned");
x.t("number","generator");
x.t("number","sequence");
x.t("number","generation");
x.t("number","based");
x.t("number","real");
x.t("number","seeds");
x.t("number","generators");
x.t("seed","passed");
x.t("seed","parameter");
x.t("seed","variables");
x.t("seed","void");
x.t("seed","independence");
x.t("seed","uint32");
x.t("seed","again");
x.t("seed","random");
x.t("seed","next");
x.t("seed","function");
x.t("seed","generate");
x.t("seed","shadowingdistribution");
x.t("seed","appropriate");
x.t("seed","deterministic");
x.t("seed","order");
x.t("seed","used");
x.t("seed","setting");
x.t("interfaceindex","last");
x.t("interfaceindex","const");
x.t("interfaceindex","figure");
x.t("interfaceindex","random_setseed");
x.t("mymacdata","node-");
x.t("[interfaceindex]","maca-");
x.t("numsignals","figure");
x.t("initializes","appropriate");
x.t("datasizedistribution","uniform");
x.t("datasizedistribution","intervaldistribution");
x.t("datasizedistribution","data");
x.t("trafficgenclientnewclient","shown");
x.t("trafficgenclientnewclient","trafficgenclientinit");
x.t("trafficgenclientnewclient","node");
x.t("buf","constraint");
x.t("buf","[max_string_length]");
x.t("buf","rnd");
x.t("buf","trc");
x.t("tokensep","ntoken");
x.t("2012","scalable");
x.t("function","getrandomnumber");
x.t("function","prop_init");
x.t("function","creates");
x.t("function","uses");
x.t("function","prop_calculatepathloss");
x.t("function","random_nrand");
x.t("function","removes");
x.t("function","intervaldistribution.getdistribution");
x.t("function","trafficgenclientinit");
x.t("function","macmacainit");
x.t("function","macmacayield");
x.t("function","sets");
x.t("function","copies");
x.t("function","io_readstring");
x.t("function","io_readstringintance");
x.t("function","trafficgenclientskiptoken");
x.t("function","trafficgenclientnewclient");
x.t("function","function");
x.t("function","probabilitydistribution.setdistributionuniform");
x.t("function","match");
x.t("function","macmacabackoff");
x.t("function","assigns");
x.t("function","setseed");
x.t("function","similar");
x.t("function","figure");
x.t("function","io_readcachedfile");
x.t("function","datasizedistribution.setdistribution");
x.t("function","distribution");
x.t("function","described");
x.t("function","setdistribution");
x.t("function","used");
x.t("function","following");
x.t("function","random_setseed");
x.t("function","corresponding");
x.t("function","returns");
x.t("function","4.1.3.2.1");
x.t("function","intervaldistribution.setdistribution");
x.t("function","versions");
x.t("function","setdistrbution");
x.t("max","void");
x.t("max","setdistributionuniforminteger");
x.t("max","note");
x.t("setdistributiongaussianint","double");
x.t("truncated","pareto");
x.t("implements","function");
x.t("implements","two");
x.t("length","traffic");
x.t("clientptr-","datasizedistribution.setseed");
x.t("clientptr-","intervaldistribution.getrandomnumber");
x.t("clientptr-","intervaldistribution.setseed");
x.t("clientptr-","probabilitydistribution.setseed");
x.t("clientptr-","probabilitydistribution.setdistributionuniform");
x.t("clientptr-","datasizedistribution.setdistributionnull");
x.t("clientptr-","datasizedistribution.setdistribution");
x.t("clientptr-","intervaldistribution.setdistributionnull");
x.t("clientptr-","datasizedistribution.getrandomnumber");
x.t("clientptr-","intervaldistribution.setdistribution");
x.t("clientptr-","trftype");
x.t("sessionbwrequirement","dataintv");
x.t("io_readstringinstance","const");
x.t("io_readstringinstance","overloaded");
x.t("io_readstringinstance","function");
x.t("specifies","whether");
x.t("whether","fallback");
x.t("define","new");
x.t("define","info");
x.t("messageinfotype","shown");
x.t("messageinfotype","declared");
x.t("messageinfotype","qualnet_home");
x.t("messageinfotype","figure");
x.t("message_copyinfo","function");
x.t("4.1.2.3.1","declaring");
x.t("user-defined","type");
x.t("user-defined","info");
x.t("middle","list");
x.t("may","lead");
x.t("may","subtle");
x.t("may","require");
x.t("may","need");
x.t("may","specified");
x.t("may","specifications");
x.t("may","different");
x.t("different","protocols");
x.t("different","experiments");
x.t("different","random");
x.t("different","seed");
x.t("different","types");
x.t("different","instances");
x.t("processes","generate");
x.t("inter-packet","interval");
x.t("unique","initial");
x.t("unique","seeds");
x.t("mac_maca.cpp","folder");
x.t("distributions","taking");
x.t("distributions","2008");
x.t("distributions","implemented");
x.t("distributions","initialized");
x.t("distributions","functions");
x.t("distributions","random");
x.t("distributions","configured");
x.t("distributions","seed");
x.t("distributions","qualnet");
x.t("distributions","read");
x.t("distributions","packet");
x.t("distributions","used");
x.t("random.h","shown");
x.t("random.h","used");
x.t("setdistributionnull","int");
x.t("a-priori","built-in");
x.t("parsed","print");
x.t("probabilitydistribution.setdistributionuniform","0.0");
x.t("probabilitydistribution.setdistributionuniform","function");
x.t("reads","next");
x.t("reads","distribution");
x.t("reads","appropriate");
x.t("index","passed");
x.t("index","instance");
x.t("index","parameter-value");
x.t("index","bool");
x.t("detailed","description");
x.t("message_returninfo","overloaded");
x.t("message_returninfo","msg");
x.t("message_returninfo","used");
x.t("4.1.2.3.2","adding");
x.t("accessing","info");
x.t("accessing","pointer");
x.t("scenario","ten");
x.t("scenario","may");
x.t("starting","point");
x.t("unix","systems");
x.t("val1","double");
x.t("val1","val2");
x.t("val1","lower");
x.t("format","identifier");
x.t("format","configuration");
x.t("format","distribution");
x.t("types","particularly");
x.t("types","shadowing");
x.t("types","variables");
x.t("types","4.1.2.2");
x.t("types","read");
x.t("types","defined");
x.t("types","model");
x.t("types","member");
x.t("match","found");
x.t("match","parameterinstancenumber");
x.t("section","4.1.3.1");
x.t("section","describes");
x.t("section","explains");
x.t("section","4.1.2.3");
x.t("section","4.1.3.2.1");
x.t("section","4.1.3.2.2");
x.t("typedef","enum");
x.t("typedef","unsigned");
x.t("typedef","struct");
x.t("allocated","info");
x.t("allocated","space");
x.t("allocated","specific");
x.t("declaring","random");
x.t("declaring","user-defined");
x.t("declaring","distribution");
x.t("4.1.2.3.3","accessing");
x.t("properly","ensure");
x.t("verify","behavior");
x.t("val2","double");
x.t("val2","upper");
x.t("val2","val3");
x.t("val2","lower");
x.t("returned","function");
x.t("returned","assigned");
x.t("returned","generated");
x.t("exp","mean");
x.t("node","macdatamaca");
x.t("node","maca");
x.t("node","layer");
x.t("node","trafficgenclient");
x.t("node","char");
x.t("node","address");
x.t("node","int");
x.t("node","three");
x.t("node","different");
x.t("node","node");
x.t("node","identifier");
x.t("node","msg");
x.t("node","specify");
x.t("qualnet_home","/libraries/wireless/src");
x.t("qualnet_home","/scenarios/default/default.config");
x.t("qualnet_home","/include/message.h");
x.t("qualnet_home","/include/fileio.h");
x.t("qualnet_home","/libraries/developer/src");
x.t("qualnet_home","/libraries/wireless/src/propagation.cpp");
x.t("qualnet_home","/main/message.cpp");
x.t("qualnet_home","/include/random.h");
x.t("assigned","ntoken");
x.t("assigned","specified");
x.t("assigned","initial");
x.t("accessible","anymore");
x.t("calling","randomdistribution");
x.t("calling","seed");
x.t("calling","function");
x.t("calling","message_addinfo");
x.t("calling","distribution");
x.t("calling","appropriate");
x.t("calling","random_setseed");
x.t("4.1.2.3.4","removing");
x.t("expected","persistent");
x.t("initial","seed");
x.t("initial","values");
x.t("initial","seeds");
x.t("alpha","void");
x.t("alpha","shape");
x.t("val3","double");
x.t("val3","upper");
x.t("interest","programmers");
x.t("generalized","pareto");
x.t("switch","propprofile-");
x.t("app_traffic_gen_client","clientptr-");
x.t("identifier","parameter");
x.t("identifier","ensures");
x.t("identifier","parameter-name");
x.t("identifier","nodeid");
x.t("identifier","determines");
x.t("identifier","parameters");
x.t("identifier","address");
x.t("identifier","string");
x.t("identifier","number");
x.t("identifier","function");
x.t("identifier","node");
x.t("identifier","subnet");
x.t("identifier","uni");
x.t("parameter-value","identifier");
x.t("parameter-value","value");
x.t("reference","guide");
x.t("readval","string");
x.t("readval","node");
x.t("counterpart","real");
x.t("anymore","section");
x.t("code","shown");
x.t("code","shows");
x.t("code","sample");
x.t("code","functions");
x.t("code","contained");
x.t("end","lists");
x.t("end","range");
x.t("end","nodes");
x.t("invalid","random");
x.t("memset","maca");
x.t("currentnexthopaddress","any_dest");
x.t("macmacabackoff","calls");
x.t("macmacabackoff","node");
x.t("maca_s_backoff","randomtime");
x.t("steps","setting");
x.t("client","trafficgenclient");
x.t("client","clientptr-");
x.t("follow","distribution");
x.t("bool","fallbackifnoinstancematch");
x.t("bool","wasfound");
x.t("identifies","parameter");
x.t("abstract","contention");
x.t("assigns","info");
x.t("sizeof","(trafficgenclient)");
x.t("sizeof","(myinfofield)");
x.t("sizeof","(macdatamaca)");
x.t("user-created","model\u2019s");
x.t("user-created","model");
x.t("inter-arrival","intervals");
x.t("collision","avoidance");
x.t("folder","qualnet_home");
x.t("return","return");
x.t("return","value");
x.t("return","figure");
x.t("return","values");
x.t("return","val");
x.t("tpd","lower");
x.t("dist","traffic");
x.t("dist","randomdistribution");
x.t("square","brackets");
x.t("message","type");
x.t("message","freed");
x.t("message","multiple");
x.t("message","info");
x.t("message","replaced");
x.t("message","memory");
x.t("message","msg");
x.t("message","data");
x.t("message","information");
x.t("message","message_returninfosize");
x.t("message","using");
x.t("message","contains");
x.t("memory","allocated");
x.t("memory","storage");
x.t("message_info_type_str","info_type_undefined");
x.t("given","info");
x.t("given","starting");
x.t("info_type_forwardtcpheader","info_type_myinfotype");
x.t("info_type_forwardtcpheader","messageinfotype");
x.t("header","files");
x.t("header","file");
x.t("persistence","info");
x.t("mean","void");
x.t("mean","mean");
x.t("mean","value");
x.t("mean","setdistributiongaussian");
x.t("setseed","uint32");
x.t("setseed","sets");
x.t("setseed","probabilitydistribution");
x.t("lower","limit");
x.t("lower","end");
x.t("comprises","two");
x.t("propgataion.cpp","void");
x.t("known","a-priori");
x.t("[max_string_length]","trafficgenclient");
x.t("strcmp","buf");
x.t("qualnet","modeling");
x.t("qualnet","uses");
x.t("qualnet","pre-built");
x.t("qualnet","provides");
x.t("qualnet","random");
x.t("qualnet","implements");
x.t("qualnet","4.1");
x.t("qualnet","configuration");
x.t("qualnet","implementation");
x.t("qualnet","operations");
x.t("variable","name");
x.t("variable","initializing");
x.t("variable","format");
x.t("variable","known");
x.t("variable","configuration");
x.t("variable","shadowingdistribution");
x.t("variable","wasfound");
x.t("4.1.2.1","info");
x.t("ensure","info");
x.t("ensure","accuracy");
x.t("ensure","user-created");
x.t("ensure","models");
x.t("myinfo","field");
x.t("extern","double");
x.t("extern","int32");
x.t("pathprofile","double");
x.t("identifying","distribution");
x.t("datasizedistribution.setdistributionnull","clientptr-");
x.t("4.1","general");
x.t("consider","case");
x.t("consider","following");
x.t("4.1.2.2","apis");
x.t("taken","message_returninfo");
x.t("msg","message_alloc");
x.t("msg","sizeof");
x.t("msg","info_type_myinfo");
x.t("msg","struct");
x.t("null","access");
x.t("null","char");
x.t("null","int");
x.t("null","function");
x.t("null","memset");
x.t("yield","times");
x.t("yield","time");
x.t("node-","globalseed");
x.t("node-","nodeid");
x.t("node-","macdata");
x.t("node-","propdata");
x.t("any_dest","random_setseed");
x.t("programmers","distribution");
x.t("pathlossmodel","case");
x.t("acquiring","numbers");
x.t("random_int","tokenstr");
x.t("random_int","random_double");
x.t("random_int","function");
x.t("configuration","file");
x.t("configuration","node");
x.t("instances","parameter");
x.t("instances","parameter-value");
x.t("instances","protocol");
x.t("fallback","value");
x.t("layers","nodes");
x.t("layers","information");
x.t("4.1.2.3","ensure");
x.t("4.1.2.3","using");
x.t("rnd","processed");
x.t("rnd","random");
x.t("rnd","uni");
x.t("value","parameter");
x.t("value","setdistributiongaussianinteger");
x.t("value","specified");
x.t("value","stored");
x.t("value","range");
x.t("value","input");
x.t("value","uniformly");
x.t("value","match");
x.t("value","returned");
x.t("value","yield");
x.t("value","io_readcachefile");
x.t("value","read");
x.t("value","distribution");
x.t("value","examples");
x.t("value","backoff");
x.t("value","milliseconds");
x.t("value","used");
x.t("value","qualifier");
x.t("value","returns");
x.t("value","pareto");
x.t("similar","function");
x.t("manipulating","info");
x.t("message_addinfo","info_type_default");
x.t("message_addinfo","function");
x.t("message_addinfo","node");
x.t("message_addinfo","used");
x.t("allocate","space");
x.t("4.1.2.4","persistence");
x.t("interval","traffic");
x.t("interval","random");
x.t("interval","distributions");
x.t("interval","distribution");
x.t("interval","drop");
x.t("interval","using");
x.t("usage","4.1.3.1");
x.t("intervaldistribution","uniform");
x.t("intervaldistribution","distributions");
x.t("intervaldistribution","data");
x.t("(trafficgenclient)","initialize");
x.t("declaration","defines");
x.t("declaration","applies");
x.t("declaration","applicable");
x.t("several","built-in");
x.t("several","api");
x.t("several","forms");
x.t("implementation","multiple");
x.t("implementation","info");
x.t("implementation","traffic");
x.t("implementation","code");
x.t("figure","4-2");
x.t("figure","4-3");
x.t("figure","4-4");
x.t("figure","4-5");
x.t("figure","4-6");
x.t("figure","4-7");
x.t("figure","4-8");
x.t("figure","4-9");
x.t("figure","4-10");
x.t("figure","4-11");
x.t("figure","4-12");
x.t("figure","4-13");
x.t("figure","4-14");
x.t("specific","type");
x.t("specific","info");
x.t("free","space");
x.t("free","propagation");
x.t("already","exists");
x.t("message_removeinfo","function");
x.t("message_removeinfo","node");
x.t("message_removeinfo","used");
x.t("constant","shadowing");
x.t("constant","middle");
x.t("constant","lognormal");
x.t("constant","propdata-");
x.t("gives","examples");
x.t("erand48","jrand48");
x.t("randomseed","store");
x.t("randomseed","[3]");
x.t("randomseed","seed");
x.t("depending","shadowing");
x.t("programming","message");
x.t("programming","utility");
x.t("forms","string");
x.t("io_readcachedfile","const");
x.t("io_readcachedfile","function");
x.t("io_readcachedfile","similar");
x.t("io_readcachefile","overloaded");
x.t("info_type_dscpname","info_type_forwardtcpheader");
x.t("generate","new");
x.t("generate","traffic");
x.t("generate","exactly");
x.t("generate","random");
x.t("generate","inter-arrival");
x.t("generate","deterministic");
x.t("generated","according");
x.t("generated","random");
x.t("generated","values");
x.t("generator","functions");
x.t("generator","application");
x.t("macdata","[interfaceindex]");
x.t("propdata","shown");
x.t("propdata","int");
x.t("propdata","[channelindex]");
x.t("propdata","node-");
x.t("propdata","propdata");
x.t("shadowingdistribution.setseed","node-");
x.t("remoteaddr","destinationtype");
x.t("remoteaddr","random");
x.t("datasizedistribution.setdistribution","scans");
x.t("datasizedistribution.setdistribution","tokenstr");
x.t("datasizedistribution.setdistribution","sets");
x.t("datasizedistribution.setdistribution","reads");
x.t("datasizedistribution.setdistribution","random_int");
x.t("datasizedistribution.setdistribution","except");
x.t("dataintv","clientptr-");
x.t("dataintv","unsigned");
x.t("models","persistent");
x.t("models","inadvertently");
x.t("models","exclusive");
x.t("models","qualnet");
x.t("models","ensure");
x.t("models","implementation");
x.t("models","constant");
x.t("models","assumed");
x.t("[0]","0.5");
x.t("read","file");
x.t("read","parameters");
x.t("read","fallbackifnoinstancematch");
x.t("read","string");
x.t("read","input");
x.t("read","store");
x.t("read","functions");
x.t("read","case");
x.t("systems","file");
x.t("systems","random");
x.t("distribution","parameter");
x.t("distribution","static");
x.t("distribution","prop_init");
x.t("distribution","table");
x.t("distribution","required");
x.t("distribution","always");
x.t("distribution","variables");
x.t("distribution","double");
x.t("distribution","line");
x.t("distribution","type");
x.t("distribution","i.e");
x.t("distribution","traffic");
x.t("distribution","specified");
x.t("distribution","name");
x.t("distribution","range");
x.t("distribution","identifiers");
x.t("distribution","parameters");
x.t("distribution","sigma");
x.t("distribution","explained");
x.t("distribution","string");
x.t("distribution","functions");
x.t("distribution","random");
x.t("distribution","next");
x.t("distribution","datasizedistribution");
x.t("distribution","function");
x.t("distribution","may");
x.t("distribution","different");
x.t("distribution","val1");
x.t("distribution","types");
x.t("distribution","calling");
x.t("distribution","identifier");
x.t("distribution","return");
x.t("distribution","mean");
x.t("distribution","comprises");
x.t("distribution","variable");
x.t("distribution","value");
x.t("distribution","figure");
x.t("distribution","packet");
x.t("distribution","used");
x.t("distribution","returns");
x.t("distribution","4.1.3.2.2");
x.t("template","class");
x.t("shadowingdistribution","type");
x.t("shadowingdistribution","int");
x.t("shadowingdistribution","sets");
x.t("shadowingdistribution","deterministic");
x.t("encountered","distribution");
x.t("applicable","enclosed");
x.t("nodes","parameter-name");
x.t("nodes","nodeaddress");
x.t("nodes","info");
x.t("specifying","weights");
x.t("specifying","distribution");
x.t("purposes","discussed");
x.t("purposes","leads");
x.t("sequence","according");
x.t("sequence","random");
x.t("sequence","function");
x.t("sequence","passing");
x.t("drop","probability");
x.t("trc","else");
x.t("900","rnd");
x.t("configure","protocol");
x.t("optional","included");
x.t("data","converted");
x.t("data","type");
x.t("data","info");
x.t("data","proper");
x.t("data","stored");
x.t("data","representation");
x.t("data","length");
x.t("data","interval");
x.t("data","propdata");
x.t("data","generation");
x.t("data","structure");
x.t("information","needs");
x.t("information","stored");
x.t("information","typically");
x.t("information","used");
x.t("information","relevant");
x.t("information","across");
x.t("becomes","impossible");
x.t("mymacdata-","macvar");
x.t("printstr","randomdatatype");
x.t("parses","input");
x.t("correct","data");
x.t("behaves","function");
x.t("wasfound","false");
x.t("wasfound","true");
x.t("wasfound","char");
x.t("wasfound","nodeinput");
x.t("defined","items");
x.t("defined","random.h");
x.t("defined","header");
x.t("defined","model");
x.t("info_type_statcategoryname","info_type_dscpname");
x.t("message_returninfosize","overloaded");
x.t("result","values");
x.t("(myinfofield)","info_type_myinfo");
x.t("removing","info");
x.t("examples","usage");
x.t("examples","using");
x.t("examples","uni");
x.t("setdistributiongaussian","double");
x.t("setdistributiongaussian","function");
x.t("setdistributionpareto","function");
x.t("setdistributionpareto","val1");
x.t("exponential","exp");
x.t("exponential","distribution");
x.t("numphyslistenable","int");
x.t("lognormal","shadowing");
x.t("lognormal","constant");
x.t("lognormal","propdata-");
x.t("appropriate","getrandomnumber");
x.t("appropriate","number");
x.t("appropriate","distribution");
x.t("utility","functions");
x.t("utility","setdistribution");
x.t("values","example");
x.t("values","below");
x.t("values","required");
x.t("values","4.1.2");
x.t("values","correlated");
x.t("values","existed");
x.t("values","random_int");
x.t("case","free_space");
x.t("case","calls");
x.t("case","returned");
x.t("case","priority");
x.t("case","numeric");
x.t("case","two_ray");
x.t("/include/fileio.h","example");
x.t("collecting","statistics");
x.t("propagation","info");
x.t("propagation","data");
x.t("generation","qualnet");
x.t("generation","package");
x.t("generation","system");
x.t("generation","following");
x.t("generation","probability");
x.t("application","(trafffic-gen)");
x.t("application","applications");
x.t("application","generates");
x.t("intervals","traffic");
x.t("render","results");
x.t("int32","random_jrand");
x.t("int32","random_nrand");
x.t("backoff","times");
x.t("backoff","time");
x.t("backoff","yield");
x.t("/libraries/developer/src","traffic-gen");
x.t("specification","optional");
x.t("described","void");
x.t("described","section");
x.t("structure","macdatamaca");
x.t("structure","storing");
x.t("structure","multiple");
x.t("structure","traffic-gen");
x.t("structure","following");
x.t("structure","myinfofield");
x.t("structure","contains");
x.t("called","layer");
x.t("called","info");
x.t("repeatable","independent");
x.t("vacation","assert");
x.t("vacation","random_nrand");
x.t("numphyslistening","randomdistribution");
x.t("channelindex","double");
x.t("channelindex","propprofile-");
x.t("channelindex","nodeinput");
x.t("print","string");
x.t("genprob","data");
x.t("protocol","maca");
x.t("protocol","uses");
x.t("protocol","default");
x.t("protocol","eventtype");
x.t("protocol","name");
x.t("protocol","parameters");
x.t("protocol","stack");
x.t("protocol","different");
x.t("protocol","identifier");
x.t("protocol","models");
x.t("protocol","model");
x.t("priority","queues");
x.t("integer","variables");
x.t("integer","double");
x.t("integer","inclusive");
x.t("integer","value");
x.t("two","variables");
x.t("two","tokens");
x.t("two","extra");
x.t("two","random");
x.t("two","independent");
x.t("two","seed");
x.t("two","distributions");
x.t("two","types");
x.t("two","steps");
x.t("two","end");
x.t("users","define");
x.t("info_type_myinfo","assumes");
x.t("info_type_myinfo","access");
x.t("info_type_myinfo","fill");
x.t("info_type_myinfo","4.1.2.4");
x.t("info_type_myinfo","infoptr");
x.t("info_type_myinfo","struct");
x.t("infoptr","message_returninfo");
x.t("infoptr","4.1.2.3.3");
x.t("infoptr","4.1.2.3.4");
x.t("infoptr","msg");
x.t("infoptr","null");
x.t("infoptr","message_addinfo");
x.t("infoptr","message_removeinfo");
x.t("infoptr","infoptr");
x.t("note","backoffseed");
x.t("note","space");
x.t("note","function");
x.t("otherwise","becomes");
x.t("(macdatamaca)","assert");
x.t("(macdatamaca)","maca-");
x.t("macvar","void");
x.t("milliseconds","initialization");
x.t("milliseconds","function");
x.t("intervaldistribution.setdistributionnull","figure");
x.t("20us","20ms");
x.t("done","function");
x.t("typically",".app");
x.t("typically","arrays");
x.t("typically","protocol");
x.t("typically","used");
x.t("parameterinstancenumber","const");
x.t("parameterinstancenumber","identifies");
x.t("parameterinstancenumber","io_readcachedfile");
x.t("numeric","parameters");
x.t("numeric","string");
x.t("numeric","data");
x.t("inserting","constant");
x.t("offset","new");
x.t("itself","default");
x.t("repeatability","results");
x.t("applications","may");
x.t("based","48-bit");
x.t("based","seed");
x.t("maca-","state");
x.t("maca-","backoffseed");
x.t("maca-","bomin");
x.t("maca-","yieldseed");
x.t("maca-","mymacdata");
x.t("maca-","currentnexthopaddress");
x.t("maca-","mymacdata-");
x.t("val","void");
x.t("val","file");
x.t("nodelistid","int");
x.t("propprofile-","shadowingmean_db");
x.t("propprofile-","pathlossmodel");
x.t("propprofile-","shadowingmodel");
x.t("cases","distribution");
x.t("real","networks");
x.t("real","number");
x.t("real","world");
x.t("packet","payload");
x.t("packet","size");
x.t("packet","interval");
x.t("created","inserting");
x.t("numbers","determined");
x.t("numbers","referred");
x.t("numbers","random");
x.t("numbers","model");
x.t("numbers","used");
x.t("numbers","transform");
x.t("package","organized");
x.t("call","random_erand");
x.t("call","function");
x.t("deterministic","det");
x.t("deterministic","entire");
x.t("deterministic","unique");
x.t("deterministic","distribution");
x.t("deterministic","gaussian");
x.t("order","create");
x.t("seeds","globalseed");
x.t("seeds","random_erand");
x.t("seeds","three");
x.t("seeds","two");
x.t("seeds","note");
x.t("setdistribution","char");
x.t("setdistribution","three");
x.t("setdistribution","number");
x.t("setdistribution","parses");
x.t("setdistribution","using");
x.t("/libraries/wireless/src/propagation.cpp","void");
x.t("propdata-","shadowingdistribution.getrandomnumber");
x.t("propdata-","shadowingdistribution.setdistributiondeterministic");
x.t("propdata-","shadowingdistribution.setseed");
x.t("propdata-","shadowingdistribution.setdistributiongaussian");
x.t("used","parameter");
x.t("used","situations");
x.t("used","multiple");
x.t("used","convert");
x.t("used","access");
x.t("used","printing");
x.t("used","directly");
x.t("used","store");
x.t("used","random");
x.t("used","next");
x.t("used","processing");
x.t("used","function");
x.t("used","properly");
x.t("used","initial");
x.t("used","calling");
x.t("used","allocate");
x.t("used","free");
x.t("used","generate");
x.t("used","read");
x.t("used","models");
x.t("used","configure");
x.t("used","lognormal");
x.t("used","backoff");
x.t("used","integer");
x.t("used","simulation");
x.t("used","special");
x.t("following","example");
x.t("following","sample");
x.t("following","variants");
x.t("following","input");
x.t("following","function");
x.t("following","format");
x.t("following","code");
x.t("following","declaration");
x.t("following","data");
x.t("subnet","identifier");
x.t("pointer","info");
x.t("pointer","allocated");
x.t("pointer","readval");
x.t("pointer","data");
x.t("pointer","infoptr");
x.t("pointer","used");
x.t("corresponding","parameter");
x.t("corresponding","distribution");
x.t("except","contents");
x.t("except","case");
x.t("simulation","i.e");
x.t("simulation","results");
x.t("simulation","tasks");
x.t("simulation","parameters");
x.t("storage","associated");
x.t("model","always");
x.t("model","info");
x.t("model","specified");
x.t("model","number");
x.t("model","define");
x.t("model","may");
x.t("model","message");
x.t("model","itself");
x.t("model","general");
x.t("model","modify");
x.t("model","manipulates");
x.t("special","purposes");
x.t("info_type_abstractcfpropagation","type");
x.t("/main/message.cpp","refer");
x.t("wants","ensure");
x.t("relevant","model");
x.t("system","built");
x.t("system","section");
x.t("random_setseed","interfaceindex");
x.t("random_setseed","randomseed");
x.t("random_setseed","described");
x.t("random_setseed","maca-");
x.t("contained","files");
x.t("shadowingmodel","constant");
x.t("shadowingmodel","lognormal");
x.t("shadowingdistribution.setdistributiongaussian","propprofile-");
x.t("two_ray","double");
x.t("probability","trafficgenclient");
x.t("probability","modeled");
x.t("probability","calling");
x.t("probability","distribution");
x.t("probability","drop");
x.t("probabilitydistribution","uniform");
x.t("probabilitydistribution","general");
x.t("datasizedistribution.getrandomnumber","clocktype");
x.t("general","independent");
x.t("general","programming");
x.t("general","model");
x.t("general","probability");
x.t("using","info");
x.t("using","file");
x.t("using","api");
x.t("using","random");
x.t("using","randomdistribution");
x.t("using","implementation");
x.t("using","infoptr");
x.t("using","following");
x.t("using","pointer");
x.t("[2]","0.2");
x.t("qualifier","instance");
x.t("qualifier","(identifier)");
x.t("nodeinput","macdatamaca");
x.t("nodeinput","parametervalue");
x.t("nodeinput","const");
x.t("nodeinput","variable");
x.t("nodeinput","propdata");
x.t("nodeinput","nodeinput");
x.t("info_type_undefined","empty");
x.t("myinfofield","defined");
x.t("myinfofield","infoptr");
x.t("myinfofield","using");
x.t("message_free","following");
x.t("setting","random");
x.t("setting","initial");
x.t("setting","distribution");
x.t("class","four");
x.t("class","example");
x.t("class","illustrate");
x.t("class","randomdistribution");
x.t("class","implements");
x.t("class","class");
x.t("struct_traffic_gen_client","two");
x.t("i/o","api");
x.t("statistics","exchanging");
x.t("across","layers");
x.t("pass","app");
x.t("returns","integers");
x.t("returns","clocktype");
x.t("returns","size");
x.t("returns","next");
x.t("returns","integer");
x.t("returns","real");
x.t("returns","pointer");
x.t("adding","info");
x.t("adding","pointer");
x.t("(maca)","mac");
x.t("distributed","maca");
x.t("distributed","range");
x.t("gaussian","depending");
x.t("gaussian","distribution");
x.t("pareto","tpd");
x.t("pareto","distribution");
x.t("4.1.3.2.1","however");
x.t("4.1.3.2.1","section");
x.t("4.1.3.2.1","using");
x.t("pareto4","tpd4");
x.t("intervaldistribution.setdistribution","tokenstr");
x.t("intervaldistribution.setdistribution","behaves");
x.t("250","next");
x.t("250","uni");
x.t("therefore","included");
x.t("therefore","model\u2019s");
x.t("associated","calls");
x.t("associated","parameters");
x.t("associated","message");
x.t("associated","distribution");
x.t("modify","delete");
x.t("modify","info");
x.t("operations","info");
x.t("operations","several");
x.t("world","systems");
x.t("behavior","system");
x.t("transform","type");
x.t("setdistributionparetountruncated","function");
x.t("setdistributionparetountruncated","val1");
x.t("member","functions");
x.t("4.1.3.2.2","illustrates");
x.t("4.1.3.2.2","random");
x.t("4.1.3.2.2","give");
x.t("4.1.3.2.2","using");
x.t("uni","200");
x.t("uni","denotes");
x.t("uni","indicates");
x.t("uni","lower");
x.t("uni","20us");
x.t("tpd4","lower");
x.t("versions","function");
x.t("including","parameter");
x.t("including","instance");
x.t("including","enumeration");
x.t("including","node");
x.t("including","protocol");
x.t("struct","propdata");
x.t("struct","myinfofield");
x.t("struct","struct_traffic_gen_client");
x.t("leads","generated");
x.t("/include/random.h","contains");
x.t("unsigned","short");
x.t("unsigned","int");
x.t("passing","proper");
x.t("trafficgen","random_clocktype");
x.t("trafficgen","random_int");
x.t("datalen","unsigned");
x.t("reading","input");
x.t("reading","variable");
x.t("assumed","persistent");
x.t("generates","traffic");
x.t("generates","random");
x.t("even","render");
x.t("generators","typedef");
x.t("generators","erand48");
x.t("mem_malloc","sizeof");
x.t("trftype","traffic_gen_trf_type_rnd");
x.t("specify","parameters");
x.t("extract","numeric");
x.t("contains","info");
x.t("contains","prototypes");
x.t("contains","fields");
x.t("contains","variable");
x.t("user\u2019s","model");
x.t("object","files");
x.t("manipulates","info");
x.t("streams","example");
x.t("streams","illustrate");
x.t("streams","instanceid");
x.t("streams","uniformly");
x.t("streams","may");
x.t("streams","generate");
x.t("streams","repeatable");
x.t("streams","two");
x.t("streams","used");
x.t("streams","general");
x.t("nrand48","found");
x.t("updated","seed");
x.t("detail","section");
x.t("setdistrbution","parses");
}
