function FileData_Pairs(x)
{
x.t("coding","guidelines");
x.t("arise","assignments");
x.t("example","left");
x.t("example","printf");
x.t("example","function");
x.t("example","64-bit");
x.t("example","structure");
x.t("example","following");
x.t("example","struct");
x.t("particularly","true");
x.t("overflow","truncation");
x.t("overflow","ilp32");
x.t("clock","avoid");
x.t("clock","correct");
x.t("integers","respectively");
x.t("introduce","padding");
x.t("suffixes","long");
x.t("types_touint64","(n)");
x.t("defines","polymorphic");
x.t("defines","platform-independent");
x.t("lead","truncation");
x.t("right","example");
x.t("2008","2012");
x.t("lists","compatibility");
x.t("cast","int");
x.t("cast","pointers");
x.t("shown","figure");
x.t("i64","example");
x.t("i64","windows");
x.t("scalable","network");
x.t("table","a-2");
x.t("8-bit","integer");
x.t("8-bit","unsigned");
x.t("uint8","8-bit");
x.t("float64","64-bit");
x.t("effects","bit");
x.t("having","different");
x.t("variables","different");
x.t("variables","data");
x.t("instance","pointer");
x.t("keep","mind");
x.t("always","signed");
x.t("0x7fffffffffffffffll","//avoid");
x.t("malloc.h","implicit");
x.t("uint16","16-bit");
x.t("mystruct","right");
x.t("mystruct","left");
x.t("mystruct","long");
x.t("formatting","strings");
x.t("formatting","string");
x.t("platforms","keep");
x.t("platforms","size");
x.t("platforms","a.2");
x.t("platforms","bits");
x.t("platforms","avoid");
x.t("platforms","int");
x.t("platforms","second");
x.t("platforms","define");
x.t("platforms","consider");
x.t("platforms","data");
x.t("platforms","int32");
x.t("platforms","pointer");
x.t("field","less");
x.t("declared","explicit");
x.t("errors","instance");
x.t("introduced","align");
x.t("mode","final");
x.t("mode","assigned");
x.t("mode","exact");
x.t("mode","above");
x.t("mode","otherwise");
x.t("type","type");
x.t("type","32-bit");
x.t("type","compiling");
x.t("type","size");
x.t("type","float");
x.t("type","int");
x.t("type","long");
x.t("type","function");
x.t("type","may");
x.t("type","casting");
x.t("type","signed");
x.t("type","assuming");
x.t("type","result");
x.t("type","intptr");
x.t("type","used");
x.t("type","following");
x.t("type","returns");
x.t("type","unsigned");
x.t("type","negative");
x.t("compilers","introduce");
x.t("change","future");
x.t("left","short");
x.t("left","operand");
x.t("compiler","assume");
x.t("compiler","treats");
x.t("compiler","even");
x.t("fixed-size","data");
x.t("however","first");
x.t("however","windows");
x.t("however","lp64");
x.t("interchangeably","may");
x.t("formats","printing");
x.t("lld","clock");
x.t("listed","table");
x.t("32-bit","integers");
x.t("32-bit","platforms");
x.t("32-bit","float");
x.t("32-bit","value");
x.t("32-bit","64-bit");
x.t("32-bit","data");
x.t("32-bit","integer");
x.t("32-bit","unsigned");
x.t("uint32","32-bit");
x.t("uint32","unsigned");
x.t("default","ilp32");
x.t("default","function");
x.t("default","return");
x.t("default","bit");
x.t("among","variables");
x.t("among","may");
x.t("items","int");
x.t("promoted","type");
x.t("compiling","64-bit");
x.t("size","platforms");
x.t("size","int8");
x.t("size","cause");
x.t("size","different");
x.t("size","padding");
x.t("printing","reading");
x.t("printf","lld");
x.t("printf","i64d");
x.t("printf","types_64bitfmt");
x.t("clocktype_max","0x7fffffffffffffffll");
x.t("clocktype_max","types_toint64");
x.t("short","myshort");
x.t("unnamed","non-zero");
x.t("determines","whether");
x.t("need","long");
x.t("a.2","coding");
x.t("assignment","among");
x.t("assignment","works");
x.t("assign","cast");
x.t("assign","long");
x.t("float","float64");
x.t("float","polymorphic");
x.t("float","may");
x.t("bits","long");
x.t("bits","length");
x.t("results","particularly");
x.t("results","overflow");
x.t("results","operation");
x.t("results","pass");
x.t("results","operations");
x.t("myshort","struct");
x.t("assume","function");
x.t("assume","operations");
x.t("network","technologies");
x.t("float32","32-bit");
x.t("truncation","errors");
x.t("truncation","problems");
x.t("truncation","intermediate");
x.t("truncation","exchange");
x.t("truncation","loss");
x.t("truncation","significant");
x.t("depends","types");
x.t("recommended","types_64bitfmt");
x.t("i64d","clock");
x.t("true","dealing");
x.t("declare","64-bit");
x.t("guidelines","lists");
x.t("guidelines","compatibility");
x.t("guidelines","64-bit");
x.t("definition","different");
x.t("definition","valid");
x.t("definition","struct");
x.t("union","ilp32");
x.t("operation","2008");
x.t("operation","results");
x.t("operation","depends");
x.t("operation","operation");
x.t("operation","platform-independent");
x.t("operation","data");
x.t("resulting","pointer");
x.t("polymorphic","type");
x.t("polymorphic","data");
x.t("ilp32","lp64");
x.t("ilp32","data");
x.t("ilp32","mixed");
x.t("char","calloc");
x.t("char","mychar");
x.t("enumerated","types");
x.t("changed","uint64");
x.t("avoid","printf");
x.t("avoid","assignment");
x.t("avoid","problems");
x.t("avoid","problem");
x.t("avoid","using");
x.t("argument","type");
x.t("argument","may");
x.t("accuracy","cast");
x.t("bytes","shown");
x.t("enumeration","base");
x.t("enumeration","constants");
x.t("base","type");
x.t("platform-independent","formatting");
x.t("platform-independent","formats");
x.t("platform-independent","macros");
x.t("provides","following");
x.t("constants","example");
x.t("constants","non-negative");
x.t("constants","defined");
x.t("operand","numeric");
x.t("macros","defining");
x.t("macros","declaring");
x.t("macros","64-bit");
x.t("declarations","declare");
x.t("//avoid","define");
x.t("final","result");
x.t("strings","i64");
x.t("int","uint32");
x.t("int","default");
x.t("int","assign");
x.t("int","argument");
x.t("int","long");
x.t("int","may");
x.t("int","types");
x.t("int","truncate");
x.t("int","variable");
x.t("int","signed");
x.t("int","64-bit");
x.t("int","pointer");
x.t("int","unsigned");
x.t("fields","enumerated");
x.t("fields","affect");
x.t("fields","lp64");
x.t("fields","signed");
x.t("fields","64-bit");
x.t("fields","unsigned");
x.t("string","64-bit");
x.t("string","types_64bitfmt");
x.t("immediate","value");
x.t("immediate","values");
x.t("problems","arise");
x.t("problems","however");
x.t("problems","arising");
x.t("addition","above");
x.t("structures","order");
x.t("structures","unions");
x.t("defining","64-bit");
x.t("second","declaration");
x.t("developing","qualnet");
x.t("lengths","32-bit");
x.t("lengths","data");
x.t("present","special");
x.t("unexpected","results");
x.t("functions","expecting");
x.t("sizes","platforms");
x.t("sizes","assignment");
x.t("sizes","truncation");
x.t("sizes","different");
x.t("sizes","structure");
x.t("sizes","therefore");
x.t("erroneous","unexpected");
x.t("undefined","suffixes");
x.t("error","64-bit");
x.t("int8","8-bit");
x.t("respectively","avoid");
x.t("respectively","int64");
x.t("align","structure");
x.t("members","may");
x.t("members","different");
x.t("members","data");
x.t("unqualified","bit");
x.t("non-negative","type");
x.t("intermediate","results");
x.t("intermediate","result");
x.t("issues","coding");
x.t("issues","a.2");
x.t("issues","developing");
x.t("issues","section");
x.t("long","type");
x.t("long","32-bit");
x.t("long","need");
x.t("long","ilp32");
x.t("long","constants");
x.t("long","different");
x.t("long","types");
x.t("long","64-bit");
x.t("long","data");
x.t("long","bit");
x.t("long","pointer");
x.t("long","mylong");
x.t("long","pass");
x.t("long","unsigned");
x.t("first","definition");
x.t("cause","truncation");
x.t("cause","error");
x.t("cause","loss");
x.t("cause","segmentation");
x.t("printf/scanf","formatting");
x.t("2012","scalable");
x.t("function","int");
x.t("function","calloc");
x.t("function","returns");
x.t("function","expecting");
x.t("function","without");
x.t("length","data");
x.t("length","bit");
x.t("truncated","type");
x.t("truncated","char");
x.t("different","formatting");
x.t("different","platforms");
x.t("different","32-bit");
x.t("different","lengths");
x.t("different","sizes");
x.t("different","offsets");
x.t("different","paddings");
x.t("different","data");
x.t("may","lead");
x.t("may","change");
x.t("may","cause");
x.t("may","unequal");
x.t("may","different");
x.t("may","result");
x.t("exchange","pointers");
x.t("unequal","sizes");
x.t("whether","enumerated");
x.t("define","clocktype_max");
x.t("define","different");
x.t("instead","i64");
x.t("instead","long");
x.t("mind","long");
x.t("mind","sizeof");
x.t("aware","default");
x.t("aware","changes");
x.t("aware","data");
x.t("aware","alignment");
x.t("//correct","aware");
x.t("section","gives");
x.t("types","having");
x.t("types","always");
x.t("types","interchangeably");
x.t("types","32-bit");
x.t("types","size");
x.t("types","bits");
x.t("types","int");
x.t("types","present");
x.t("types","intermediate");
x.t("types","long");
x.t("types","different");
x.t("types","may");
x.t("types","qualnet");
x.t("types","signed");
x.t("types","defined");
x.t("types","int32");
x.t("types","order");
x.t("int64","instead");
x.t("int64","64-bit");
x.t("int64","uint64");
x.t("loss","accuracy");
x.t("loss","data");
x.t("changes","struct");
x.t("declaring","64-bit");
x.t("returned","calloc");
x.t("returned","value");
x.t("casting","operation");
x.t("casting","avoid");
x.t("qualnet_home","/include/types.h");
x.t("assigned","int");
x.t("assigned","valid");
x.t("assigned","result");
x.t("assigned","following");
x.t("segmentation","faults");
x.t("offsets","different");
x.t("explicit","return");
x.t("truncate","resulting");
x.t("calloc","truncated");
x.t("calloc","defined");
x.t("calloc","(25)");
x.t("works","32-bit");
x.t("16-bit","integer");
x.t("16-bit","unsigned");
x.t("code","fragment");
x.t("assignments","made");
x.t("assignments","data");
x.t("sizeof","function");
x.t("dealing","bit");
x.t("often","assume");
x.t("return","type");
x.t("affect","alignment");
x.t("exact","alignment");
x.t("shifts","bit");
x.t("qualnet","defines");
x.t("qualnet","provides");
x.t("qualnet","qualnet");
x.t("qualnet","models");
x.t("qualnet","data");
x.t("qualnet","defined");
x.t("variable","avoid");
x.t("variable","assigned");
x.t("paddings","compilers");
x.t("(0x7fffffffffffffff)","//correct");
x.t("made","64-bit");
x.t("padding","introduced");
x.t("padding","structures");
x.t("consider","operation");
x.t("consider","following");
x.t("a-1","figure");
x.t("a-1","structure");
x.t("less","bits");
x.t("programmers","often");
x.t("windows","linux");
x.t("a-2","table");
x.t("a-2","fixed-size");
x.t("a-2","figure");
x.t("a-2","structure");
x.t("fragment","changed");
x.t("types_toint64","(0x7fffffffffffffff)");
x.t("types_toint64","(n)");
x.t("value","ilp32");
x.t("value","assigned");
x.t("value","qualnet");
x.t("compatibility","issues");
x.t("64-bit","integers");
x.t("64-bit","platforms");
x.t("64-bit","mode");
x.t("64-bit","32-bit");
x.t("64-bit","float");
x.t("64-bit","immediate");
x.t("64-bit","constant");
x.t("64-bit","data");
x.t("64-bit","values");
x.t("64-bit","integer");
x.t("64-bit","unsigned");
x.t("gives","coding");
x.t("int16","16-bit");
x.t("signed","default");
x.t("signed","enumeration");
x.t("signed","aware");
x.t("signed","unsigned");
x.t("lp64","p64");
x.t("lp64","data");
x.t("figure","a-1");
x.t("figure","a-2");
x.t("constant","compiler");
x.t("constant","however");
x.t("declaration","macros");
x.t("declaration","valid");
x.t("models","32-bit");
x.t("models","ilp32");
x.t("models","64-bit");
x.t("models","data");
x.t("models","uint64");
x.t("digits","unexpected");
x.t("pointers","int");
x.t("mychar","struct");
x.t("linux","platforms");
x.t("linux","qualnet");
x.t("valid","platforms");
x.t("valid","linux");
x.t("valid","pointer");
x.t("arising","different");
x.t("arising","data");
x.t("data","type");
x.t("data","items");
x.t("data","aware");
x.t("data","types");
x.t("data","declaration");
x.t("data","models");
x.t("data","structure");
x.t("data","model");
x.t("p64","data");
x.t("correct","data");
x.t("defined","malloc.h");
x.t("defined","type");
x.t("defined","qualnet_home");
x.t("defined","qualnet");
x.t("defined","data");
x.t("result","overflow");
x.t("result","promoted");
x.t("result","truncation");
x.t("result","erroneous");
x.t("result","undefined");
x.t("result","may");
x.t("result","assigned");
x.t("result","data");
x.t("result","above");
x.t("faults","assign");
x.t("bit","field");
x.t("bit","fields");
x.t("bit","shifts");
x.t("bit","shift");
x.t("bit","masks");
x.t("future","versions");
x.t("assuming","intermediate");
x.t("int32","32-bit");
x.t("int32","int");
x.t("int32","int64");
x.t("values","however");
x.t("values","recommended");
x.t("values","types_toint64");
x.t("values","data");
x.t("values","special");
x.t("intptr","bits");
x.t("intptr","addition");
x.t("intptr","pointer");
x.t("above","example");
x.t("above","fixed-size");
x.t("above","operation");
x.t("above","code");
x.t("structure","definition");
x.t("structure","union");
x.t("structure","members");
x.t("structure","contains");
x.t("structure","alignment");
x.t("problem","pointer");
x.t("integer","uint8");
x.t("integer","uint16");
x.t("integer","uint32");
x.t("integer","float32");
x.t("integer","int64");
x.t("integer","int16");
x.t("integer","int32");
x.t("integer","uint64");
x.t("two","declarations");
x.t("otherwise","compiler");
x.t("mixed","assignments");
x.t("significant","digits");
x.t("numeric","constant");
x.t("treats","32-bit");
x.t("(n)","example");
x.t("(n)","types_touint64");
x.t("(n)","types_tointptr");
x.t("implicit","return");
x.t("order","avoid");
x.t("order","align");
x.t("non-zero","length");
x.t("types_tointptr","(n)");
x.t("pointer","example");
x.t("pointer","declared");
x.t("pointer","functions");
x.t("pointer","types");
x.t("pointer","returned");
x.t("pointer","variable");
x.t("pointer","data");
x.t("pointer","arithmetic");
x.t("pointer","even");
x.t("special","problems");
x.t("special","printf/scanf");
x.t("following","example");
x.t("following","assignment");
x.t("following","platform-independent");
x.t("following","two");
x.t("model","unnamed");
x.t("model","determines");
x.t("model","enumerated");
x.t("model","unqualified");
x.t("model","aware");
x.t("model","lp64");
x.t("model","data");
x.t("used","intermediate");
x.t("arithmetic","intptr");
x.t("using","data");
x.t("mylong","char");
x.t("pass","argument");
x.t("pass","sizeof");
x.t("expecting","type");
x.t("expecting","argument");
x.t("returns","int");
x.t("returns","pointer");
x.t("returns","unsigned");
x.t("unions","keep");
x.t("operations","consider");
x.t("operations","performed");
x.t("performed","variables");
x.t("types_64bitfmt","clock");
x.t("types_64bitfmt","instead");
x.t("types_64bitfmt","64-bit");
x.t("without","explicit");
x.t("therefore","function");
x.t("(25)","even");
x.t("/include/types.h","listed");
x.t("unsigned","32-bit");
x.t("unsigned","default");
x.t("unsigned","ilp32");
x.t("unsigned","enumeration");
x.t("unsigned","int");
x.t("unsigned","long");
x.t("unsigned","64-bit");
x.t("unsigned","lp64");
x.t("unsigned","integer");
x.t("struct","mystruct");
x.t("struct","size");
x.t("struct","definition");
x.t("versions","compiler");
x.t("uint64","64-bit");
x.t("uint64","signed");
x.t("uint64","bit");
x.t("even","type");
x.t("even","returned");
x.t("even","bit");
x.t("shift","operation");
x.t("reading","64-bit");
x.t("contains","bytes");
x.t("alignment","effects");
x.t("alignment","ilp32");
x.t("alignment","structures");
x.t("alignment","may");
x.t("alignment","lp64");
x.t("alignment","structure");
x.t("negative","enumeration");
x.t("masks","programmers");
}
