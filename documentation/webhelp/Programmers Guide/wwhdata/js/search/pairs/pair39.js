function FileData_Pairs(x)
{
x.t("enabling","variable");
x.t("enabling","protocol");
x.t("readable","writable");
x.t("example","d_int32");
x.t("example","cbr");
x.t("example","consider");
x.t("example","following");
x.t("dynamichierarchy","createapplicationpath");
x.t("arise","struct");
x.t("passed","directly");
x.t("below","variables");
x.t("endtime","bool");
x.t("endtime","tostype");
x.t("d_int32obj","&partitiondata-");
x.t("d_int32obj","newly");
x.t("2008","2012");
x.t("shown","below");
x.t("shown","figure");
x.t("pitfalls","avoid");
x.t("cast","underlying");
x.t("cast","appropriate");
x.t("cast","int32");
x.t("d_int32","variable");
x.t("d_int32","object");
x.t("scalable","network");
x.t("describes","enable");
x.t("built-in","dynamic");
x.t("create","path");
x.t("keep","mind");
x.t("variables","hierarchy");
x.t("variables","objects");
x.t("variables","may");
x.t("variables","interval");
x.t("variables","protocol");
x.t("variables","corresponding");
x.t("variables","dynamically");
x.t("doing","following");
x.t("always","test");
x.t("required","7.3.5");
x.t("sessionstart","clocktype");
x.t("createmacpath","function");
x.t("arguments","necessary");
x.t("(output)","addobject");
x.t("enabled","i.e");
x.t("enabled","appdatacbrclient");
x.t("enabled","default");
x.t("enabled","path");
x.t("enabled","rest");
x.t("enabled","disabled");
x.t("enabled","variable");
x.t("enabled","several");
x.t("enabled","protocol");
x.t("enabled","dynamically");
x.t("cbr","variables");
x.t("cbr","info");
x.t("cbr","function");
x.t("cbr","client");
x.t("creates","path");
x.t("implemented","qualnet_home");
x.t("setreadable","setwriteable");
x.t("line","printf");
x.t("numbytessent","uint32");
x.t("numbytessent","new");
x.t("numbytessent","path");
x.t("numbytessent","function");
x.t("numbytessent","figure");
x.t("numbytessent","dynamically");
x.t("struct_app_cbr_client_str","address");
x.t("interface","level");
x.t("necessary","determine");
x.t("necessary","extra");
x.t("&node-","partitiondata-");
x.t("partitiondata-","dynamichierarchy");
x.t("change","type");
x.t("change","time");
x.t("change","permissions");
x.t("type","example");
x.t("type","built-in");
x.t("type","variables");
x.t("type","variable");
x.t("clocktype","endtime");
x.t("clocktype","sessionstart");
x.t("clocktype","sessionfinish");
x.t("clocktype","sessionlastsent");
x.t("clocktype","interval");
x.t("clocktype","starttime");
x.t("hierarchy","pitfalls");
x.t("hierarchy","doing");
x.t("hierarchy","i.e");
x.t("hierarchy","references");
x.t("hierarchy","std::string");
x.t("hierarchy","dynamic");
x.t("hierarchy","dynamically");
x.t("external","interface");
x.t("/libraries/developer/src/app_cbr.cpp","d_clocktypeobj");
x.t("time","dynamically");
x.t("numpktssent","uint32");
x.t("i.e","d_listening_enabled");
x.t("i.e","createapplicationpath");
x.t("listed","section");
x.t("appdatacbrclient","shown");
x.t("appdatacbrclient","7.3.2");
x.t("appdatacbrclient","cbrclient");
x.t("appdatacbrclient","defined");
x.t("appdatacbrclient","mem_malloc");
x.t("appdatacbrclient","appcbrclientnewcbrclient");
x.t("sessionfinish","clocktype");
x.t("uint32","numpktssent");
x.t("uint32","itemsize");
x.t("uint32","itemstosend");
x.t("mac","level");
x.t("default","listening");
x.t("automatically","object");
x.t("objects","hierarchy");
x.t("objects","may");
x.t("objects","cannot");
x.t("objects","section");
x.t("objects","listening");
x.t("objects","longer");
x.t("objects","defined");
x.t("sessionisclosed","d_int64");
x.t("new","d_int32obj");
x.t("new","d_int64obj");
x.t("new","d_clocktypeobj");
x.t("new","data");
x.t("new","call");
x.t("new","object");
x.t("non-writable","createpartitionpath");
x.t("7.3.1","add");
x.t("7.3.1","declare");
x.t("d_int64obj","&cbrclient-");
x.t("d_int64obj","added");
x.t("d_int64obj","classes");
x.t("printf","cast");
x.t("printf","numrequestsinitiated");
x.t("printf","family");
x.t("printing","d_int32");
x.t("printing","always");
x.t("7.3.2","permissions");
x.t("7.3.2","adding");
x.t("short","sourceport");
x.t("d_clocktypeobj","d_int64obj");
x.t("d_clocktypeobj","&cbrclient-");
x.t("d_clocktypeobj","added");
x.t("info","memcpy");
x.t("&localaddr","sizeof");
x.t("add","cbr");
x.t("add","dynamic");
x.t("add","object");
x.t("7.3.3","7.3.3");
x.t("7.3.3","allocate");
x.t("7.3.3","object");
x.t("api","7.3");
x.t("7.3.4","7.3.1");
x.t("7.3.4","initializing");
x.t("localaddr","&localaddr");
x.t("localaddr","address");
x.t("seqno","d_uint32");
x.t("tos","appdatacbrclient");
x.t("network","technologies");
x.t("network","level");
x.t("(appdatacbrclient)","fill");
x.t("(appdatacbrclient)","memset");
x.t("initialized","dynamic");
x.t("(address)","cbrclient-");
x.t("(address)","memcpy");
x.t("sure","changing");
x.t("false","7.3.4");
x.t("7.3.5","dynamic");
x.t("numrequestsinitiated","2008");
x.t("numrequestsinitiated","value");
x.t("numrequestsinitiated","d\\n");
x.t("declare","dynamic");
x.t("true","object");
x.t("true","appcbrclientnewcbrclient");
x.t("directly","printf");
x.t("directly","function");
x.t("test","protocol");
x.t("path","(output)");
x.t("path","external");
x.t("path","mac");
x.t("path","new");
x.t("path","network");
x.t("path","false");
x.t("path","path");
x.t("path","addobject");
x.t("path","partition");
x.t("path","sets");
x.t("path","function");
x.t("path","different");
x.t("path","transport");
x.t("path","node");
x.t("path","calling");
x.t("path","d_hierarchy");
x.t("path","already");
x.t("path","phy");
x.t("path","application");
x.t("path","routing");
x.t("path","created");
x.t("path","object");
x.t("name","path");
x.t("name","cbrclient-");
x.t("numnodes","path");
x.t("numnodes","setwriteable");
x.t("numnodes","adds");
x.t("references","variable");
x.t("fill","cbr");
x.t("avoid","dynamic");
x.t("initializing","dynamically");
x.t("exists","protocol");
x.t("addobject","example");
x.t("addobject","path");
x.t("addobject","note");
x.t("7-8","function");
x.t("7-8","adding");
x.t("interfere","protocol");
x.t("/include/dynamic.h","functions");
x.t("determine","path");
x.t("rest","variables");
x.t("address","localaddr");
x.t("address","remoteaddr");
x.t("partition","level");
x.t("std::string","path");
x.t("allows","dynamic");
x.t("strings","listening");
x.t("segment","creates");
x.t("sets","permission");
x.t("entire","data");
x.t("permissions","readable");
x.t("permissions","automatically");
x.t("permissions","objects");
x.t("permissions","calling");
x.t("extra","data");
x.t("functions","setreadable");
x.t("functions","instead");
x.t("functions","used");
x.t("7.1.2","example");
x.t("sessionlastsent","clocktype");
x.t("itemsize","clocktype");
x.t("itemsize","short");
x.t("configured","dynamically");
x.t("family","functions");
x.t("commands","may");
x.t("createnodepath","function");
x.t("&partitiondata-","numnodes");
x.t("issues","aware");
x.t("first","creates");
x.t("&cbrclient-","numbytessent");
x.t("&cbrclient-","interval");
x.t("underlying","data");
x.t("written","commands");
x.t("written","executed");
x.t("2012","scalable");
x.t("function","creates");
x.t("function","new");
x.t("function","printf");
x.t("function","addobject");
x.t("function","memset");
x.t("function","takes");
x.t("function","class");
x.t("function","returns");
x.t("function","createapplicationpath");
x.t("function","appcbrclientnewcbrclient");
x.t("enough","dynamic");
x.t("d_listening_enabled","defined");
x.t("different","levels");
x.t("createpartitionpath","function");
x.t("createpartitionpath","partitiondata");
x.t("may","change");
x.t("may","executed");
x.t("may","read");
x.t("may","using");
x.t("setwriteable","path");
x.t("setwriteable","setexecutable");
x.t("cannot","passed");
x.t("aodv-","numrequestsinitiated");
x.t("aware","keep");
x.t("mind","dynamic");
x.t("instead","cast");
x.t("instead","mem_malloc");
x.t("section","describes");
x.t("section","7.3.1");
x.t("section","7.3.2");
x.t("section","7.3.3");
x.t("section","7.3.4");
x.t("section","7.1.2");
x.t("mentions","issues");
x.t("types","section");
x.t("types","qualnet");
x.t("typedef","struct");
x.t("transport","level");
x.t("implementing","dynamic");
x.t("&remoteaddr","sizeof");
x.t("allocated","using");
x.t("accessible","change");
x.t("qualnet_home","/libraries/developer/src/app_cbr.cpp");
x.t("qualnet_home","/include/dynamic.h");
x.t("qualnet_home","/libraries/developer/src/app_cbr.h");
x.t("qualnet_home","/include/dynamic_vars.h");
x.t("calling","function");
x.t("calling","d_hierarchy");
x.t("calling","appropriate");
x.t("node","address");
x.t("node","node");
x.t("node","cbrclient");
x.t("node","level");
x.t("added","hierarchy");
x.t("added","path");
x.t("added","calling");
x.t("added","given");
x.t("cbrclient","appdatacbrclient");
x.t("cbrclient","cbrclient");
x.t("cbrclient","sizeof");
x.t("cbrclient","cbrclient-");
x.t("cbrclient","protocol");
x.t("enable","dynamic");
x.t("enable","protocol");
x.t("client","data");
x.t("memset","enough");
x.t("memset","cbrclient");
x.t("memset","although");
x.t("executed","objects");
x.t("executed","object");
x.t("code","segment");
x.t("/libraries/developer/src/app_cbr.h","typedef");
x.t("bool","sessionisclosed");
x.t("level","createmacpath");
x.t("level","createnodepath");
x.t("level","function");
x.t("level","createexternalinterfacepath");
x.t("level","createphynpath");
x.t("level","createnetworkpath");
x.t("level","createapplicationpath");
x.t("level","createroutingpath");
x.t("level","createtransportpath");
x.t("adds","object");
x.t("sizeof","(appdatacbrclient)");
x.t("sizeof","(address)");
x.t("disabled","dynamic");
x.t("listening","enabled");
x.t("memory","management");
x.t("memory","dynamically");
x.t("d_clocktype","interval");
x.t("createexternalinterfacepath","function");
x.t("given","path");
x.t("given","permission");
x.t("variable","cast");
x.t("variable","add");
x.t("variable","sure");
x.t("variable","interfere");
x.t("variable","mentions");
x.t("variable","section");
x.t("variable","allocated");
x.t("variable","cbrclient-");
x.t("variable","writable");
x.t("variable","becomes");
x.t("variable","corresponding");
x.t("variable","dynamically");
x.t("executable","dynamic");
x.t("qualnet","listed");
x.t("sourceport","numbytessent");
x.t("sourceport","int32");
x.t("sourceport","port");
x.t("d_hierarchy","&node-");
x.t("d_hierarchy","functions");
x.t("d_hierarchy","function");
x.t("d_hierarchy","defined");
x.t("printed","using");
x.t("consider","cbr");
x.t("consider","printing");
x.t("cbrclient-","numbytessent");
x.t("cbrclient-","localaddr");
x.t("cbrclient-","sourceport");
x.t("cbrclient-","interval");
x.t("cbrclient-","remoteaddr");
x.t("longer","passed");
x.t("changing","variable");
x.t("createphynpath","function");
x.t("instantiated","dynamic");
x.t("partitiondata","numnodes");
x.t("allocate","memory");
x.t("interval","numbytessent");
x.t("interval","clocktype");
x.t("interval","add");
x.t("interval","calling");
x.t("interval","interval");
x.t("interval","similarly");
x.t("interval","createapplicationpath");
x.t("interval","object");
x.t("value","object");
x.t("writable","section");
x.t("writable","executable");
x.t("already","exists");
x.t("figure","7-8");
x.t("several","complications");
x.t("remoteaddr","&remoteaddr");
x.t("remoteaddr","d_clocktype");
x.t("remoteaddr","int32");
x.t("itemstosend","uint32");
x.t("itemstosend","int32");
x.t("takes","arguments");
x.t("/include/dynamic_vars.h","appdatacbrclient");
x.t("read","written");
x.t("although","required");
x.t("dynamic","variables");
x.t("dynamic","objects");
x.t("dynamic","api");
x.t("dynamic","strings");
x.t("dynamic","variable");
x.t("dynamic","data");
x.t("dynamic","protocol");
x.t("dynamic","object");
x.t("phy","level");
x.t("becomes","object");
x.t("data","type");
x.t("data","types");
x.t("data","dynamic");
x.t("data","structure");
x.t("setexecutable","example");
x.t("defined","qualnet_home");
x.t("defined","dynamic");
x.t("appropriate","type");
x.t("appropriate","path");
x.t("appropriate","member");
x.t("newly","created");
x.t("memcpy","cbrclient-");
x.t("d_int64","numbytessent");
x.t("int32","printing");
x.t("int32","seqno");
x.t("int32","itemsize");
x.t("int32","itemstosend");
x.t("application","level");
x.t("routing","level");
x.t("structure","appdatacbrclient");
x.t("structure","may");
x.t("structure","section");
x.t("structure","using");
x.t("permission","hierarchy");
x.t("permission","newly");
x.t("port","interval");
x.t("complications","arise");
x.t("protocol","name");
x.t("protocol","configured");
x.t("protocol","section");
x.t("protocol","allocated");
x.t("protocol","listening");
x.t("protocol","variable");
x.t("protocol","dynamic");
x.t("protocol","data");
x.t("protocol","7.3");
x.t("protocol","following");
x.t("protocol","dynamically");
x.t("note","new");
x.t("classes","implementing");
x.t("7.3","dynamically");
x.t("d_uint32","tos");
x.t("created","variables");
x.t("created","path");
x.t("created","calling");
x.t("created","object");
x.t("call","instead");
x.t("(int)","aodv-");
x.t("following","create");
x.t("following","line");
x.t("following","change");
x.t("following","code");
x.t("corresponding","dynamic");
x.t("used","create");
x.t("starttime","clocktype");
x.t("management","function");
x.t("class","d_int32obj");
x.t("class","d_int64obj");
x.t("class","d_clocktypeobj");
x.t("class","d_hierarchy");
x.t("class","containing");
x.t("similarly","path");
x.t("containing","variable");
x.t("using","new");
x.t("using","function");
x.t("using","memory");
x.t("using","following");
x.t("using","mem_malloc");
x.t("adding","objects");
x.t("adding","dynamic");
x.t("levels","createpartitionpath");
x.t("createnetworkpath","function");
x.t("returns","true");
x.t("member","function");
x.t("tostype","tos");
x.t("struct","struct_app_cbr_client_str");
x.t("struct","class");
x.t("createapplicationpath","function");
x.t("createapplicationpath","node");
x.t("createapplicationpath","given");
x.t("createapplicationpath","returns");
x.t("createroutingpath","function");
x.t("createtransportpath","function");
x.t("mem_malloc","allows");
x.t("mem_malloc","entire");
x.t("mem_malloc","sizeof");
x.t("d\\n","(int)");
x.t("dynamically","enabling");
x.t("dynamically","enabled");
x.t("dynamically","accessible");
x.t("dynamically","enable");
x.t("object","numbytessent");
x.t("object","necessary");
x.t("object","hierarchy");
x.t("object","non-writable");
x.t("object","add");
x.t("object","initialized");
x.t("object","name");
x.t("object","numnodes");
x.t("object","permissions");
x.t("object","aodv-");
x.t("object","added");
x.t("object","listening");
x.t("object","printed");
x.t("object","instantiated");
x.t("object","interval");
x.t("object","appropriate");
x.t("object","newly");
x.t("object","created");
x.t("object","class");
x.t("appcbrclientnewcbrclient","shown");
x.t("appcbrclientnewcbrclient","implemented");
x.t("appcbrclientnewcbrclient","first");
x.t("appcbrclientnewcbrclient","node");
x.t("appcbrclientnewcbrclient","adds");
}
