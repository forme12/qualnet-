function FileData_Pairs(x)
{
x.t("example","function");
x.t("example","event");
x.t("example","consider");
x.t("example","figure");
x.t("example","bellman-ford");
x.t("example","mac_finalize");
x.t("antenna_globalantennamodelpreinitialize","(partitiondata)");
x.t("protocols","transporttcpinit");
x.t("protocols","given");
x.t("protocols","running");
x.t("protocols","nodes");
x.t("protocols","routing");
x.t("else","udp-");
x.t("else","strcmp");
x.t("app_processevent","void");
x.t("app_processevent","calls");
x.t("app_processevent","node");
x.t("app_processevent","defined");
x.t("/main/partition.cpp","shown");
x.t("/main/partition.cpp","partition_finalize");
x.t("globally","rather");
x.t("globally","layers");
x.t("rather","node");
x.t("networkdata.networkprotocol","ipv6_only");
x.t("mac_protocol_dot11","macdot11finalize");
x.t("2008","2012");
x.t("shown","figure");
x.t("every","node");
x.t("resides","example");
x.t("scalable","network");
x.t("layer","example");
x.t("layer","void");
x.t("layer","discussed");
x.t("layer","calls");
x.t("layer","initialization");
x.t("layer","determines");
x.t("layer","initialized");
x.t("layer","traffic-generating");
x.t("layer","dispatcher");
x.t("layer","functions");
x.t("layer","function");
x.t("layer","level");
x.t("layer","given");
x.t("layer","event");
x.t("layer","e.g");
x.t("layer","layers");
x.t("layer","nodes");
x.t("layer","node_processevent");
x.t("layer","routing");
x.t("layer","finalization");
x.t("layer","protocol");
x.t("variables","example");
x.t("variables","protocol");
x.t("any_address","nodeinput");
x.t("prop_layer","prop_processevent");
x.t("prop_processevent","node");
x.t("mac_layer","mac_processevent");
x.t("mac_processevent","node");
x.t("required","actions");
x.t("required","handle");
x.t("components","initialization");
x.t("void","app_processevent");
x.t("void","partition_initializenodes");
x.t("void","transport_initialize");
x.t("void","routingbellmanfordlayer");
x.t("void","transportudpinit");
x.t("void","maccsmafinalize");
x.t("void","node_processevent");
x.t("void","mac_finalize");
x.t("void","partition_finalize");
x.t("firstnode","nextnode");
x.t("firstnode","bool");
x.t("firstnode","null");
x.t("firstnode","nodeinput");
x.t("performs","required");
x.t("performs","actions");
x.t("discussed","section");
x.t("discussed","detail");
x.t("network_initialize","nextnode");
x.t("creates","udp");
x.t("creates","initializes");
x.t("enabled","layer");
x.t("enabled","mac");
x.t("enabled","transportudpinit");
x.t("nodeid","any_address");
x.t("msg_app_fromtransport","indicates");
x.t("msg_app_fromtransport","handlefromtransport");
x.t("network_preinit","nextnode");
x.t("transporttcpinit","transportudpinit");
x.t("transporttcpinit","node");
x.t("transporttcpinit","defined");
x.t("shows","initialization");
x.t("shows","node");
x.t("(msg)","case");
x.t("app_getprotocoltype","node");
x.t("app_initializeapplications","partitiondata-");
x.t("app_initializeapplications","initializes");
x.t("partitiondata-","firstnode");
x.t("state","variables");
x.t("state","variable");
x.t("kernel","gets");
x.t("phy_layer","phy_processevent");
x.t("illustrated","figure");
x.t("statement","calls");
x.t("interface","node");
x.t("interface","e.g");
x.t("interface","mac_finalize");
x.t("type","msg_app_fromtranspor");
x.t("type","transportdataudp");
x.t("type","transportudpstat");
x.t("retval","false");
x.t("retval","transportdataudp");
x.t("hierarchy","start");
x.t("hierarchy","three");
x.t("hierarchy","end");
x.t("hierarchy","event");
x.t("time","example");
x.t("time","app_initializeapplications");
x.t("time","mac_initialize");
x.t("calls","initialization");
x.t("calls","csma");
x.t("calls","dispatcher");
x.t("calls","function");
x.t("calls","event");
x.t("calls","application");
x.t("calls","finalization");
x.t("sections","describe");
x.t("partition_initializenodes","initializes");
x.t("partition_initializenodes","partitiondata");
x.t("partition_initializenodes","defined");
x.t("bottom-most","layer");
x.t("mac","layer");
x.t("mac","protocol");
x.t("udp-statistics","&retval");
x.t("default","error_reporterror");
x.t("/main/mac.cpp","shown");
x.t("start","simulation");
x.t("transport_initialize","nextnode");
x.t("transport_initialize","initializes");
x.t("transport_initialize","node");
x.t("transport_initialize","defined");
x.t("network_processevent","node");
x.t("consists","switch");
x.t("bellmanford","ipv4");
x.t("simulator","basics");
x.t("simulator","architecture");
x.t("initialization","hierarchy");
x.t("initialization","functions");
x.t("initialization","function");
x.t("initialization","event");
x.t("determines","layer");
x.t("determines","protocol");
x.t("short","protocoltype");
x.t("app_routing_fisheye","routingfisheyelayer");
x.t("indicates","packet");
x.t("udp","protocols");
x.t("udp","state");
x.t("udp","transportdataudp");
x.t("udp","transportudpinittrace");
x.t("udp","data");
x.t("udp","protocol");
x.t("udp","bellman-ford");
x.t("udp","statistics");
x.t("(protocoltype)","case");
x.t("actions","required");
x.t("actions","occurrence");
x.t("handlefromtransport","performs");
x.t("handlefromtransport","node");
x.t("handlefromtransport","event");
x.t("handlefromtransport","defined");
x.t("network","technologies");
x.t("network","initialized");
x.t("network","based");
x.t("initialized","globally");
x.t("initialized","function");
x.t("initialized","node");
x.t("initialized","bottom-up");
x.t("3.2","protocol");
x.t("tcp","udp");
x.t("false","else");
x.t("false","strcmp");
x.t("udpstatsenabled","false");
x.t("udpstatsenabled","true");
x.t("applayerftpserver","node");
x.t("network_finalize","(nextnode)");
x.t("macdatacsma","csma");
x.t("macdatacsma","node-");
x.t("traffic-generating","protocols");
x.t("true","else");
x.t("true","udp-");
x.t("true","maccsmaprintstats");
x.t("handle","node");
x.t("handle","received");
x.t("app_ftp_server","applayerftpserver");
x.t("eventtype","case");
x.t("csma","macdatacsma");
x.t("csma","interfaceindex");
x.t("csma","finalization");
x.t("csma","protocol");
x.t("csma","statistics");
x.t("3.4","qualnet");
x.t("nextnode","partitiondata-");
x.t("nextnode","null");
x.t("nextnode","nextnode-");
x.t("nextnode","nodeinput");
x.t("name","[max_string_length]");
x.t("handlecheckroutetimeoutalarm","(node)");
x.t("mac_initialize","partitiondata-");
x.t("mac_initialize","initializes");
x.t("initialize","globally");
x.t("char","name");
x.t("char","buf");
x.t("handler","function");
x.t("handler","specific");
x.t("handler","protocol");
x.t("handler","bellman-ford");
x.t("const","nodeinput");
x.t("dispatcher","dispatcher");
x.t("dispatcher","functions");
x.t("dispatcher","function");
x.t("msg_app_fromtranspor","occurs");
x.t("ipv4","network");
x.t("handleperiodicupdatealarm","(node)");
x.t("antenna","model");
x.t("numberinterfaces","interfaceindex");
x.t("stack","running");
x.t("int","interfaceindex");
x.t("int","node");
x.t("/libraries/developer/src/transport_tcp.cpp","function");
x.t("three","components");
x.t("three","functions");
x.t("transportdataudp","udp");
x.t("transportdataudp","transportudpstat");
x.t("transportdataudp","mem_malloc");
x.t("adaptationdata.adaptationprotocol","adaptation_protocol_none");
x.t("user_finalize","(nextnode)");
x.t("macdot11finalize","node");
x.t("prints","statistics");
x.t("functions","consists");
x.t("functions","tcp");
x.t("functions","routingbellmanfordlayer");
x.t("functions","3.4.1");
x.t("functions","maccsmafinalize");
x.t("functions","application");
x.t("functions","finalization");
x.t("functions","performed");
x.t("/main/transport.cpp","shown");
x.t("/include/transport.h","qualnet_home");
x.t("message_getlayer","(msg)");
x.t("transport_layer","transport_processevent");
x.t("transportdata.udp","udp");
x.t("transportdata.udp","null");
x.t("io_readstring","node-");
x.t("finally","protocol");
x.t("respectively","void");
x.t("respectively","function");
x.t("occurs","msg_app_fromtransport");
x.t("occurs","qualnet");
x.t("occurs","application");
x.t("routingbellmanfordlayer","shown");
x.t("routingbellmanfordlayer","handlefromtransport");
x.t("routingbellmanfordlayer","node");
x.t("routingbellmanfordlayer","event");
x.t("first","node");
x.t("transportdata.tcp","null");
x.t("collection","enabled");
x.t("&retval","buf");
x.t("protocoltype","app_getprotocoltype");
x.t("protocoltype","protocoltype");
x.t("messages","sent");
x.t("select","mac");
x.t("initializes","mac");
x.t("initializes","udp");
x.t("initializes","transport");
x.t("initializes","layers");
x.t("initializes","nodes");
x.t("initializes","application");
x.t("initializes","protocol");
x.t("buf","retval");
x.t("buf","udp-");
x.t("buf","[max_string_length]");
x.t("occurrence","event");
x.t("adaptation_protocol_none","nextnode-");
x.t("adaptationdata.endsystem","network_finalize");
x.t("interfaceindex","macdatacsma");
x.t("interfaceindex","select");
x.t("interfaceindex","interfaceindex");
x.t("interfaceindex","node-");
x.t("interfaceindex","figure");
x.t("interfaceindex","break");
x.t("[interfaceindex]","macprotocol");
x.t("[interfaceindex]","switch");
x.t("[interfaceindex]","macstats");
x.t("[interfaceindex]","macvar");
x.t("2012","scalable");
x.t("function","app_processevent");
x.t("function","2008");
x.t("function","layer");
x.t("function","transporttcpinit");
x.t("function","app_initializeapplications");
x.t("function","partition_initializenodes");
x.t("function","mac");
x.t("function","transport_initialize");
x.t("function","initialization");
x.t("function","determines");
x.t("function","udp");
x.t("function","handlefromtransport");
x.t("function","mac_initialize");
x.t("function","routingbellmanfordlayer");
x.t("function","initializes");
x.t("function","3.4.2");
x.t("function","transportudpinit");
x.t("function","3.4.3");
x.t("function","event");
x.t("function","maccsmafinalize");
x.t("function","app_initialize");
x.t("function","node_processevent");
x.t("function","appropriate");
x.t("function","finalization");
x.t("function","called");
x.t("function","print");
x.t("function","protocol");
x.t("function","turn");
x.t("function","mac_finalize");
x.t("function","partition_finalize");
x.t("udp-","udpstatsenabled");
x.t("udp-","statistics");
x.t("ipv6_only","bellmanford");
x.t("libraries/developer/src/transport_udp.h","respectively");
x.t("msg_app_checkroutetimeoutalarm","handlecheckroutetimeoutalarm");
x.t("macprotocol","case");
x.t("3.4.1","initialization");
x.t("starting","bottom-most");
x.t("/main/application.cpp","void");
x.t("msg-","eventtype");
x.t("basics","3.4");
x.t("section","3.2");
x.t("section","4.2");
x.t("handling","hierarchy");
x.t("handling","functions");
x.t("handling","finalization");
x.t("transport","layer");
x.t("3.4.2","event");
x.t("node","example");
x.t("node","time");
x.t("node","initialization");
x.t("node","network");
x.t("node","csma");
x.t("node","nextnode");
x.t("node","const");
x.t("node","int");
x.t("node","interfaceindex");
x.t("node","function");
x.t("node","calling");
x.t("node","node");
x.t("node","level");
x.t("node","message");
x.t("node","event");
x.t("node","msg");
x.t("node","finalization");
x.t("node","two");
x.t("node","nodeinput");
x.t("node","message_free");
x.t("node","mac_finalize");
x.t("qualnet_home","/main/partition.cpp");
x.t("qualnet_home","/main/mac.cpp");
x.t("qualnet_home","/libraries/developer/src/transport_tcp.cpp");
x.t("qualnet_home","/main/transport.cpp");
x.t("qualnet_home","/include/transport.h");
x.t("qualnet_home","libraries/developer/src/transport_udp.h");
x.t("qualnet_home","/main/application.cpp");
x.t("qualnet_home","/libraries/developer/src/routing_bellmanford.cpp");
x.t("qualnet_home","/main/node.cpp");
x.t("qualnet_home","/libraries/wireless/src/mac_csma.cpp");
x.t("qualnet_home","/libraries/developer/src/transport_udp.cpp");
x.t("calling","initialization");
x.t("transportudpinit","creates");
x.t("transportudpinit","respectively");
x.t("transportudpinit","function");
x.t("transportudpinit","node");
x.t("transportudpinit","defined");
x.t("switch","statement");
x.t("switch","(protocoltype)");
x.t("switch","message_getlayer");
x.t("switch","msg-");
x.t("switch","node-");
x.t("switch","value");
x.t("3.4.3","finalization");
x.t("memset","udp-");
x.t("invalid","switch");
x.t("end","simulation");
x.t("hierarchically","first");
x.t("hierarchically","figure");
x.t("level","layer");
x.t("level","finally");
x.t("level","following");
x.t("bool","retval");
x.t("bool","wasfound");
x.t("sizeof","(transportdataudp)");
x.t("sizeof","(transportudpstat)");
x.t("return","switch");
x.t("macstats","true");
x.t("given","node");
x.t("initalize","global");
x.t("[max_string_length]","nextnode");
x.t("[max_string_length]","bool");
x.t("transportudpinittrace","node");
x.t("strcmp","buf");
x.t("message","msg");
x.t("message","free");
x.t("qualnet","kernel");
x.t("qualnet","simulator");
x.t("qualnet","three");
x.t("event","example");
x.t("event","performs");
x.t("event","type");
x.t("event","handler");
x.t("event","dispatcher");
x.t("event","occurs");
x.t("event","handling");
x.t("event","occurred");
x.t("event","application");
x.t("event","bellman-ford");
x.t("event","scheduled");
x.t("variable","udp");
x.t("variable","data");
x.t("e.g","csma");
x.t("e.g","event");
x.t("//switch//","figure");
x.t("architecture","discussed");
x.t("architecture","simulator");
x.t("architecture","3.4");
x.t("null","network_initialize");
x.t("null","network_preinit");
x.t("null","transporttcpinit");
x.t("null","node");
x.t("null","initalize");
x.t("null","node-");
x.t("null","phy_finalize");
x.t("node-","networkdata.networkprotocol");
x.t("node-","nodeid");
x.t("node-","numberinterfaces");
x.t("node-","transportdata.udp");
x.t("node-","transportdata.tcp");
x.t("node-","macdata");
x.t("occurred","calls");
x.t("occurred","event");
x.t("msg","short");
x.t("msg","switch");
x.t("msg","return");
x.t("msg","node-");
x.t("msg","figure");
x.t("msg","break");
x.t("consider","mac");
x.t("maccsmafinalize","shown");
x.t("maccsmafinalize","void");
x.t("maccsmafinalize","node");
x.t("maccsmafinalize","maccsmaprintstats");
x.t("layers","mac");
x.t("layers","initialized");
x.t("layers","protocol");
x.t("4.2","function");
x.t("partitiondata","partitiondata-");
x.t("partitiondata","int");
x.t("partitiondata","partitiondata");
x.t("running","every");
x.t("running","layer");
x.t("running","interface");
x.t("running","node");
x.t("running","application");
x.t("(partitiondata)","nextnode");
x.t("(partitiondata)","antenna_globalantennapatternpreinitialize");
x.t("antenna_globalantennapatternpreinitialize","(partitiondata)");
x.t("/libraries/developer/src/routing_bellmanford.cpp","void");
x.t("value","done");
x.t("figure","3-10");
x.t("figure","3-11");
x.t("figure","3-12");
x.t("figure","3-13");
x.t("figure","3-9");
x.t("figure","3-14");
x.t("figure","3-15");
x.t("figure","3-16");
x.t("figure","3-17");
x.t("specific","event");
x.t("free","message_free");
x.t("phy_finalize","(nextnode)");
x.t("(node)","break");
x.t("msg_app_triggeredupdatealarm","handletriggeredupdatealarm");
x.t("macdata","[interfaceindex]");
x.t("nodes","void");
x.t("nodes","function");
x.t("3-10","layer");
x.t("3-10","calls");
x.t("app_layer","app_processevent");
x.t("app_routing_bellmanford","routingbellmanfordlayer");
x.t("handletriggeredupdatealarm","(node)");
x.t("mac_protocol_csma","maccsmafinalize");
x.t("app_initialize","nextnode");
x.t("app_initialize","initializes");
x.t("3-11","shows");
x.t("3-11","protocol");
x.t("data","structure");
x.t("node_processevent","calls");
x.t("node_processevent","node");
x.t("node_processevent","defined");
x.t("/main/node.cpp","shown");
x.t("network_layer","network_processevent");
x.t("transport_finalize","(nextnode)");
x.t("defined","qualnet_home");
x.t("bottom-up","order");
x.t("wasfound","char");
x.t("3-12","function");
x.t("3-12","node");
x.t("appropriate","layer");
x.t("received","transport");
x.t("received","packet");
x.t("error_reporterror","invalid");
x.t("finalization","hierarchy");
x.t("finalization","functions");
x.t("finalization","function");
x.t("application","layer");
x.t("routing","protocols");
x.t("routing","protocol");
x.t("case","mac_protocol_dot11");
x.t("case","prop_layer");
x.t("case","mac_layer");
x.t("case","msg_app_fromtransport");
x.t("case","phy_layer");
x.t("case","app_routing_fisheye");
x.t("case","app_ftp_server");
x.t("case","transport_layer");
x.t("case","msg_app_checkroutetimeoutalarm");
x.t("case","msg_app_triggeredupdatealarm");
x.t("case","app_layer");
x.t("case","app_routing_bellmanford");
x.t("case","mac_protocol_csma");
x.t("case","network_layer");
x.t("case","app_ftp_client");
x.t("case","msg_app_periodicupdatealarm");
x.t("3-13","layer");
x.t("3-13","function");
x.t("/libraries/wireless/src/mac_csma.cpp","void");
x.t("3-9","function");
x.t("3-9","node");
x.t("global","antenna");
x.t("structure","type");
x.t("3-14","calls");
x.t("3-14","protocol");
x.t("called","hierarchically");
x.t("called","print");
x.t("print","csma");
x.t("print","protocol");
x.t("protocol","example");
x.t("protocol","resides");
x.t("protocol","creates");
x.t("protocol","state");
x.t("protocol","illustrated");
x.t("protocol","initialization");
x.t("protocol","stack");
x.t("protocol","prints");
x.t("protocol","occurs");
x.t("protocol","transportudpinit");
x.t("protocol","level");
x.t("protocol","event");
x.t("protocol","running");
x.t("protocol","finalization");
x.t("protocol","called");
x.t("protocol","model");
x.t("protocol","run");
x.t("protocol","statistics");
x.t("two","initialization");
x.t("nextnode-","adaptationdata.adaptationprotocol");
x.t("nextnode-","adaptationdata.endsystem");
x.t("nextnode-","nextnodedata");
x.t("transportudpstat","transportdataudp");
x.t("transportudpstat","defined");
x.t("transportudpstat","mem_malloc");
x.t("done","message");
x.t("3-15","shows");
x.t("3-15","node");
x.t("app_finalize","(nextnode)");
x.t("macvar","node-");
x.t("nextnodedata","initialize");
x.t("nextnodedata","figure");
x.t("bellman-ford","dispatcher");
x.t("bellman-ford","case");
x.t("bellman-ford","protocol");
x.t("based","routing");
x.t("3-16","layer");
x.t("3-16","interface");
x.t("order","starting");
x.t("phy_init","nextnode");
x.t("packet","functions");
x.t("packet","received");
x.t("3-17","calls");
x.t("3-17","protocol");
x.t("model","antenna_globalantennamodelpreinitialize");
x.t("model","qualnet");
x.t("model","finalize");
x.t("following","sections");
x.t("simulation","node");
x.t("simulation","finalization");
x.t("turn","calls");
x.t("/libraries/developer/src/transport_udp.cpp","void");
x.t("scheduled","calls");
x.t("break","default");
x.t("break","messages");
x.t("break","//switch//");
x.t("break","figure");
x.t("break","case");
x.t("phy_processevent","node");
x.t("run","node");
x.t("maccsmaprintstats","node");
x.t("maccsmaprintstats","defined");
x.t("maccsmaprintstats","statistics");
x.t("nodeinput","udp-statistics");
x.t("nodeinput","transport_initialize");
x.t("nodeinput","nextnode");
x.t("nodeinput","char");
x.t("nodeinput","io_readstring");
x.t("nodeinput","transportudpinit");
x.t("nodeinput","node-");
x.t("nodeinput","figure");
x.t("nodeinput","app_initialize");
x.t("nodeinput","phy_init");
x.t("nodeinput","nodeinput");
x.t("routingfisheyelayer","node");
x.t("message_free","node");
x.t("mac_finalize","calls");
x.t("mac_finalize","node");
x.t("mac_finalize","defined");
x.t("mac_finalize","finalization");
x.t("mac_finalize","(nextnode)");
x.t("(nextnode)","nextnode");
x.t("(nextnode)","user_finalize");
x.t("(nextnode)","transport_finalize");
x.t("(nextnode)","nextnode-");
x.t("(nextnode)","app_finalize");
x.t("(nextnode)","mac_finalize");
x.t("(nextnode)","mobility_finalize");
x.t("mobility_finalize","(nextnode)");
x.t("finalize","node-");
x.t("statistics","variables");
x.t("statistics","initialization");
x.t("statistics","collection");
x.t("statistics","sizeof");
x.t("statistics","variable");
x.t("statistics","transportudpstat");
x.t("statistics","protocol");
x.t("statistics","maccsmaprintstats");
x.t("applayerftpclient","node");
x.t("partition_finalize","calls");
x.t("partition_finalize","partitiondata");
x.t("partition_finalize","defined");
x.t("performed","hierarchically");
x.t("app_ftp_client","applayerftpclient");
x.t("describe","hierarchy");
x.t("(transportdataudp)","node-");
x.t("transport_processevent","node");
x.t("msg_app_periodicupdatealarm","handleperiodicupdatealarm");
x.t("mem_malloc","sizeof");
x.t("sent","udp");
x.t("detail","section");
x.t("(transportudpstat)","memset");
x.t("(transportudpstat)","figure");
x.t("gets","handle");
}
