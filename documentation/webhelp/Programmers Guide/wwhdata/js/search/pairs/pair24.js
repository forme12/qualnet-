function FileData_Pairs(x)
{
x.t("equal-sized","square");
x.t("/libraries/wireless/src","however");
x.t("/libraries/wireless/src","qualnet_home");
x.t("/libraries/wireless/src","code");
x.t("example","mobility");
x.t("example","place");
x.t("example","random");
x.t("example","implementation");
x.t("example","created");
x.t("example","following");
x.t("coding","different");
x.t("/libraries","called");
x.t("mobility_","designate");
x.t("statements","include");
x.t("included","parameter");
x.t("included","list");
x.t("min","max");
x.t("library","example");
x.t("library","description");
x.t("library","doesn\u2019t");
x.t("library","file");
x.t("library","functions");
x.t("library","addon");
x.t("library","e.g");
x.t("library","qualnet");
x.t("library","called");
x.t("library","modify");
x.t("group-based","mobility");
x.t("group-based","node");
x.t("placed","library");
x.t("placed","cell");
x.t("placed","grid");
x.t("placed","terrain");
x.t("determined","terrain");
x.t("available","requested");
x.t("available","generic");
x.t("available","different");
x.t("below","mobility_addanewdestination");
x.t("below","struct");
x.t("illustrate","different");
x.t("illustrate","process");
x.t("manner","helpful");
x.t("exist","create");
x.t("parameter","example");
x.t("parameter","declarations");
x.t("parameter","index");
x.t("parameter","declaration");
x.t("parameter","values");
x.t("parameter","specification");
x.t("else","char");
x.t("else","strcmp");
x.t("else","mobilitydata-");
x.t("moves","within");
x.t("moves","current");
x.t("moves","along");
x.t("moves","following");
x.t("moves","towards");
x.t("moves","position");
x.t("(latitude-longitude-altitude)","used");
x.t("defines","events");
x.t("hints","naming");
x.t("just","string");
x.t("mobility_group.cpp","implement");
x.t("lead","unexpected");
x.t("right","orientation.azimuth");
x.t("/mac_maca.cpp","(wireless_dir)");
x.t("2008","2012");
x.t("movement","node");
x.t("lists","mobility");
x.t("lists","different");
x.t("lists","header");
x.t("within","group");
x.t("files","placed");
x.t("files","create");
x.t("files","various");
x.t("files","having");
x.t("files","mobility");
x.t("files","needed");
x.t("files","4.8.5.4");
x.t("files","mobility_waypoint.cpp");
x.t("files","wireless");
x.t("files","final");
x.t("files","contain");
x.t("files","random");
x.t("files","first");
x.t("files","clearly");
x.t("files","section");
x.t("files","qualnet_home");
x.t("files","important");
x.t("files","throughout");
x.t("files","header");
x.t("files","qualnet");
x.t("files","models");
x.t("files","examples");
x.t("files","following");
x.t("files","folders");
x.t("files","associated");
x.t("files","mobility.cpp");
x.t("files","generally");
x.t("implement","mobility");
x.t("implement","prefix");
x.t("implement","group");
x.t("implement","random");
x.t("implement","e.g");
x.t("resides","functionality");
x.t("subdirectory","qualnet_home");
x.t("needs","included");
x.t("shown","figure");
x.t("(clocktype)","distance");
x.t("scalable","network");
x.t("description","mobilitytype");
x.t("description","found");
x.t("description","add");
x.t("description","data");
x.t("description","model");
x.t("table","4-22");
x.t("table","4-23");
x.t("positions","user");
x.t("positions","time");
x.t("positions","4.8.5.7");
x.t("positions","different");
x.t("positions","node");
x.t("positions","read");
x.t("positions","nodes");
x.t("positions","destinations");
x.t("positions","calculated");
x.t("positions","using");
x.t("positions","associated");
x.t("describes","different");
x.t("describes","main");
x.t("create","files");
x.t("create","directory");
x.t("create","header");
x.t("create","output");
x.t("refer","file");
x.t("destcounter","clocktype");
x.t("user-specified","configuration");
x.t("tree","compile");
x.t("static","void");
x.t("related","models");
x.t("events","next");
x.t("events","data");
x.t("source","files");
x.t("source","tree");
x.t("source","file");
x.t("source","header");
x.t("various","mobility");
x.t("enum","no_mobility");
x.t("groundnode","true");
x.t("groundnode","bool");
x.t("groundnode","variable");
x.t("variables","store");
x.t("layer","protocol");
x.t("instructions","creating");
x.t("instructions","given");
x.t("having","header");
x.t("always","0.0");
x.t("always","add");
x.t("instance","parameter");
x.t("any_address","nodeinput");
x.t("dest1","dest2");
x.t("dest1","coordinates");
x.t("dest1","mobilitydata-");
x.t("straight","line");
x.t("cartesian","coordinate");
x.t("distances","elevation");
x.t("components","new");
x.t("components","random");
x.t("components","model");
x.t("components","definitions");
x.t("node\u2019s","trajectory");
x.t("node\u2019s","mobility");
x.t("node\u2019s","path");
x.t("node\u2019s","position");
x.t("delta","mobilitydata");
x.t("void","setrandommobility");
x.t("void","mobility_waypointinit");
x.t("void","mobility_preinitialize");
x.t("void","mobilityvar");
x.t("flag","indicates");
x.t("snippets","look");
x.t("snippets","two");
x.t("recommend","adding");
x.t("dest2","return");
x.t("dest2","orientation");
x.t("0.0","coord_calcdistance");
x.t("0.0","model");
x.t("spherical","coordinate");
x.t("current","positions");
x.t("current","variables");
x.t("current","segment");
x.t("current","mobilityelement");
x.t("current","position");
x.t("user","mobility");
x.t("user","specified");
x.t("user","input");
x.t("mobilitytype","shown");
x.t("mobilitytype","mobilitytype");
x.t("mobilitytype","mymobility");
x.t("mobilitytype","field");
x.t("mobilitytype","d_float32");
x.t("mobilitytype","indicates");
x.t("mobilitytype","enumeration");
x.t("mobilitytype","random_waypoint_mobility");
x.t("mobilitytype","io_readstring");
x.t("mobilitytype","group_mobility");
x.t("mobilitytype","file_based_mobility");
x.t("mobilitytype","figure");
x.t("mobilitytype","defined");
x.t("mobilitytype","no_mobility");
x.t("mobilitytype","mobilityelement");
x.t("double","speed");
x.t("double","minspeed");
x.t("double","maxspeed");
x.t("double","distance");
x.t("double","lastexternalspeed");
x.t("enabled","seed");
x.t("num_past_mobility_events","positions");
x.t("trajectory","lastexternaltruemobilitytime");
x.t("discussed","snippets");
x.t("mymobility","else");
x.t("mymobility","mobilitytype");
x.t("mymobility","list");
x.t("mymobility","param1");
x.t("mymobility","string");
x.t("mymobility","mobility_mymobilityinit");
x.t("mymobility","qualnet");
x.t("mymobility","value1");
x.t("mymobility","mobilitydata-");
x.t("mymobility","names");
x.t("parameter-name","name");
x.t("parameter-name","index");
x.t("nodeid","any_address");
x.t("nodeid","mobilitydata");
x.t("line","setrandommobility");
x.t("line","qualnet");
x.t("line","constant");
x.t("uniform","uniform");
x.t("uniform","node");
x.t("coordinate","always");
x.t("coordinate","system");
x.t("implemented","mobility_placement.cpp");
x.t("implemented","mobility_waypoint.cpp");
x.t("implemented","qualnet_home");
x.t("implemented","qualnet");
x.t("implemented","mobility.cpp");
x.t("last","external");
x.t("field","mobilitydata");
x.t("nodeaddress","nodeid");
x.t("pauses","destination");
x.t("look","files");
x.t("look","complete");
x.t("provided","refer");
x.t("points","node\u2019s");
x.t("points","along");
x.t("working","mobility");
x.t("interface","functions");
x.t("statement","files");
x.t("statement","include");
x.t("modified","mobility_preinitialize");
x.t("calculates","future");
x.t("calculates","position");
x.t("configurable","parameters");
x.t("times","stores");
x.t("times","node");
x.t("times","read");
x.t("times","arrival");
x.t("type","lists");
x.t("type","s.\\n");
x.t("clocktype","maxsimtime");
x.t("clocktype","time");
x.t("clocktype","lastexternalmobilitytime");
x.t("clocktype","maxsimclock");
x.t("clocktype","lastexternaltruemobilitytime");
x.t("clocktype","mobilitypause");
x.t("clocktype","moveinterval");
x.t("clocktype","simclock");
x.t("clocktype","nextmovetime");
x.t("d_float32","distancegranularity");
x.t("mobility_placement.cpp","include");
x.t("mobility_placement.cpp","called");
x.t("doesn\u2019t","already");
x.t("4-197","typedef");
x.t("4-197","adding");
x.t("mobility-wp-max-speed","&wasfound");
x.t("mobility-wp-max-speed","decide");
x.t("maxsimtime","else");
x.t("maxsimtime","assert");
x.t("maxsimtime","figure");
x.t("assert","wasfound");
x.t("assert","mobilitydata-");
x.t("mobility-wp-min","mobility-wp-max");
x.t("io_readdouble","nodeid");
x.t("io_readdouble","functions");
x.t("io_readdouble","read");
x.t("/mac_tdma.cpp","(wireless_dir)");
x.t("time","positions");
x.t("time","last");
x.t("time","lastexternalmobilitytime");
x.t("time","reaching");
x.t("time","coordinates");
x.t("time","mobility_mymobilityinit");
x.t("time","next");
x.t("time","minimum");
x.t("time","arrival");
x.t("d_bool","groundnode");
x.t("lastexternalmobilitytime","velocity");
x.t("lastexternalmobilitytime","variable");
x.t("external","mobility");
x.t("external","true");
x.t("external","velocity");
x.t("external","moving");
x.t("calculation","function");
x.t("4-198","void");
x.t("4-198","reading");
x.t("calls","function");
x.t("calls","position");
x.t("/mobility_pedestrian.cpp","(wireless_dir)");
x.t("/multicast_odmrp.cpp","figure");
x.t("sections","create");
x.t("4.8.5.1","header");
x.t("4.8.5.1","naming");
x.t("however","recommended");
x.t("multiple","instances");
x.t("explains","read");
x.t("unknown","mobility");
x.t("4-199","static");
x.t("4-199","calling");
x.t("mobility","related");
x.t("mobility","events");
x.t("mobility","mymobility");
x.t("mobility","type");
x.t("mobility","time");
x.t("mobility","apis");
x.t("mobility","includes");
x.t("mobility","random_waypoint");
x.t("mobility","initialization");
x.t("mobility","model-specific");
x.t("mobility","parameters");
x.t("mobility","&wasfound");
x.t("mobility","developing");
x.t("mobility","functions");
x.t("mobility","model\u2019s");
x.t("mobility","function");
x.t("mobility","node");
x.t("mobility","qualnet");
x.t("mobility","variable");
x.t("mobility","models");
x.t("mobility","4.8");
x.t("mobility","information");
x.t("mobility","data");
x.t("mobility","model");
x.t("mobility","statistics");
x.t("mobility","behavior");
x.t("speed","minspeed");
x.t("speed","wireless");
x.t("speed","arrange");
x.t("speed","pedestriandata");
x.t("speed","int");
x.t("speed","dest2.common.c1");
x.t("speed","second");
x.t("speed","random");
x.t("speed","maximum");
x.t("speed","randomly");
x.t("speed","mobilityremainder");
x.t("needed","mobility");
x.t("needed","communicate");
x.t("needed","compute");
x.t("partial","description");
x.t("apis","listed");
x.t("apis","parameters");
x.t("apis","several");
x.t("listed","below");
x.t("4.8.5.2","creating");
x.t("4.8.5.2","include");
x.t("4.8.5.2","modify");
x.t("minspeed","double");
x.t("minspeed","random_erand");
x.t("minspeed","simclock");
x.t("assumes","third");
x.t("horizontal","vertical");
x.t("lastexternalvelocity","double");
x.t("new","library");
x.t("new","mobility");
x.t("new","destination");
x.t("new","model");
x.t("certain","functions");
x.t("4.8.5.3","decide");
x.t("4.8.5.3","including");
x.t("prefix","file");
x.t("start","simulation");
x.t("compiling","files");
x.t("ground","mobility");
x.t("ground","mobilitystats");
x.t("includes","node");
x.t("includes","following");
x.t("nextorientation","double");
x.t("4.8.5.4","determining");
x.t("4.8.5.4","modify");
x.t("random_waypoint","mobility-wp-pause");
x.t("terraindata","terraindata");
x.t("terraindata","&dest2");
x.t("terraindata","nodeinput");
x.t("4-200","random");
x.t("4-200","figure");
x.t("file","example");
x.t("file","defines");
x.t("file","files");
x.t("file","source");
x.t("file","calculates");
x.t("file","includes");
x.t("file","mobility.h");
x.t("file","mobility_mymobility.cpp");
x.t("file","io_readstring");
x.t("file","function");
x.t("file","may");
x.t("file","stores");
x.t("file","section");
x.t("file","format");
x.t("file","node");
x.t("file","qualnet_home");
x.t("file","qualnet");
x.t("file","include");
x.t("file","developer");
x.t("file","makefile-common");
x.t("file","data");
x.t("file","typical");
x.t("file","called");
x.t("file","file-based");
x.t("file","mobilitydata-");
x.t("file","relevant");
x.t("file","using");
x.t("file","names");
x.t("file","mobility_mymobility.h");
x.t("file","contains");
x.t("determines","frequently");
x.t("determines","intermediate");
x.t("determines","initial");
x.t("areas","curvature");
x.t("areas","terrain");
x.t("mobility_waypoint.cpp","implement");
x.t("mobility_waypoint.cpp","add");
x.t("mobility_waypoint.cpp","folder");
x.t("mobility_waypoint.cpp","mobility_waypoint.h");
x.t("indicates","mobility");
x.t("indicates","name");
x.t("indicates","whether");
x.t("indicates","model");
x.t("simulator","groundnode");
x.t("list","apis");
x.t("list","mobility");
x.t("list","summarizes");
x.t("found","api");
x.t("need","modified");
x.t("need","performed");
x.t("initialization","function");
x.t("4.8.5.5","implement");
x.t("4.8.5.5","modifying");
x.t("4.8.5.5","modify");
x.t("user-developed","models");
x.t("stdlib.h","include");
x.t("api.h","include");
x.t("(wasfound)","strcmp");
x.t("4-201","random");
x.t("4-201","show");
x.t("add","source");
x.t("add","mymobility");
x.t("add","mobility");
x.t("add","new");
x.t("add","entry");
x.t("add","end");
x.t("group","group-based");
x.t("group","moves");
x.t("group","mobility");
x.t("group","area");
x.t("group","nodes");
x.t("organization","files");
x.t("complete","description");
x.t("complete","list");
x.t("complete","code");
x.t("actions","need");
x.t("4.8.5.6","explains");
x.t("4.8.5.6","implementing");
x.t("4.8.5.6","general");
x.t("4-202","recompile");
x.t("4-202","adding");
x.t("requested","user");
x.t("api","functions");
x.t("api","reference");
x.t("guide","mobility-related");
x.t("setrandommobility","shown");
x.t("setrandommobility","implemented");
x.t("setrandommobility","nodeaddress");
x.t("setrandommobility","calls");
x.t("setrandommobility","function");
x.t("setrandommobility","call");
x.t("setrandommobility","turn");
x.t("4.8.5.7","4.8.5.1");
x.t("4.8.5.7","including");
x.t("entry","mymobility");
x.t("applies","instances");
x.t("applies","nodes");
x.t("according","specified");
x.t("random_erand","mobilitydata-");
x.t("network","technologies");
x.t("selects","random");
x.t("mobility.h","file");
x.t("mobility.h","complete");
x.t("mobility.h","section");
x.t("recommended","user-developed");
x.t("recommended","separate");
x.t("paramn","valuen");
x.t("paramn","names");
x.t("mobility_waypointinit","nodeid");
x.t("mobility_waypointinit","implemented");
x.t("mobility_waypointinit","nodeaddress");
x.t("mobility_waypointinit","mobility_waypointinit");
x.t("mobility_waypointinit","first");
x.t("specified","distances");
x.t("specified","format");
x.t("specified","node");
x.t("specified","qualnet");
x.t("specified","algorithm");
x.t("true","io_readdouble");
x.t("true","mobility");
x.t("true","mobility_getgroundelevation");
x.t("true","figure");
x.t("true","mobilitypause");
x.t("summarizes","actions");
x.t("range","pauses");
x.t("common","mobility");
x.t("common","sources");
x.t("common","mobility-related");
x.t("name","parameter");
x.t("name","files");
x.t("name","mobility");
x.t("name","indicates");
x.t("name","enumeration");
x.t("name","input");
x.t("name","different");
x.t("name","protocol");
x.t("name","model");
x.t("/libraries/developer/src/mobility_placement.cpp","file");
x.t("/libraries/developer/src/mobility_placement.cpp","contain");
x.t("path","struct");
x.t("guidelines","section");
x.t("guidelines","qualnet");
x.t("functionality","component");
x.t("creating","files");
x.t("creating","activating");
x.t("/libraries/user_models","called");
x.t("enclosed","square");
x.t("stored","array");
x.t("reaching","destination");
x.t("wireless","library");
x.t("wireless","group");
x.t("wireless","random-waypoint");
x.t("wireless","random");
x.t("wireless","node");
x.t("tasks","prototypes");
x.t("tasks","read");
x.t("param1","paramn");
x.t("param1","value1");
x.t("initialize","model");
x.t("char","buf");
x.t("char","errormessage");
x.t("(buf)","read");
x.t("pedestrian","mobility");
x.t("enumeration","mobilitytype");
x.t("enumeration","type");
x.t("random_waypoint_mobility","else");
x.t("random_waypoint_mobility","mobility_waypointinit");
x.t("random_waypoint_mobility","file_based_mobility");
x.t("frequently","node\u2019s");
x.t("perform","common");
x.t("perform","following");
x.t("component","file");
x.t("component","appropriate");
x.t("part","library");
x.t("brackets","specification");
x.t("brackets","used");
x.t("qualify","parameter");
x.t("maxspeed","minspeed");
x.t("maxspeed","char");
x.t("distance","double");
x.t("distance","speed");
x.t("provides","several");
x.t("provides","outline");
x.t("parameters","example");
x.t("parameters","table");
x.t("parameters","description");
x.t("parameters","void");
x.t("parameters","mymobility");
x.t("parameters","mobility");
x.t("parameters","specified");
x.t("parameters","mobility-wp-pause");
x.t("parameters","input");
x.t("parameters","section");
x.t("parameters","identifier");
x.t("parameters","qualnet");
x.t("parameters","configuration");
x.t("parameters","read");
x.t("parameters","specify");
x.t("model-specific","configuration");
x.t("programmer","name");
x.t("helpful","examine");
x.t("src","create");
x.t("mobility_mymobility.cpp","contain");
x.t("mobility_mymobility.cpp","strongly");
x.t("mobility_mymobility.cpp","constant");
x.t("partition.h","function");
x.t("mobility-wp-pause","mobility-wp-min");
x.t("mobility-wp-pause","&wasfound");
x.t("mobility-wp-pause","30s");
x.t("mobility-wp-min-speed","mobility-wp-max-speed");
x.t("mobility-wp-min-speed","&wasfound");
x.t("none","mobilitydata-");
x.t("arrange","min");
x.t("terraindata-","origin.common.c1");
x.t("terraindata-","origin.common.c2");
x.t("terraindata-","dimensions.common.c1");
x.t("terraindata-","dimensions.common.c2");
x.t("terraindata-","coordinatesystemtype");
x.t("integrating","mobility");
x.t("/libraries/wireless/makefile-common","shown");
x.t("placement","functions");
x.t("placement","terrain");
x.t("placement","models");
x.t("placement","policy");
x.t("placement","model");
x.t("area","following");
x.t("macros","functions");
x.t("prototypes","interface");
x.t("prototypes","functions");
x.t("generic","mobility");
x.t("generic","functions");
x.t("generic","node");
x.t("pedestriandata","void");
x.t("pedestriandata","pedestriandata");
x.t("pedestriandata","pointer");
x.t("determine","coordinates");
x.t("place","mobility");
x.t("place","folder");
x.t("indicate","error");
x.t("standard","library");
x.t("declarations","described");
x.t("&wasfound","buf");
x.t("&wasfound","&minspeed");
x.t("&wasfound","&maxspeed");
x.t("/antenna_global.cpp","(wireless_dir)");
x.t("/mobility_group.cpp","wireless_dir");
x.t("destination","io_readstring");
x.t("destination","node");
x.t("destination","along");
x.t("vertical","4.8.2");
x.t("stack","qualnet_home");
x.t("explained","below");
x.t("decide","format");
x.t("address","parameter");
x.t("modifying","generic");
x.t("sprintf","errormessage");
x.t("final","step");
x.t("entire","group");
x.t("array","recent");
x.t("array","stores");
x.t("array","figure");
x.t("array","destarray");
x.t("array","destinations");
x.t("examine","files");
x.t("examine","implementation");
x.t("coordinates","dest1");
x.t("coordinates","delta");
x.t("coordinates","dest2");
x.t("coordinates","times");
x.t("coordinates","time");
x.t("coordinates","node");
x.t("coordinates","nextposition");
x.t("coordinates","position");
x.t("int","destcounter");
x.t("int","sequencenum");
x.t("int","bool");
x.t("int","numdests");
x.t("int","seedval");
x.t("int","nummovestonextdest");
x.t("fields","structure");
x.t("velocity","lastexternalvelocity");
x.t("velocity","lastexternalspeed");
x.t("velocity","variable");
x.t("segment","node\u2019s");
x.t("string","mymobility");
x.t("string","waypoint");
x.t("mobility_mymobilityinit","files");
x.t("mobility_mymobilityinit","nodeid");
x.t("mobility_mymobilityinit","setrandommobility");
x.t("maxsimclock","double");
x.t("maxsimclock","clocktype");
x.t("maxsimclock","simclock");
x.t("dest2.common.c1","terraindata-");
x.t("third","coordinate");
x.t("repeats","process");
x.t("cell","randomly");
x.t("contain","source");
x.t("contain","generic");
x.t("contain","detailed");
x.t("contain","following");
x.t("structures","provided");
x.t("structures","needed");
x.t("structures","defined");
x.t("structures","note");
x.t("structures","relevant");
x.t("structures","mobility-related");
x.t("input","files");
x.t("input","file");
x.t("input","specified");
x.t("lastexternalspeed","bool");
x.t("lastexternalspeed","variable");
x.t("moving","speed");
x.t("moving","velocity");
x.t("understand","mobility");
x.t("problems","even");
x.t("math.h","include");
x.t("dest2.common.c2","terraindata-");
x.t("second","mobilitydata-");
x.t("wireless_dir","/mobility_mymobility.cpp");
x.t("developing","mobility");
x.t("developing","protocol");
x.t("developing","adding");
x.t("random","random");
x.t("random","node");
x.t("random","position");
x.t("random","waypoint");
x.t("random-waypoint","random");
x.t("random-waypoint","mobilitydata-");
x.t("selected","range");
x.t("divided","number");
x.t("small","areas");
x.t("functions","available");
x.t("functions","source");
x.t("functions","mobility");
x.t("functions","need");
x.t("functions","complete");
x.t("functions","add");
x.t("functions","structures");
x.t("functions","io_readstring");
x.t("functions","qualnet_home");
x.t("functions","code");
x.t("functions","header");
x.t("functions","read");
x.t("functions","defined");
x.t("functions","contained");
x.t("functions","turn");
x.t("functions","4.8.3");
x.t("functions","performed");
x.t("functions","therefore");
x.t("functions","insert");
x.t("/include/mobility.h","file");
x.t("/include/mobility.h","section");
x.t("store","user-specified");
x.t("store","next");
x.t("store","node");
x.t("recent","num_past_mobility_events");
x.t("unexpected","problems");
x.t("orientation.elevation","read");
x.t("dest2.common.c3","0.0");
x.t("grid","grid");
x.t("grid","point");
x.t("grid","node");
x.t("point","node\u2019s");
x.t("point","note");
x.t("calculate","store");
x.t("calculate","node");
x.t("strongly","recommended");
x.t("error","adding");
x.t("pause","time");
x.t("30s","mobility-wp-min-speed");
x.t("io_readstring","nodeid");
x.t("io_readstring","io_readdouble");
x.t("simulates","movement");
x.t("next","straight");
x.t("next","current");
x.t("next","destination");
x.t("next","move");
x.t("next","mobilityelement");
x.t("intermediate","positions");
x.t("intermediate","points");
x.t("respectively","past");
x.t("keeping","naming");
x.t("calculating","node");
x.t("squares","node");
x.t("earth","cannot");
x.t("earth","ignored");
x.t("collection","enabled");
x.t("appears","names");
x.t("first","reads");
x.t("first","step");
x.t("clearly","indicates");
x.t("minimum","speed");
x.t("number","equal-sized");
x.t("number","mobility");
x.t("number","squares");
x.t("number","nodes");
x.t("number","destinations");
x.t("briefly","examine");
x.t("communicate","different");
x.t("group_mobility","else");
x.t("group_mobility","pedestrian_mobility");
x.t("sequencenum","clocktype");
x.t("sequencenum","variable");
x.t("sequencenum","mobilityelement");
x.t("seed","maxspeed");
x.t("seed","int");
x.t("seed","dest2.common.c2");
x.t("seed","dest2.common.c3");
x.t("seed","variable");
x.t("seed","used");
x.t("model\u2019s","source");
x.t("model\u2019s","name");
x.t("model\u2019s","header");
x.t("model\u2019s","configuration");
x.t("model\u2019s","algorithm");
x.t("buf","mymobility");
x.t("buf","assert");
x.t("buf","(wasfound)");
x.t("buf","file");
x.t("buf","none");
x.t("buf","random-waypoint");
x.t("buf","[max_string_length]");
x.t("buf","group-mobility");
x.t("buf","error_reporterror");
x.t("origin.common.c1","terraindata-");
x.t("2012","scalable");
x.t("comments","functions");
x.t("function","mobility");
x.t("function","4.8.5.6");
x.t("function","setrandommobility");
x.t("function","mobility_waypointinit");
x.t("function","perform");
x.t("function","mobility_mymobilityinit");
x.t("function","calculate");
x.t("function","calculating");
x.t("function","section");
x.t("function","adds");
x.t("function","given");
x.t("function","mobility_preinitialize");
x.t("function","returns");
x.t("function","reading");
x.t("user_models","library");
x.t("user_models","subdirectory");
x.t("user_models","section");
x.t("user_models","follow");
x.t("determining","mobility");
x.t("maximum","speed");
x.t("max","io_readdouble");
x.t("origin.common.c2","terraindata-");
x.t("mobility_getgroundelevation","terraindata");
x.t("addon","example");
x.t("addon","add");
x.t("different","components");
x.t("different","times");
x.t("different","mobility");
x.t("different","certain");
x.t("different","steps");
x.t("different","layers");
x.t("different","node-placement");
x.t("different","simulation");
x.t("move","node");
x.t("move","together");
x.t("cannot","ignored");
x.t("specifies","array");
x.t("whether","mobility");
x.t("whether","node");
x.t("mobility_returncoordinates","function");
x.t("may","lead");
x.t("may","model-specific");
x.t("reads","mobility");
x.t("reads","name");
x.t("reads","mobility-related");
x.t("&dest1","&dest2");
x.t("detailed","description");
x.t("detailed","comments");
x.t("scenario","square");
x.t("ignored","spherical");
x.t("ignored","mobility");
x.t("stores","positions");
x.t("stores","mobilitytype");
x.t("stores","last");
x.t("stores","mobility");
x.t("stores","coordinates");
x.t("stores","seed");
x.t("stores","number");
x.t("stores","sequence");
x.t("stores","information");
x.t("step","integrating");
x.t("step","towards");
x.t("index","instance");
x.t("index","parameter-value");
x.t("index","used");
x.t("consecutive","destinations");
x.t("&dest2","mobility_addanewdestination");
x.t("&dest2","&distance");
x.t("section","illustrate");
x.t("section","describes");
x.t("section","4.8.5.1");
x.t("section","4.8.5.2");
x.t("section","4.8.5.3");
x.t("section","4.8.5.4");
x.t("section","4.8.5.5");
x.t("section","4.8.5.6");
x.t("section","4.8.5.7");
x.t("section","provides");
x.t("section","briefly");
x.t("section","4.10");
x.t("section","4.10.5");
x.t("section","gives");
x.t("section","4.8.3");
x.t("section","describe");
x.t("curvature","earth");
x.t("typedef","enum");
x.t("format","mobility");
x.t("format","initialize");
x.t("format","identifier");
x.t("format","specifying");
x.t("compile","section");
x.t("compile","created");
x.t("directory","qualnet_home");
x.t("implementing","mobility");
x.t("changes","common");
x.t("node","example");
x.t("node","placed");
x.t("node","moves");
x.t("node","positions");
x.t("node","mobility");
x.t("node","start");
x.t("node","ground");
x.t("node","group");
x.t("node","setrandommobility");
x.t("node","according");
x.t("node","selects");
x.t("node","placement");
x.t("node","repeats");
x.t("node","respectively");
x.t("node","mobility_returncoordinates");
x.t("node","different");
x.t("node","section");
x.t("node","node");
x.t("node","important");
x.t("node","identifier");
x.t("node","numdests");
x.t("node","orientation");
x.t("node","configuration");
x.t("node","distancegranularity");
x.t("node","mobility_nextmovetime");
x.t("node","4.8.5");
x.t("node","position");
x.t("initial","positions");
x.t("initial","node");
x.t("qualnet_home","/libraries/wireless/src");
x.t("qualnet_home","/libraries");
x.t("qualnet_home","/libraries/developer/src/mobility_placement.cpp");
x.t("qualnet_home","/libraries/user_models");
x.t("qualnet_home","/libraries/wireless/makefile-common");
x.t("qualnet_home","/include/mobility.h");
x.t("qualnet_home","/libraries/wireless/src/mobility_waypoint.cpp");
x.t("qualnet_home","/libraries/user_models/src");
x.t("qualnet_home","/include/api.h");
x.t("qualnet_home","/include/fileio.h");
x.t("qualnet_home","/libraries/developer/src");
x.t("qualnet_home","/main/mobility.cpp");
x.t("file_based_mobility","else");
x.t("file_based_mobility","group_mobility");
x.t("file_based_mobility","mobilitydata-");
x.t("important","fields");
x.t("important","organize");
x.t("added","qualnet");
x.t("calling","mobility");
x.t("code","files");
x.t("code","components");
x.t("code","snippets");
x.t("code","random");
x.t("[num_past_mobility_events]","int");
x.t("reference","guide");
x.t("steps","developing");
x.t("steps","described");
x.t("4.10","instructions");
x.t("organize","code");
x.t("end","lists");
x.t("identifier","parameter-name");
x.t("identifier","address");
x.t("identifier","index");
x.t("identifier","node");
x.t("identifier","subnet");
x.t("parameter-value","identifier");
x.t("parameter-value","value");
x.t("follow","instructions");
x.t("groups","nodes");
x.t("folder","qualnet_home");
x.t("bool","mobilitystats");
x.t("bool","indoors");
x.t("bool","wasfound");
x.t("mobilitystats","flag");
x.t("mobilitystats","randomseed");
x.t("adds","new");
x.t("return","figure");
x.t("wireless_srcs","(wireless_dir)");
x.t("throughout","section");
x.t("throughout","simulation");
x.t("square","brackets");
x.t("square","integer");
x.t("square","cells");
x.t("header","files");
x.t("header","source");
x.t("header","file");
x.t("given","name");
x.t("given","section");
x.t("[max_string_length]","mobilitytype");
x.t("[max_string_length]","sprintf");
x.t("[max_string_length]","bool");
x.t("strcmp","buf");
x.t("qualnet","illustrate");
x.t("qualnet","hints");
x.t("qualnet","2008");
x.t("qualnet","needs");
x.t("qualnet","tree");
x.t("qualnet","source");
x.t("qualnet","mobility");
x.t("qualnet","determines");
x.t("qualnet","file");
x.t("qualnet","add");
x.t("qualnet","component");
x.t("qualnet","provides");
x.t("qualnet","node");
x.t("qualnet","steps");
x.t("qualnet","qualnet");
x.t("qualnet","configuration");
x.t("qualnet","making");
x.t("qualnet","4.8");
x.t("qualnet","two");
x.t("qualnet","call");
x.t("qualnet","4.8.1");
x.t("qualnet","corresponding");
x.t("qualnet","following");
x.t("qualnet","modify");
x.t("together","entire");
x.t("together","node");
x.t("randomly","selected");
x.t("randomly","developer");
x.t("e.g","folder");
x.t("e.g","implementation");
x.t("variable","determines");
x.t("variable","indicates");
x.t("variable","stores");
x.t("variable","4.8.4");
x.t("4.10.5","integrate");
x.t("rules","mobility");
x.t("elevation","node");
x.t("numdests","else");
x.t("numdests","variable");
x.t("numdests","mobilityelement");
x.t("numdests","mobilitydata-");
x.t("made","part");
x.t("/libraries/wireless/src/mobility_waypoint.cpp","mobility_waypointinit");
x.t("existing","library");
x.t("/mobility_waypoint.cpp","(wireless_dir)");
x.t("orientation","dest1");
x.t("orientation","double");
x.t("orientation","clocktype");
x.t("orientation","horizontal");
x.t("orientation","nextorientation");
x.t("orientation","orientation");
x.t("orientation","model");
x.t("orientation","simclock");
x.t("layers","protocol");
x.t("include","statement");
x.t("include","mobility");
x.t("include","stdlib.h");
x.t("include","api.h");
x.t("include","partition.h");
x.t("include","standard");
x.t("include","math.h");
x.t("include","model\u2019s");
x.t("include","string.h");
x.t("include","mobility_mymobility.h");
x.t("include","stdio.h");
x.t("configuration","file");
x.t("configuration","parameters");
x.t("configuration","format");
x.t("instances","parameter");
x.t("instances","parameter-value");
x.t("mobility-wp-max","calculates");
x.t("coord_calcdistance","terraindata-");
x.t("sources","wireless_srcs");
x.t("terrain","mobility");
x.t("terrain","divided");
x.t("terrain","curvature");
x.t("terrain","randomly");
x.t("terrain","models");
x.t("terrain","data");
x.t("main","data");
x.t("distancegranularity","d_bool");
x.t("distancegranularity","variable");
x.t("mobility_preinitialize","shown");
x.t("mobility_preinitialize","implemented");
x.t("mobility_preinitialize","nodeaddress");
x.t("mobility_preinitialize","setrandommobility");
x.t("mobility_preinitialize","reads");
x.t("mobility_preinitialize","read");
x.t("similar","manner");
x.t("value","used");
x.t("gives","detailed");
x.t("several","api");
x.t("several","models");
x.t("constant","speed");
x.t("constant","definitions");
x.t("developer","uniform");
x.t("developer","group");
x.t("developer","grid");
x.t("developer","qualnet");
x.t("implementation","files");
x.t("implementation","4.8.5.2");
x.t("implementation","generic");
x.t("implementation","random");
x.t("implementation","functions");
x.t("implementation","code");
x.t("randomseed","seed");
x.t("activating","library");
x.t("already","exist");
x.t("specific","mobility");
x.t("figure","4-197");
x.t("figure","4-198");
x.t("figure","4-199");
x.t("figure","4-200");
x.t("figure","4-201");
x.t("figure","4-202");
x.t("declaration","applies");
x.t("declaration","applicable");
x.t("dimensions.common.c1","random_erand");
x.t("process","indicate");
x.t("process","throughout");
x.t("process","adding");
x.t("mobilitydata","mobilitytype");
x.t("mobilitydata","terraindata");
x.t("mobilitydata","main");
x.t("mobilitydata","mobilitydata");
x.t("mobilitydata","data");
x.t("mobilitydata","two");
x.t("mobilitydata","simclock");
x.t("mobilitydata","nodeinput");
x.t("destarray","node\u2019s");
x.t("destarray","array");
x.t("destarray","mobilityremainder");
x.t("lastexternaltruemobilitytime","clocktype");
x.t("lastexternaltruemobilitytime","variable");
x.t("compilation","process");
x.t("valuen","param1");
x.t("valuen","values");
x.t("group-mobility","mobilitydata-");
x.t("errormessage","unknown");
x.t("errormessage","[max_string_length]");
x.t("mobilitypause","double");
x.t("mobilitypause","mobilitypause");
x.t("mobilitypause","mobility_addanewdestination");
x.t("mobilitypause","time_converttoclock");
x.t("dimensions.common.c2","random_erand");
x.t("making","changes");
x.t("models","determined");
x.t("models","files");
x.t("models","always");
x.t("models","cartesian");
x.t("models","implemented");
x.t("models","mobility");
x.t("models","organization");
x.t("models","add");
x.t("models","perform");
x.t("models","prototypes");
x.t("models","functions");
x.t("models","typedef");
x.t("models","section");
x.t("models","node");
x.t("models","qualnet_home");
x.t("models","qualnet");
x.t("models","made");
x.t("models","terrain");
x.t("models","work");
x.t("models","contained");
x.t("models","simulate");
x.t("models","comprise");
x.t("read","parameter");
x.t("read","user");
x.t("read","mobility");
x.t("read","speed");
x.t("read","file");
x.t("read","input");
x.t("read","store");
x.t("read","pause");
x.t("read","using");
x.t("node-placement","models");
x.t("moveinterval","coordinates");
x.t("although","working");
x.t("/libraries/user_models/src","name");
x.t("current-","position");
x.t("makefile-common","library");
x.t("makefile-common","created");
x.t("nodes","placed");
x.t("nodes","table");
x.t("nodes","parameter-name");
x.t("nodes","move");
x.t("nodes","scenario");
x.t("nodes","section");
x.t("nodes","simulation");
x.t("larger","areas");
x.t("arrival","times");
x.t("arrival","array");
x.t("arrival","point");
x.t("arrival","intermediate");
x.t("arrival","node");
x.t("along","straight");
x.t("along","current");
x.t("output","files");
x.t("sequence","number");
x.t("separate","header");
x.t("string.h","include");
x.t("specifying","mobility");
x.t("specifying","new");
x.t("applicable","enclosed");
x.t("show","implementation");
x.t("4.8","node");
x.t("data","available");
x.t("data","structures");
x.t("data","structure");
x.t("/include/api.h","file");
x.t("information","needed");
x.t("information","determine");
x.t("information","node");
x.t("indoors","pedestriandata");
x.t("typical","mobility");
x.t("optional","included");
x.t("value1","paramn");
x.t("value1","valuen");
x.t("defined","mobility.h");
x.t("defined","qualnet_home");
x.t("defined","following");
x.t("appropriate","recommend");
x.t("examples","mobility_waypoint.h");
x.t("wasfound","true");
x.t("wasfound","char");
x.t("wasfound","orientation");
x.t("error_reporterror","(errormessage)");
x.t("future","positions");
x.t("&minspeed","assert");
x.t("policy","initial");
x.t("policy","node");
x.t("policy","terrain");
x.t("policy","nodes");
x.t("/include/fileio.h","void");
x.t("/include/fileio.h","file");
x.t("/libraries/developer/src","folders");
x.t("values","mobility");
x.t("values","input");
x.t("seedval","int");
x.t("4-22","lists");
x.t("4-22","mobility");
x.t("destinations","stored");
x.t("destinations","node");
x.t("destinations","destarray");
x.t("destinations","arrival");
x.t("mobility_waypoint.h","mobility_waypoint.cpp");
x.t("mobility_waypoint.h","folder");
x.t("no_mobility","else");
x.t("no_mobility","random_waypoint_mobility");
x.t("no_mobility","figure");
x.t("no_mobility","mobilitydata-");
x.t("structure","mobility");
x.t("structure","pedestrian");
x.t("structure","explained");
x.t("structure","function");
x.t("structure","stores");
x.t("structure","mobilitydata");
x.t("structure","associated");
x.t("described","above");
x.t("described","detail");
x.t("called","mymobility");
x.t("called","src");
x.t("called","mobility_mymobility.cpp");
x.t("called","user_models");
x.t("called","node");
x.t("called","mobility_mymobility.h");
x.t("specification","optional");
x.t("above","mobility");
x.t("protocol","resides");
x.t("protocol","stack");
x.t("protocol","models");
x.t("protocol","model");
x.t("4-23","describes");
x.t("4-23","node");
x.t("note","partial");
x.t("note","model");
x.t("integer","developer");
x.t("mobilityvar","mobilitytype");
x.t("mobilityvar","pointer");
x.t("mobility_addanewdestination","function");
x.t("mobility_addanewdestination","mobilitydata");
x.t("two","files");
x.t("two","generic");
x.t("two","consecutive");
x.t("work","together");
x.t("based","name");
x.t("mobilityelement","current");
x.t("mobilityelement","int");
x.t("mobilityelement","next");
x.t("mobilityelement","destarray");
x.t("mobilityelement","data");
x.t("mobilityelement","past");
x.t("algorithm","configurable");
x.t("algorithm","include");
x.t("mobility_group.h","mobility_group.cpp");
x.t("file-based","mobility");
x.t("file-based","node");
x.t("call","specific");
x.t("call","mymobility\u2019s");
x.t("mobilitydata-","groundnode");
x.t("mobilitydata-","mobilitytype");
x.t("mobilitydata-","seed");
x.t("mobilitydata-","numdests");
x.t("mobilitydata-","current-");
x.t("orientation.azimuth","orientation.elevation");
x.t("created","files");
x.t("created","new");
x.t("created","model");
x.t("recompile","qualnet");
x.t("model","library");
x.t("model","just");
x.t("model","right");
x.t("model","implement");
x.t("model","files");
x.t("model","description");
x.t("model","layer");
x.t("model","source");
x.t("model","mymobility");
x.t("model","implemented");
x.t("model","look");
x.t("model","mobility");
x.t("model","assumes");
x.t("model","determines");
x.t("model","list");
x.t("model","4.8.5.5");
x.t("model","add");
x.t("model","specified");
x.t("model","creating");
x.t("model","wireless");
x.t("model","parameters");
x.t("model","programmer");
x.t("model","place");
x.t("model","understand");
x.t("model","functions");
x.t("model","calculate");
x.t("model","simulates");
x.t("model","keeping");
x.t("model","sequencenum");
x.t("model","function");
x.t("model","specifies");
x.t("model","different");
x.t("model","may");
x.t("model","reads");
x.t("model","section");
x.t("model","node");
x.t("model","added");
x.t("model","groups");
x.t("model","header");
x.t("model","qualnet");
x.t("model","existing");
x.t("model","configuration");
x.t("model","similar");
x.t("model","implementation");
x.t("model","although");
x.t("model","makefile-common");
x.t("model","called");
x.t("model","mobilityvar");
x.t("model","mobility_group.h");
x.t("model","model");
x.t("model","used");
x.t("model","except");
x.t("model","using");
x.t("model","understanding");
x.t("model","remainder");
x.t("model","position");
x.t("model","specify");
x.t("4.8.1","mobility");
x.t("corresponding","model");
x.t("simulation","table");
x.t("simulation","times");
x.t("simulation","wireless");
x.t("simulation","calculate");
x.t("simulation","mobility_preinitialize");
x.t("following","statements");
x.t("following","statement");
x.t("following","list");
x.t("following","tasks");
x.t("following","parameters");
x.t("following","prototypes");
x.t("following","random");
x.t("following","format");
x.t("following","header");
x.t("following","rules");
x.t("following","include");
x.t("following","folders");
x.t("used","parameter");
x.t("used","multiple");
x.t("used","mobility");
x.t("used","group");
x.t("used","qualify");
x.t("used","small");
x.t("used","number");
x.t("used","node");
x.t("used","larger");
x.t("system","(latitude-longitude-altitude)");
x.t("system","used");
x.t("except","pedestrian");
x.t("relevant","mobility");
x.t("contained","file");
x.t("contained","following");
x.t("/main/mobility.cpp","file");
x.t("/main/mobility.cpp","qualnet_home");
x.t("/main/mobility.cpp","additionally");
x.t("/main/mobility.cpp","contains");
x.t("compute","coordinates");
x.t("pointer","data");
x.t("turn","calls");
x.t("turn","call");
x.t("subnet","identifier");
x.t("simclock","(clocktype)");
x.t("simclock","dest1");
x.t("simclock","dest2");
x.t("simclock","coordinates");
x.t("simclock","maxsimclock");
x.t("simclock","mobilitypause");
x.t("4.8.2","mobility");
x.t("additionally","following");
x.t("calculated","mobility");
x.t("using","example");
x.t("using","mobility");
x.t("using","functions");
x.t("using","following");
x.t("understanding","discussed");
x.t("general","mobility");
x.t("nodeinput","clocktype");
x.t("nodeinput","maxsimtime");
x.t("nodeinput","mobility-wp-max-speed");
x.t("nodeinput","mobility");
x.t("nodeinput","mobility-wp-pause");
x.t("nodeinput","mobility-wp-min-speed");
x.t("nodeinput","int");
x.t("nodeinput","nodeinput");
x.t("folders","source");
x.t("folders","contain");
x.t("folders","section");
x.t("folders","relevant");
x.t("4.8.3","example");
x.t("4.8.3","add");
x.t("4.8.3","mobility-related");
x.t("mobility-related","apis");
x.t("mobility-related","tasks");
x.t("mobility-related","configuration");
x.t("mobility-related","data");
x.t("remainder","clocktype");
x.t("remainder","structure");
x.t("statistics","collection");
x.t("returns","time");
x.t("returns","coordinates");
x.t("adding","mymobility");
x.t("adding","mobility");
x.t("adding","code");
x.t("adding","model");
x.t("subsequent","sections");
x.t("coordinatesystemtype","&dest1");
x.t("/mobility_mymobility.cpp","(wireless_dir)");
x.t("simulate","mobility");
x.t("behavior","nodes");
x.t("behavior","defined");
x.t("towards","straight");
x.t("towards","next");
x.t("towards","adding");
x.t("definitions","source");
x.t("definitions","common");
x.t("definitions","macros");
x.t("associated","times");
x.t("associated","mobility");
x.t("associated","node");
x.t("names","mobility_");
x.t("names","components");
x.t("names","parameters");
x.t("names","different");
x.t("names","based");
x.t("mobilityremainder","clocktype");
x.t("mobilityremainder","data");
x.t("mobilityremainder","remainder");
x.t("nextposition","orientation");
x.t("nummovestonextdest","int");
x.t("past","array");
x.t("past","[num_past_mobility_events]");
x.t("4.8.4","mobility");
x.t("performed","mobility");
x.t("performed","adding");
x.t("outline","developing");
x.t("modify","files");
x.t("modify","mobility");
x.t("modify","generic");
x.t("modify","qualnet_home");
x.t("modify","mobility_preinitialize");
x.t("designate","files");
x.t("therefore","mobility");
x.t("(errormessage)","else");
x.t("position","moves");
x.t("position","calculation");
x.t("position","next");
x.t("position","node");
x.t("position","orientation");
x.t("position","simclock");
x.t("position","towards");
x.t("position","updated");
x.t("struct","mobilitydata");
x.t("struct","mobilityelement");
x.t("struct","mobilityremainder");
x.t("nextmovetime","coordinates");
x.t("mobility_nextmovetime","function");
x.t("4.8.5","adding");
x.t("describe","steps");
x.t("mobility_mymobility.h","statements");
x.t("mobility_mymobility.h","source");
x.t("mobility_mymobility.h","4.8.5.3");
x.t("mobility_mymobility.h","contain");
x.t("stdio.h","include");
x.t("insert","following");
x.t("including","mymobility");
x.t("including","compiling");
x.t("&maxspeed","assert");
x.t("&distance","speed");
x.t("(wireless_dir)","/mac_maca.cpp");
x.t("(wireless_dir)","/mac_tdma.cpp");
x.t("(wireless_dir)","/mobility_pedestrian.cpp");
x.t("(wireless_dir)","/multicast_odmrp.cpp");
x.t("(wireless_dir)","/antenna_global.cpp");
x.t("(wireless_dir)","/mobility_group.cpp");
x.t("(wireless_dir)","/mobility_waypoint.cpp");
x.t("(wireless_dir)","/antenna.cpp");
x.t("/antenna.cpp","(wireless_dir)");
x.t("mobility.cpp","mobility_placement.cpp");
x.t("mobility.cpp","called");
x.t("naming","coding");
x.t("naming","guidelines");
x.t("comprise","two");
x.t("even","compilation");
x.t("reading","mobility");
x.t("time_converttoclock","(buf)");
x.t("waypoint","mobility");
x.t("waypoint","appears");
x.t("waypoint","implementation");
x.t("waypoint","mobility_waypoint.h");
x.t("waypoint","model");
x.t("cells","node");
x.t("contains","prototypes");
x.t("contains","implementation");
x.t("contains","definitions");
x.t("pedestrian_mobility","mobilitytype");
x.t("pedestrian_mobility","mymobility");
x.t("updated","simulator");
x.t("detail","subsequent");
x.t("mymobility\u2019s","node");
x.t("mymobility\u2019s","position");
x.t("generally","header");
x.t("specify","pause");
x.t("specify","configuration");
x.t("s.\\n","buf");
x.t("integrate","user_models");
}
