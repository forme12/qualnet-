function FileData_Pairs(x)
{
x.t("interfaces","mac");
x.t("interfaces","may");
x.t("interfaces","section");
x.t("interfaces","node");
x.t("ieee","802.15.4");
x.t("ieee","802.3");
x.t("ieee","802.11e");
x.t("ieee","802.11");
x.t("ieee","802.16");
x.t("ieee","802.11n");
x.t("fault","machwaddress");
x.t("fault","data");
x.t("example","ieee");
x.t("example","maccsmainit");
x.t("example","ethernet");
x.t("example","timer");
x.t("example","mac_receivepacketfromphy");
x.t("example","csma");
x.t("example","place");
x.t("example","modification");
x.t("example","function");
x.t("example","implementation");
x.t("example","figure");
x.t("example","declaration");
x.t("example","send");
x.t("example","data");
x.t("example","protocol");
x.t("example","created");
x.t("example","following");
x.t("example","mac802_3init");
x.t("4.5.5.8","ieee");
x.t("4.5.5.8","add");
x.t("4.5.5.8","modifying");
x.t("4.5.5.8","modify");
x.t("4.5.5.10.5","4.5.6.9");
x.t("4.5.5.10.5","call");
x.t("4.5.5.10.5","adding");
x.t("coding","different");
x.t("/libraries","called");
x.t("mac_","designate");
x.t("/libraries/wireless/src","implement");
x.t("/libraries/wireless/src","code");
x.t("statements","mac_initialize");
x.t("statements","include");
x.t("included","parameter");
x.t("included","state");
x.t("included","list");
x.t("included","enumeration");
x.t("included","protocol's");
x.t("4-120","typedef");
x.t("4-120","adding");
x.t("states","ieee");
x.t("network_ipv4","return");
x.t("supports","different");
x.t("timers","required");
x.t("timers","mac");
x.t("timers","initialization");
x.t("timers","4.5.6.3");
x.t("timers","4.5.5.6");
x.t("&mac802addr","return");
x.t("&mac802addr","break");
x.t("myprotocol\u2019s","event");
x.t("myprotocol\u2019s","send");
x.t("equal","propagation");
x.t("(timertype)","case");
x.t("ignore","message_free");
x.t("maccsmapassive","maccsmapassive");
x.t("maccsmapassive","void");
x.t("maccsmapassive","calls");
x.t("maccsmapassive","node");
x.t("error-free","transfer");
x.t("protocols","switches");
x.t("protocols","files");
x.t("protocols","always");
x.t("protocols","instance");
x.t("protocols","implemented");
x.t("protocols","physical");
x.t("protocols","wired");
x.t("protocols","trace");
x.t("protocols","mac");
x.t("protocols","add");
x.t("protocols","enumerated");
x.t("protocols","wireless");
x.t("protocols","initializing");
x.t("protocols","enumeration");
x.t("protocols","determine");
x.t("protocols","communicate");
x.t("protocols","function");
x.t("protocols","different");
x.t("protocols","may");
x.t("protocols","typedef");
x.t("protocols","section");
x.t("protocols","qualnet_home");
x.t("protocols","node");
x.t("protocols","qualnet");
x.t("protocols","running");
x.t("protocols","several");
x.t("protocols","besides");
x.t("protocols","described");
x.t("protocols","packet");
x.t("protocols","pass");
x.t("library","example");
x.t("library","doesn\u2019t");
x.t("library","functions");
x.t("library","addon");
x.t("library","detailed");
x.t("library","abstract");
x.t("library","e.g");
x.t("library","qualnet");
x.t("library","called");
x.t("library","folders");
x.t("library","modify");
x.t("parameter","mac-protocol");
x.t("parameter","mac-dot11s-mesh-point");
x.t("parameter","declarations");
x.t("parameter","cellular-mac-protocol");
x.t("parameter","index");
x.t("parameter","declaration");
x.t("parameter","specification");
x.t("parameter","generally");
x.t("below","mac_ismyhwaddress");
x.t("below","mac_receivepacketfromphy");
x.t("below","mac_outputqueueisempty");
x.t("below","typedef");
x.t("below","phy_starttransmittingsignal");
x.t("below","struct");
x.t("available","layer");
x.t("available","mac");
x.t("available","transmission");
x.t("available","qualnet");
x.t("available","mac802_3-");
x.t("mac_iswirednetwork","shown");
x.t("mac_iswirednetwork","function");
x.t("mac_iswirednetwork","node");
x.t("mac_iswirednetwork","mac_ispointtopointnetwork");
x.t("illustrate","different");
x.t("illustrate","process");
x.t("manner","wired");
x.t("manner","wireless");
x.t("manner","helpful");
x.t("placed","library");
x.t("exist","create");
x.t("myprotcol","function");
x.t("myprotcol","runs");
x.t("myprotcol","called");
x.t("myprotcol","protocol");
x.t("msgbuffer","mac802_3");
x.t("msgbuffer","null");
x.t("msgbuffer","mac802_3stationstate");
x.t("provide","translate");
x.t("provide","indication");
x.t("provide","protocol's");
x.t("4-121","input");
x.t("4-121","processing");
x.t("else","processlinkline");
x.t("else","arpisenable");
x.t("else","csma-");
x.t("else","continue");
x.t("else","ismyaddr");
x.t("else","mac_outputqueueisempty");
x.t("else","switch");
x.t("else","error_assert");
x.t("else","strcmp");
x.t("else","message");
x.t("else","node-");
x.t("else","mac_isbroadcastmac802address");
x.t("else","mac802_3printstats");
x.t("else","received");
x.t("else","message_free");
x.t("else","station");
x.t("convertnumhostbitstosubnetmask","(numhostbits)");
x.t("mac802_3networklayerhaspackettosend","mac802_3networklayerhaspackettosend");
x.t("mac802_3networklayerhaspackettosend","shown");
x.t("mac802_3networklayerhaspackettosend","calls");
x.t("mac802_3networklayerhaspackettosend","section");
x.t("mac802_3networklayerhaspackettosend","node");
x.t("mac802_3networklayerhaspackettosend","mac802_3handlereceivedframe");
x.t("mac802_3networklayerhaspackettosend","following");
x.t("4.5.5.9","interfacing");
x.t("4.5.5.9","send");
x.t("4.5.5.9","pointer");
x.t("transmits","packet");
x.t("indicated","event");
x.t("csma_timer_undefined","csma-");
x.t("csma_timer_undefined","assign");
x.t("csma_timer_undefined","checkphystatusandsendorbackoff");
x.t("csma_status_passive","maccsmapassive");
x.t("csma_status_passive","state");
x.t("csma_status_passive","csma-");
x.t("csma_status_passive","return");
x.t("csma_status_passive","maccsmanetworklayerhaspackettosend");
x.t("csma_status_passive","case");
x.t("csma_status_passive","checkphystatusandsendorbackoff");
x.t("latest","timer");
x.t("switches","mac");
x.t("switches","qualnet");
x.t("maca","models");
x.t("defines","events");
x.t("promiscuousmode","frame");
x.t("promiscuousmode","boolean");
x.t("promiscuousmode","int64");
x.t("promiscuousmode","maccsmahandlepromiscuousmode");
x.t("version","checks");
x.t("version","function");
x.t("hints","naming");
x.t("just","entry");
x.t("just","string");
x.t("lead","unexpected");
x.t("/main/partition.cpp","calls");
x.t("/main/partition.cpp","section");
x.t("ipv4subnetaddress","numhostbits");
x.t("4-122","wired");
x.t("4-122","addnodetoipv6network");
x.t("network_ipv6","return");
x.t("hardware","type");
x.t("hardware","address");
x.t("mac-srw","mac_setfourbytemacaddress");
x.t("mac802_3getjamtrdelay","respectively");
x.t("mac802_3getjamtrdelay","node");
x.t("mac_protocol_dot11","macdot11layer");
x.t("mac_protocol_dot11","macdot11receivepacketfromphy");
x.t("mac_protocol_dot11","macdot11receivephystatuschangenotification");
x.t("mac_protocol_dot11","case");
x.t("mac_protocol_dot11","macdot11networklayerhaspackettosend");
x.t("mac802_3layer","calls");
x.t("mac802_3layer","handles");
x.t("mac802_3layer","node");
x.t("mac802_3layer","note");
x.t("mac_802_3_timersendpacket","case");
x.t("mac_802_3_channelidle","default");
x.t("receives","acknowledgement");
x.t("receives","processes");
x.t("receives","packet");
x.t("/mac_background_traffic.cpp","(developer_srcdir)");
x.t("mac_csma.h","create");
x.t("mac_csma.h","source");
x.t("mac_csma.h","maccsmainit");
x.t("mac_csma.h","mac_csma.cpp");
x.t("mac_csma.h","used");
x.t("2008","2012");
x.t("resides","network");
x.t("resides","functionality");
x.t("shown","below");
x.t("shown","figure");
x.t("lists","protocols");
x.t("lists","mac");
x.t("lists","among");
x.t("lists","different");
x.t("lists","header");
x.t("multimedia","enterprise");
x.t("files","placed");
x.t("files","just");
x.t("files","mac_csma.h");
x.t("files","create");
x.t("files","having");
x.t("files","mac_802_3.h");
x.t("files","mac");
x.t("files","needed");
x.t("files","final");
x.t("files","contain");
x.t("files","first");
x.t("files","clearly");
x.t("files","step");
x.t("files","section");
x.t("files","qualnet_home");
x.t("files","important");
x.t("files","folder");
x.t("files","throughout");
x.t("files","header");
x.t("files","qualnet");
x.t("files","developer");
x.t("files","models");
x.t("files","examples");
x.t("files","described");
x.t("files","relevant");
x.t("files","mac_802_3.cpp");
x.t("files","folders");
x.t("files","associated");
x.t("files","generally");
x.t("implement","ieee");
x.t("implement","tdma");
x.t("implement","mac");
x.t("implement","prefix");
x.t("implement","new");
x.t("implement","functions");
x.t("implement","function");
x.t("implement","e.g");
x.t("subdirectory","qualnet_home");
x.t("needs","included");
x.t("needs","added");
x.t("needs","additional");
x.t("trace_any_protocol","traceprotocoltype");
x.t("trace_any_protocol","4.5.5.4");
x.t("4-123","wired");
x.t("4-123","call");
x.t("link=","linkdata");
x.t("macmyprotocolhandlereceivedframe","performs");
x.t("macmyprotocolhandlereceivedframe","section");
x.t("timertype","mac802_3selftimer");
x.t("timertype","switch");
x.t("timertype","info-");
x.t("intended","increase");
x.t("intended","station");
x.t("numbackofffaced","times");
x.t("every","time");
x.t("full","half");
x.t("full","duplex");
x.t("half","duplex");
x.t("phystatustype","newphystatus");
x.t("phystatustype","oldphystatus");
x.t("(clocktype)","csma_tx_data_yield_time");
x.t("scalable","network");
x.t("description","found");
x.t("description","add");
x.t("description","network");
x.t("description","fields");
x.t("description","data");
x.t("description","protocol");
x.t("description","mac_protocol");
x.t("description","event/message");
x.t("description","model");
x.t("table","4-14");
x.t("table","4-15");
x.t("table","include");
x.t("table","networkupdateforwardingtable");
x.t("mac-protocol","cellular-mac");
x.t("mac-protocol","myprotocol");
x.t("802.15.4","mac");
x.t("tree","compile");
x.t("tree","protocol");
x.t("create","files");
x.t("create","instance");
x.t("create","neighbor");
x.t("create","single");
x.t("create","function");
x.t("create","directory");
x.t("create","header");
x.t("create","output");
x.t("describes","implement");
x.t("describes","apis");
x.t("describes","develop");
x.t("describes","function");
x.t("describes","main");
x.t("describes","done");
x.t("describes","translation");
x.t("describes","modify");
x.t("refer","ieee");
x.t("refer","file");
x.t("refer","qualnet");
x.t("refer","reader");
x.t("background","traffic");
x.t("sending","receiving");
x.t("sending","outgoing");
x.t("sending","node");
x.t("sending","indications");
x.t("tracing","qualnet");
x.t("user-specified","configuration");
x.t("static","void");
x.t("static","//inline//");
x.t("(errorstr)","createmac802_3");
x.t("nla=","sla=");
x.t("4-124","mac");
x.t("4-124","reads");
x.t("gap","jam");
x.t("3.3.2.2","details");
x.t("4.5.6.2.4.1","creating");
x.t("4.5.6.2.4.1","initialize");
x.t("4.5.6.2.4.1","read");
x.t("/libraries/wireless/src//mac_dot11.cpp","void");
x.t("layer","example");
x.t("layer","protocols");
x.t("layer","mac802_3networklayerhaspackettosend");
x.t("layer","receives");
x.t("layer","resides");
x.t("layer","table");
x.t("layer","sending");
x.t("layer","events");
x.t("layer","sneak");
x.t("layer","void");
x.t("layer","addressed");
x.t("layer","physical");
x.t("layer","mac_receivephystatuschangenotification");
x.t("layer","interface");
x.t("layer","maintained");
x.t("layer","calls");
x.t("layer","wired");
x.t("layer","packets");
x.t("layer","acknowledgement");
x.t("layer","mac");
x.t("layer","apis");
x.t("layer","listed");
x.t("layer","channel");
x.t("layer","bottom-most");
x.t("layer","removes");
x.t("layer","start");
x.t("layer","certain");
x.t("layer","passes");
x.t("layer","status");
x.t("layer","initialization");
x.t("layer","mac_receivepacketfromphy");
x.t("layer","organization");
x.t("layer","msg_prop_signalarrival");
x.t("layer","add");
x.t("layer","api");
x.t("layer","network");
x.t("layer","initialized");
x.t("layer","queues");
x.t("layer","delivered");
x.t("layer","functionality");
x.t("layer","communication");
x.t("layer","stop");
x.t("layer","csma_status_");
x.t("layer","wireless");
x.t("layer","direct");
x.t("layer","perform");
x.t("layer","4.5.6.6.2");
x.t("layer","provides");
x.t("layer","4.5.6.6.3");
x.t("layer","prototypes");
x.t("layer","sends");
x.t("layer","determine");
x.t("layer","address");
x.t("layer","stack");
x.t("layer","examine");
x.t("layer","string");
x.t("layer","receiving");
x.t("layer","mac_outputqueuedequeuepacket");
x.t("layer","developing");
x.t("layer","functions");
x.t("layer","cellular");
x.t("layer","communicate");
x.t("layer","meant");
x.t("layer","4.5.4.3");
x.t("layer","function");
x.t("layer","implements");
x.t("layer","different");
x.t("layer","instead");
x.t("layer","stores");
x.t("layer","4.5.4.5");
x.t("layer","section");
x.t("layer","changes");
x.t("layer","qualnet_home");
x.t("layer","transmission");
x.t("layer","calling");
x.t("layer","macdatamyprotocol");
x.t("layer","level");
x.t("layer","qualnet");
x.t("layer","event");
x.t("layer","send");
x.t("layer","4.5");
x.t("layer","forwarding");
x.t("layer","myprotocol");
x.t("layer","models");
x.t("layer","output");
x.t("layer","data");
x.t("layer","information");
x.t("layer","node_processevent");
x.t("layer","phy_startlisteningtochannel");
x.t("layer","received");
x.t("layer","utility");
x.t("layer","finalization");
x.t("layer","lte");
x.t("layer","notifies");
x.t("layer","protocol");
x.t("layer","inform");
x.t("layer","packet");
x.t("layer","call");
x.t("layer","following");
x.t("layer","model");
x.t("layer","additionally");
x.t("layer","mac802_3-");
x.t("layer","dropped");
x.t("layer","mac_finalize");
x.t("layer","using");
x.t("layer","pass");
x.t("layer","message_addheader");
x.t("events","example");
x.t("events","unknown");
x.t("events","add");
x.t("events","messages");
x.t("events","include");
x.t("events","data");
x.t("events","used");
x.t("events","occur");
x.t("source","files");
x.t("source","tree");
x.t("source","file");
x.t("source","address");
x.t("source","header");
x.t("enum","declarations");
x.t("enum","trace_undefined");
x.t("enum","mac_protocol_mpls");
x.t("enum","message/event");
x.t("enum","special");
x.t("variables","ieee");
x.t("variables","instance");
x.t("variables","mac");
x.t("variables","protocol\u2019s");
x.t("variables","initialize");
x.t("variables","section");
x.t("variables","whose");
x.t("variables","schedule");
x.t("variables","defined");
x.t("variables","structure");
x.t("variables","protocol");
x.t("variables","mac802_3-");
x.t("variables","update");
x.t("mac_processevent","sample");
x.t("mac_processevent","implements");
x.t("mac_processevent","section");
x.t("mac_processevent","node");
x.t("mac_processevent","defined");
x.t("mac_processevent","call");
x.t("various","functions");
x.t("instructions","creating");
x.t("instructions","given");
x.t("having","header");
x.t("always","add");
x.t("instance","ieee");
x.t("instance","parameter");
x.t("instance","csma");
x.t("instance","initializing");
x.t("instance","identifier");
x.t("instance","protocol");
x.t("instance","reading");
x.t("processlinkline","void");
x.t("processlinkline","firstnode");
x.t("processlinkline","addnodetosubnet");
x.t("processlinkline","function");
x.t("mac_settwobytemacaddress","assign");
x.t("mac_settwobytemacaddress","node");
x.t("4-125","example");
x.t("4-125","assumes");
x.t("4-125","mac");
x.t("required","example");
x.t("required","functions");
x.t("ipv4address","machwaddress");
x.t("ipv4address","macaddr");
x.t("ipv4address","isresolved");
x.t("(macaddr)","return");
x.t("once","message");
x.t("related","variables");
x.t("4.5.6.2.4.2","implement");
x.t("4.5.6.2.4.2","initializing");
x.t("maccsmainit","csma");
x.t("maccsmainit","sets");
x.t("maccsmainit","initializes");
x.t("maccsmainit","node");
x.t("maccsmainit","calling");
x.t("maccsmainit","figure");
x.t("/libraries/wireless/src/phy.cpp","networkipcreatequeues");
x.t("enters","csma_status_passive");
x.t("srchwaddress","convert802addresstovariablehwaddress");
x.t("4-1","mac");
x.t("cellular-mac","parameter");
x.t("components","ieee");
x.t("components","mac");
x.t("components","new");
x.t("components","common");
x.t("components","protocol");
x.t("mac_802_3.h","description");
x.t("mac_802_3.h","create");
x.t("mac_802_3.h","source");
x.t("mac_802_3.h","folder");
x.t("mac_802_3.h","mac_802_3.cpp");
x.t("mac_802_3.h","used");
x.t("mac_802_3.h","mac802_3init");
x.t("mac_802_3.h","4.5.5.10.2");
x.t("mac_protocol_fama","mac_protocol_wormhole");
x.t("mac_protocol_fama","mac_protocol_abstract");
x.t("void","mac802_3networklayerhaspackettosend");
x.t("void","mac802_3layer");
x.t("void","mac_processevent");
x.t("void","maccsmainit");
x.t("void","mac802_3completeframetransmission");
x.t("void","mac802_3");
x.t("void","mac_receivephystatuschangenotification");
x.t("void","macconfigurehwaddress");
x.t("void","createmac802_3");
x.t("void","mac_receivepacketfromphy");
x.t("void","maccsmareceivepacketfromphy");
x.t("void","csma");
x.t("void","mac_initialize");
x.t("void","bgmainstruct");
x.t("void","mac_networklayerhaspackettosend");
x.t("void","maccsmaxmit");
x.t("void","mac802_3finalize");
x.t("void","mac802_3handlereceivedframe");
x.t("void","maccsmanetworklayerhaspackettosend");
x.t("void","maccsmalayer");
x.t("void","//inline//");
x.t("void","randfault");
x.t("void","mac802_3printstats");
x.t("void","maccsmareceivephystatuschangenotification");
x.t("void","mplsvar");
x.t("void","checkphystatusandsendorbackoff");
x.t("void","macvar");
x.t("void","mac_finalize");
x.t("void","mac802_3init");
x.t("snippets","look");
x.t("snippets","two");
x.t("recommend","adding");
x.t("wasinbackoff","false");
x.t("wasinbackoff","previously");
x.t("wasinbackoff","int");
x.t("firstnode","const");
x.t("firstnode","nodeinput");
x.t("subnetprefixlen","char");
x.t("subnetprefixlen","&interfaceindex");
x.t("node\u2019s","interface");
x.t("node\u2019s","status");
x.t("performs","task");
x.t("performs","appropriate");
x.t("performs","following");
x.t("4-126","ieee");
x.t("4-126","neighbor");
x.t("4-126","myprotocol");
x.t("4-126","mac802_3init");
x.t("globalseed","node-");
x.t("flag","interface");
x.t("message_getinstanceid","(msg)");
x.t("message_getinstanceid","returns");
x.t("mac_protocol_switched_ethernet","return");
x.t("numframereceived","frame");
x.t("numframereceived","statistic");
x.t("sneak","peak");
x.t("observed","qualnet");
x.t("responsible","printing");
x.t("macdot11init","qualnet_home");
x.t("csma_timer_off","csma_timer_undefined");
x.t("csma_timer_off","return");
x.t("action","depending");
x.t("mac-dot11s-mesh-point","node");
x.t("qos","enhancement");
x.t("satcom","figure");
x.t("satcom","models");
x.t("mac_protocol_802_15_4","mac_protocol_none");
x.t("mac_protocol_802_15_4","mac_protocol_myprotocol");
x.t("enabled","protocols");
x.t("enabled","mac");
x.t("enabled","network");
x.t("discussed","snippets");
x.t("discussed","section");
x.t("parameter-name","name");
x.t("parameter-name","index");
x.t("user","input");
x.t("user","qualnet");
x.t("networkipcreatequeues","implemented");
x.t("networkipcreatequeues","calls");
x.t("networkipcreatequeues","addnodetosubnet");
x.t("networkipcreatequeues","node");
x.t("nodeid","nodeid");
x.t("nodeid","csma-");
x.t("nodeid","int");
x.t("nodeid","interfaceindex");
x.t("nodeid","macaddr");
x.t("nodeid","mac_protocol_802_3");
x.t("nodeid","mac_protocol_csma");
x.t("4-127","assumes");
x.t("4-127","functions");
x.t("4-127","function");
x.t("4-127","modify");
x.t("ethernet","type");
x.t("convertvariablehwaddressto802address","converts");
x.t("convertvariablehwaddressto802address","node");
x.t("msg_prop_signalend","101");
x.t("addressed","node");
x.t("try","send");
x.t("stats.numframereceived","mac802_3trace");
x.t("stats.numframereceived","buf1");
x.t("stats.numframereceived","mac802_3-");
x.t("mac802_3completeframetransmission","implemented");
x.t("mac802_3completeframetransmission","node");
x.t("pktssentbroadcast","else");
x.t("pktssentbroadcast","csma-");
x.t("pktssentbroadcast","int32");
x.t("csma_status_carrier_sense","case");
x.t("/include/mapping.h","file");
x.t("implemented","file");
x.t("implemented","mac_csma.cpp");
x.t("implemented","qualnet_home");
x.t("implemented","qualnet");
x.t("implemented","mac_802_3.cpp");
x.t("implemented","mac.cpp");
x.t("last","trace_any_protocol");
x.t("last","code");
x.t("last","mac_protocol");
x.t("nodeaddress","ipv4address");
x.t("nodeaddress","interfaceaddress");
x.t("nodeaddress","machwaddresstoipv4address");
x.t("nodeaddress","virtualmacaddress");
x.t("nodeaddress","subnetaddress");
x.t("uses","new");
x.t("uses","store");
x.t("uses","control");
x.t("uses","cts");
x.t("uses","4-byte");
x.t("mac_tdma.h","mac_tdma.cpp");
x.t("traverse","protocol");
x.t("line","begins");
x.t("macprotocolname","mac-srw");
x.t("macprotocolname","satcom");
x.t("macprotocolname","short");
x.t("macprotocolname","switched-ethernet");
x.t("macprotocolname","csma");
x.t("macprotocolname","isnewinterface");
x.t("macprotocolname","myprotocol");
x.t("macprotocolname","mac802.15.4");
x.t("macprotocolname","mac802.3");
x.t("macprotocolname","mac-link-11");
x.t("macprotocolname","partitionsubnetmemberdata");
x.t("macprotocolname","networktype");
x.t("&address","globaladdr");
x.t("&address","nodeinput");
x.t("&subnetbandwidth","&subnetpropdelay");
x.t("4-128","function");
x.t("handled","node");
x.t("shows","ieee");
x.t("shows","csma");
x.t("shows","changes");
x.t("shows","code");
x.t("shows","outline");
x.t("(msg)","timertype");
x.t("(msg)","int");
x.t("(msg)","select");
x.t("(msg)","message_free");
x.t("program","work");
x.t("transmitting","state");
x.t("transmitting","frame");
x.t("transmitting","node");
x.t("schedules","timer");
x.t("schedules","event");
x.t("field","mac");
x.t("mac802_3createframe","mac802_3networklayerhaspackettosend");
x.t("later","else");
x.t("mac802_3trace","node");
x.t("drops","packet");
x.t("/mac_myprotocol.cpp","(developer_srcdir)");
x.t("physical","layer");
x.t("physical","status");
x.t("physical","layers");
x.t("mode","parameter");
x.t("mode","full");
x.t("mode","mac");
x.t("mode","maccsmareceivepacketfromphy");
x.t("mode","network");
x.t("mode","mac802_3handlereceivedframe");
x.t("mode","bandwidth");
x.t("interface","example");
x.t("interface","shown");
x.t("interface","interface");
x.t("interface","operates");
x.t("interface","calls");
x.t("interface","wired");
x.t("interface","addnodetosubnet");
x.t("interface","macconfigurehwaddress");
x.t("interface","neighbor");
x.t("interface","macsetdefaulthwaddress");
x.t("interface","initialization");
x.t("interface","mac_receivepacketfromphy");
x.t("interface","during");
x.t("interface","initialized");
x.t("interface","network");
x.t("interface","4.5.5.11.1");
x.t("interface","wireless");
x.t("interface","address");
x.t("interface","empty");
x.t("interface","int");
x.t("interface","mac_networklayerhaspackettosend");
x.t("interface","functions");
x.t("interface","point");
x.t("interface","interfaceindex");
x.t("interface","index");
x.t("interface","mac_receivestatuschangenotification");
x.t("interface","section");
x.t("interface","important");
x.t("interface","node");
x.t("interface","calling");
x.t("interface","assigned");
x.t("interface","macstats");
x.t("interface","event");
x.t("interface","prototype");
x.t("interface","figure");
x.t("interface","macdata");
x.t("interface","process");
x.t("interface","myprotocol");
x.t("interface","read");
x.t("interface","4.5.4");
x.t("interface","information");
x.t("interface","macvar");
x.t("interface","otherwise");
x.t("interface","protocol");
x.t("interface","subnet");
x.t("interface","sendframefn");
x.t("interface","mac802_3-");
x.t("interface","point-to-point");
x.t("interface","one-hop");
x.t("look","files");
x.t("look","complete");
x.t("provided","refer");
x.t("promiscuous","mode");
x.t("mac_receivephystatuschangenotification","implemented");
x.t("mac_receivephystatuschangenotification","mac_receivephystatuschangenotification");
x.t("mac_receivephystatuschangenotification","physical");
x.t("mac_receivephystatuschangenotification","calls");
x.t("mac_receivephystatuschangenotification","function");
x.t("mac_receivephystatuschangenotification","node");
x.t("mac_receivephystatuschangenotification","deliver");
x.t("working","mac");
x.t("protocol-specific","event");
x.t("protocol-specific","configuration");
x.t("state","variables");
x.t("state","physical");
x.t("state","change");
x.t("state","mac");
x.t("state","initialization");
x.t("state","receiving_state");
x.t("state","status");
x.t("state","maccsmareceivepacketfromphy");
x.t("state","declare");
x.t("state","allocating");
x.t("state","parameters");
x.t("state","functions");
x.t("state","section");
x.t("state","collision");
x.t("state","non-transmitting");
x.t("state","header");
x.t("state","variable");
x.t("state","yield");
x.t("state","information");
x.t("state","backoff");
x.t("state","structure");
x.t("state","dequeues");
x.t("state","protocol");
x.t("mac802_3","mac802_3");
x.t("mac802_3","initially");
x.t("mac802_3","macdata802_3");
x.t("mac802_3","int");
x.t("mac802_3","appears");
x.t("mac802_3","interfaceindex");
x.t("mac802_3","msg_mac_transmissionfinished");
x.t("mac802_3","sizeof");
x.t("mac802_3","msg");
x.t("mac802_3","figure");
x.t("mac802_3","send");
x.t("mac802_3","sense");
x.t("mac802_3","random_setseed");
x.t("mac802_3","mac802_3-");
x.t("statement","file");
x.t("statement","handle");
x.t("statement","include");
x.t("statement","protocol");
x.t("macmyprotocolinit","node");
x.t("macmyprotocolinit","event");
x.t("macmyprotocolinit","myprotocol");
x.t("calculates","stores");
x.t("4-129","shows");
x.t("4-129","mac");
x.t("timer","events");
x.t("timer","i.e");
x.t("timer","macdatacsma");
x.t("timer","expired");
x.t("timer","expires");
x.t("timer","event");
x.t("timer","randomseed");
x.t("timer","sequence");
x.t("timer","protocol");
x.t("timer","scheduled");
x.t("leak","memory");
x.t("csma_bo_max","csma-");
x.t("phystatus","node");
x.t("&node-","macdata");
x.t("mix","wired");
x.t("tdma","mac");
x.t("tdma","models");
x.t("type","example");
x.t("type","4.5.5.9");
x.t("type","lists");
x.t("type","interface");
x.t("type","mac");
x.t("type","garp");
x.t("type","status");
x.t("type","network");
x.t("type","wireless");
x.t("type","address");
x.t("type","write");
x.t("type","msg_mac_starttransmission");
x.t("type","important");
x.t("type","event");
x.t("type","figure");
x.t("type","received");
x.t("type","break");
x.t("type","either");
x.t("type","msg_mac_timerexpred");
x.t("clocktype","subnetpropdelay");
x.t("clocktype","interframegap");
x.t("clocktype","jamtrdelay");
x.t("clocktype","propdelay");
x.t("clocktype","slottime");
x.t("clocktype","receiveduration");
x.t("change","physical");
x.t("change","mac");
x.t("change","status");
x.t("change","indicates");
x.t("change","notifications");
x.t("change","handler");
x.t("change","occurs");
x.t("change","section");
x.t("change","interest");
x.t("change","notification");
x.t("change","station");
x.t("times","needed");
x.t("times","maximum");
x.t("times","backoff");
x.t("doesn\u2019t","already");
x.t("/include/partition.h","initialization");
x.t("maintained","new");
x.t("traces","packets");
x.t("arpisenable","node");
x.t("mac802addr","convertvariablehwaddressto802address");
x.t("sample","code");
x.t("freed","properly");
x.t("freed","calling");
x.t("4-140","shows");
x.t("4-140","mac");
x.t("4.5.6.10","4.5.6.1");
x.t("4.5.6.10","integrating");
x.t("assert","newphystatus");
x.t("assert","(false)");
x.t("assert","csma-");
x.t("assert","csma");
x.t("assert","msg-");
x.t("&networktype","&priority");
x.t("resets","backoff");
x.t("wired","mac");
x.t("wired","networks");
x.t("wired","network");
x.t("wired","wireless");
x.t("wired","broadcast");
x.t("mac-lte","models");
x.t("time","ieee");
x.t("time","trace");
x.t("time","division");
x.t("time","interframe");
x.t("time","inter-frame");
x.t("time","node-");
x.t("time","used");
x.t("time","mac802_3-");
x.t("operates","promiscuous");
x.t("packets","example");
x.t("packets","node\u2019s");
x.t("packets","discussed");
x.t("packets","traverse");
x.t("packets","physical");
x.t("packets","mac");
x.t("packets","network");
x.t("packets","processed");
x.t("packets","discarded");
x.t("packets","control");
x.t("packets","function");
x.t("packets","receive");
x.t("packets","section");
x.t("packets","originate");
x.t("packets","transmitted");
x.t("packets","myprotocol");
x.t("packets","arrival");
x.t("packets","received");
x.t("packets","collecting");
x.t("packets","note");
x.t("packets","packet");
x.t("calls","ieee");
x.t("calls","physical");
x.t("calls","mac");
x.t("calls","initialization");
x.t("calls","csma");
x.t("calls","function");
x.t("calls","receive");
x.t("calls","send");
x.t("calls","appropriate");
x.t("calls","finalization");
x.t("calls","following");
x.t("calls","mac_fourbytemacaddresstovariablehwaddress");
x.t("calls","either");
x.t("trace","protocols");
x.t("trace","lists");
x.t("trace","facilitate");
x.t("addnodetosubnet","calls");
x.t("addnodetosubnet","updates");
x.t("addnodetosubnet","addnodetoipv6network");
x.t("addnodetosubnet","section");
x.t("addnodetosubnet","(addnodetoipv6network)");
x.t("addnodetosubnet","node");
x.t("addnodetosubnet","figure");
x.t("2-byte","mac");
x.t("initially","packet");
x.t("struct_mac_802_3_stat","int64");
x.t("reset","collision");
x.t("4-141","template");
x.t("4-141","finalization");
x.t("notifying","mac");
x.t("response","phy");
x.t("&srchwaddress","else");
x.t("&srchwaddress","&hdr-");
x.t("multiple","interfaces");
x.t("multiple","access");
x.t("multiple","instances");
x.t("sections","create");
x.t("4.5.5.5.1","determining");
x.t("4.5.5.5.1","read");
x.t("4.5.5.5.1","4.5.6.2.2");
x.t("however","recommended");
x.t("network_ip.h","qualnet_home");
x.t("rate","index");
x.t("rate","propagation");
x.t("rate","case");
x.t("explains","read");
x.t("partition_initializenodes","implemented");
x.t("partition_initializenodes","calls");
x.t("keywords","subnet");
x.t("globaladdr","subnetaddr");
x.t("globaladdr","select");
x.t("globaladdr","in6_addr");
x.t("macconfigurehwaddress","static");
x.t("macconfigurehwaddress","calls");
x.t("macconfigurehwaddress","initialize");
x.t("macconfigurehwaddress","node");
x.t("macconfigurehwaddress","configures");
x.t("macconfigurehwaddress","call");
x.t("jam","transmission");
x.t("jam","sequence");
x.t("inside","switch");
x.t("unknown","type");
x.t("unknown","destination");
x.t("i.e","timer");
x.t("i.e","pointer");
x.t("acknowledgement","calling");
x.t("acknowledgement","successfully");
x.t("acknowledgement","transmitted");
x.t("&srchwaddr","node");
x.t("&srchwaddr","bool");
x.t("/libraries/developer/makefile-common","shown");
x.t("4-142","recompile");
x.t("4-142","adding");
x.t("seq_num","assert");
x.t("seq_num","csma-");
x.t("seq_num","int");
x.t("csma_tx_data_yield_time","//if//");
x.t("mac","protocols");
x.t("mac","layer");
x.t("mac","uses");
x.t("mac","mac");
x.t("mac","wimax");
x.t("mac","initialization");
x.t("mac","zigbee");
x.t("mac","addresses");
x.t("mac","protocol\u2019s");
x.t("mac","ipv4");
x.t("mac","address");
x.t("mac","addition");
x.t("mac","configured");
x.t("mac","802.3");
x.t("mac","qualnet_home");
x.t("mac","header");
x.t("mac","data");
x.t("mac","specification");
x.t("mac","protocol");
x.t("mac","mac_dot11-sta.h");
x.t("mac","either");
x.t("mac","statistics");
x.t("aloha","mac");
x.t("aloha","models");
x.t("networks","mac");
x.t("networks","translate");
x.t("networks","ipv6");
x.t("networks","steps");
x.t("networks","mac802.16");
x.t("division","multiple");
x.t("needed","needed");
x.t("needed","communicate");
x.t("needed","may");
x.t("needed","section");
x.t("needed","protocol");
x.t("/main/mac.cpp","file");
x.t("/main/mac.cpp","qualnet_home");
x.t("partial","description");
x.t("faultcount","//flag");
x.t("apis","available");
x.t("apis","listed");
x.t("apis","inter-layer");
x.t("apis","parameters");
x.t("apis","communicate");
x.t("apis","section");
x.t("apis","several");
x.t("apis","used");
x.t("queue","interface");
x.t("queue","queue");
x.t("queue","add");
x.t("queue","mac_outputqueuetoppacket");
x.t("queue","empty");
x.t("queue","arp");
x.t("queue","section");
x.t("queue","adds");
x.t("queue","either");
x.t("queue","non-empty");
x.t("queue","without");
x.t("queue","mac_handoffsuccessfullyreceivedpacket");
x.t("queue","buffer");
x.t("convert","address");
x.t("listed","below");
x.t("listed","section");
x.t("checks","status");
x.t("checks","whether");
x.t("checks","output");
x.t("checks","attached");
x.t("checks","timeout");
x.t("checks","packet");
x.t("channel","layer");
x.t("channel","transmission");
x.t("channel","phy_stoplisteningtochannel");
x.t("channel","transmit");
x.t("channel","phy_settransmissionchannel");
x.t("channel","bandwidth");
x.t("4.5.5.5.2","ieee");
x.t("4.5.5.5.2","explains");
x.t("4.5.5.5.2","function");
x.t("4.5.5.5.2","protocol");
x.t("4.5.5.5.2","call");
x.t("4.5.5.5.2","reading");
x.t("10000000","subnet-propagation-delay");
x.t("bottom-most","layer");
x.t("sitecounter","else");
x.t("sitecounter","macprotocolname");
x.t("sitecounter","bool");
x.t("sitecounter","figure");
x.t("createmac802_3","shown");
x.t("createmac802_3","implemented");
x.t("createmac802_3","4.5.5.5.3");
x.t("createmac802_3","functions");
x.t("createmac802_3","node");
x.t("automatically","add");
x.t("subnetpropdelay","mac802_3getsubnetparameters");
x.t("subnetpropdelay","node-");
x.t("assumes","myprotocol");
x.t("mac_protocol_ces_wintgbs","mac_fourbytemacaddresstovariablehwaddress");
x.t("default","assert");
x.t("default","error_assert");
x.t("default","return");
x.t("default","figure");
x.t("default","case");
x.t("default","message_free");
x.t("4-143","wireless");
x.t("4-143","phy_gettxdatarate");
x.t("4-143","figure");
x.t("removes","mac");
x.t("link","fault");
x.t("link","statements");
x.t("link","mac_initialize");
x.t("link","input");
x.t("link","mac_iswiredbroadcastnetwork");
x.t("link","sizeof");
x.t("link","figure");
x.t("link","islink");
x.t("link","using");
x.t("link","mac802_3-");
x.t("abstract-mac","cellular");
x.t("abstract-mac","models");
x.t("access","(csma)");
x.t("access","(tdma)");
x.t("access","collision");
x.t("wimax","mac");
x.t("advanced","wireless");
x.t("garp","generic");
x.t("garp","vlan");
x.t("spanning","tree");
x.t("machwaddress","srchwaddress");
x.t("machwaddress","ethernet");
x.t("machwaddress","srchwaddr");
x.t("machwaddress","desthwaddr");
x.t("machwaddress","desthwaddress");
x.t("machwaddress","macaddr");
x.t("machwaddress","machwaddr");
x.t("start","section");
x.t("start","listening");
x.t("belongs","specific");
x.t("certain","events");
x.t("certain","functions");
x.t("4.5.5.5.3","initializing");
x.t("4.5.5.5.3","myprotocol");
x.t("4.5.5.5.3","4.5.6.2.4");
x.t("new","library");
x.t("new","type");
x.t("new","mac");
x.t("new","protocol\u2019s");
x.t("new","ipv4");
x.t("new","event");
x.t("new","protocol");
x.t("new","packet");
x.t("4.5.5.5.4.1","creating");
x.t("4.5.5.5.4.1","initialize");
x.t("4.5.5.5.4.1","statistics");
x.t("neighbor","list");
x.t("neighbor","mac802_3broadcastmessage");
x.t("neighbor","nodes");
x.t("neighbor","information");
x.t("translate","mac");
x.t("translate","ipv4");
x.t("translate","address");
x.t("prefix","file");
x.t("among","information");
x.t("mbps","micro-second");
x.t("updates","network");
x.t("idle_state","static");
x.t("idle_state","check");
x.t("idle_state","message");
x.t("idle_state","mac802_3trytosendnextframe");
x.t("idle_state","mac802_3-");
x.t("details","viewing");
x.t("details","setting");
x.t("indication","network");
x.t("srchwaddr","machwaddress");
x.t("single","string");
x.t("compiling","files");
x.t("/mac_link.cpp","(developer_srcdir)");
x.t("4-144","static");
x.t("4-144","wireless");
x.t("hdr","assert");
x.t("hdr","csmaheader");
x.t("macdot11e","models");
x.t("top","packet");
x.t("mac_ismyhwaddress","function");
x.t("mac_ismyhwaddress","node");
x.t("4.5.5.5.4.2","void");
x.t("4.5.5.5.4.2","initialize");
x.t("4.5.5.5.4.2","initializing");
x.t("4.5.5.5.4.2","changes");
x.t("includes","default");
x.t("includes","following");
x.t("trace_myprotcol","last");
x.t("micro-second","respectively");
x.t("nodeinput-","variablenames");
x.t("nodeinput-","values");
x.t("nodeinput-","numlines");
x.t("interfaceaddress","//my");
x.t("interfaceaddress","numhostbits");
x.t("macsetdefaulthwaddress","nodeid");
x.t("macsetdefaulthwaddress","assign");
x.t("4.5.5.5.4","i.e");
x.t("4.5.5.5.4","implementing");
x.t("indirectly","called");
x.t("passes","mac");
x.t("passes","packet");
x.t("macdot11layer","node");
x.t("frame","available");
x.t("frame","intended");
x.t("frame","schedules");
x.t("frame","freed");
x.t("frame","due");
x.t("frame","present");
x.t("frame","discarded");
x.t("frame","mac802_3getsrcanddestaddrfromframe");
x.t("frame","mac802_3sensechannel");
x.t("frame","node");
x.t("frame","successfully");
x.t("frame","send");
x.t("frame","received");
x.t("frame","case");
x.t("frame","note");
x.t("frame","message_free");
x.t("frame","buffer");
x.t("macheadervlantag","taginfo");
x.t("numframelossforcollision","frame");
x.t("printing","statistics");
x.t("/mac_llc.cpp","(developer_srcdir)");
x.t("it's","variable");
x.t("4-145","maccsmainit");
x.t("4-145","csma");
x.t("csma_timer_backoff","csma-");
x.t("newphystatus","clocktype");
x.t("newphystatus","break");
x.t("newphystatus","oldphystatus");
x.t("newphystatus","phy_transmitting");
x.t("newphystatus","receiveduration");
x.t("printf","mac_csma");
x.t("file","ieee");
x.t("file","example");
x.t("file","defines");
x.t("file","files");
x.t("file","refer");
x.t("file","source");
x.t("file","interface");
x.t("file","mac");
x.t("file","includes");
x.t("file","api.h");
x.t("file","mac.h");
x.t("file","csma");
x.t("file","mac_csma.cpp");
x.t("file","sets");
x.t("file","lines");
x.t("file","function");
x.t("file","may");
x.t("file","section");
x.t("file","format");
x.t("file","qualnet_home");
x.t("file","end");
x.t("file","qualnet");
x.t("file","include");
x.t("file","makefile-common");
x.t("file","mac_myprotocol.cpp");
x.t("file","data");
x.t("file","typical");
x.t("file","called");
x.t("file","mac_802_3.cpp");
x.t("file","subnet");
x.t("file","using");
x.t("file","names");
x.t("file","mac.cpp");
x.t("file","mac_myprotocol.h");
x.t("file","contains");
x.t("initialization","mac");
x.t("initialization","wireless");
x.t("initialization","function");
x.t("initialization","section");
x.t("initialization","message");
x.t("initialization","event");
x.t("initialization","process");
x.t("initialization","myprotocol");
x.t("initialization","done");
x.t("initialization","adding");
x.t("short","faultcount");
x.t("short","sitecounter");
x.t("short","subnetindex");
x.t("short","lengthofpacket");
x.t("indicates","mac");
x.t("indicates","frame");
x.t("indicates","csma");
x.t("indicates","name");
x.t("indicates","whether");
x.t("indicates","node");
x.t("indicates","end");
x.t("indicates","yield");
x.t("indicates","backoff");
x.t("indicates","packet");
x.t("indicates","model");
x.t("list","protocols");
x.t("list","trace");
x.t("list","wired");
x.t("list","apis");
x.t("list","mac");
x.t("list","initialized");
x.t("list","summarizes");
x.t("list","section");
x.t("list","node");
x.t("list","schedule");
x.t("list","nodes");
x.t("list","station");
x.t("found","api");
x.t("upper","layer");
x.t("upper","layers");
x.t("mac_receivepacketfromphy","implemented");
x.t("mac_receivepacketfromphy","calls");
x.t("mac_receivepacketfromphy","mac_receivepacketfromphy");
x.t("mac_receivepacketfromphy","function");
x.t("mac_receivepacketfromphy","receive");
x.t("mac_receivepacketfromphy","node");
x.t("mac_receivepacketfromphy","deliver");
x.t("status","csma_status_passive");
x.t("status","layer");
x.t("status","physical");
x.t("status","change");
x.t("status","assert");
x.t("status","idle_state");
x.t("status","receiving_state");
x.t("status","status");
x.t("status","csma_status_backoff");
x.t("status","csma_status_xmit");
x.t("status","changes");
x.t("status","node");
x.t("status","csma_status_in_xmiting");
x.t("status","case");
x.t("status","ld.\\n");
x.t("status","csma_status_yield");
x.t("status","(mode)");
x.t("need","timers");
x.t("need","implement");
x.t("need","translate");
x.t("need","retrieve");
x.t("need","made");
x.t("need","performed");
x.t("4.5.5.5.4.3","initialize");
x.t("4.5.5.5.4.3","initializing");
x.t("user-developed","models");
x.t("stdlib.h","include");
x.t("api.h","shown");
x.t("api.h","qualnet_home");
x.t("subnetaddr","subnetprefixlen");
x.t("subnetaddr","unsigned");
x.t("counter","empty");
x.t("counter","backoff");
x.t("simulator","leak");
x.t("simulator","end");
x.t("proper","state");
x.t("receiving_state","frame");
x.t("receiving_state","event");
x.t("info","mac802_3selftimer");
x.t("info","message");
x.t("info","null");
x.t("mac_iswirelessnetwork","shown");
x.t("mac_iswirelessnetwork","mac_isonehopbroadcastnetwork");
x.t("mac_iswirelessnetwork","function");
x.t("mac_iswirelessnetwork","node");
x.t("taginfo","unsigned");
x.t("&desthwaddr","else");
x.t("&desthwaddr","&networktype");
x.t("&desthwaddr","&srchwaddr");
x.t("&desthwaddr","checking");
x.t("&desthwaddr","mac_ismyaddress");
x.t("&desthwaddr","&hdr-");
x.t("increments","value");
x.t("io_printstat","function");
x.t("io_printstat","node");
x.t("io_printstat","print");
x.t("determines","data");
x.t("(macdatacsma)","assert");
x.t("(macdatacsma)","csma-");
x.t("4-146","shows");
x.t("4-146","csma");
x.t("(false)","assert");
x.t("(false)","abort");
x.t("maccsmayield","void");
x.t("maccsmayield","node");
x.t("add","source");
x.t("add","mac");
x.t("add","new");
x.t("add","entry");
x.t("add","directly");
x.t("add","end");
x.t("add","code");
x.t("add","myprotocol");
x.t("add","dynamic");
x.t("add","protocol");
x.t("enterprise","tdma");
x.t("enterprise","gvrp");
x.t("enterprise","vlan");
x.t("enterprise","stp");
x.t("enterprise","4.5.2");
x.t("organization","files");
x.t("complete","description");
x.t("complete","list");
x.t("complete","code");
x.t("machasframetosendfn","sendframefn");
x.t("actions","need");
x.t("actions","process");
x.t("assign","2-byte");
x.t("assign","mac");
x.t("assign","fields");
x.t("assign","4-byte");
x.t("assign","ethernet-type");
x.t("4.5.5.5.4.4","implement");
x.t("4.5.5.5.4.4","initializing");
x.t("subnetindex","sitecounter");
x.t("subnetindex","int");
x.t("subnetindex","subnetmemberdata");
x.t("addnodetoipv6network","implemented");
x.t("addnodetoipv6network","createmac802_3");
x.t("addnodetoipv6network","initialize");
x.t("addnodetoipv6network","node");
x.t("addnodetoipv6network","figure");
x.t("subnetlistindex","bool");
x.t("subnetlistindex","unsigned");
x.t("tla","nla");
x.t("(linkdata)","memset");
x.t("(linkdata)","mac802_3getneighborinfo");
x.t("mac802address","mac802addr");
x.t("unsupported","hardware");
x.t("msg_prop_signalarrival","100");
x.t("during","initialization");
x.t("during","protocol");
x.t("during","simulation");
x.t("/adaptation.cpp","(developer_srcdir)");
x.t("csma-","pktssentbroadcast");
x.t("csma-","status");
x.t("csma-","timer.flag");
x.t("csma-","bomin");
x.t("csma-","botimes");
x.t("csma-","pktssentunicast");
x.t("csma-","pktstosend");
x.t("csma-","pktslostoverflow");
x.t("csma-","mymacdata");
x.t("csma-","seed");
x.t("csma-","pktsgotbroadcast");
x.t("csma-","mymacdata-");
x.t("csma-","timer.seq");
x.t("csma-","bomax");
x.t("csma-","pktsgotunicast");
x.t("timer.flag","csma_timer_off");
x.t("timer.flag","csma_timer_type");
x.t("timer.flag","csma_timer_switch");
x.t("4-147","delivering");
x.t("4-147","function");
x.t("maccsmareceivepacketfromphy","shown");
x.t("maccsmareceivepacketfromphy","calls");
x.t("maccsmareceivepacketfromphy","removes");
x.t("maccsmareceivepacketfromphy","maccsmareceivepacketfromphy");
x.t("maccsmareceivepacketfromphy","csma");
x.t("maccsmareceivepacketfromphy","node");
x.t("maccsmareceivepacketfromphy","following");
x.t("maccsmabackoff","function");
x.t("maccsmabackoff","node");
x.t("maccsmabackoff","enter");
x.t("network","myprotcol");
x.t("network","multimedia");
x.t("network","layer");
x.t("network","addressed");
x.t("network","technologies");
x.t("network","physical");
x.t("network","type");
x.t("network","wired");
x.t("network","time");
x.t("network","mac_iswirelessnetwork");
x.t("network","mac_isonehopbroadcastnetwork");
x.t("network","provides");
x.t("network","functions");
x.t("network","meant");
x.t("network","function");
x.t("network","mac_ispointtopointnetwork");
x.t("network","receiveframefn");
x.t("network","qualnet");
x.t("network","machwaddr");
x.t("network","propdelay");
x.t("network","pointers");
x.t("network","4.5.5");
x.t("network","packet");
x.t("network","using");
x.t("network","point-to-point");
x.t("4-14","lists");
x.t("4-14","mac");
x.t("api","mac_receivephystatuschangenotification");
x.t("api","composed");
x.t("api","mac_networklayerhaspackettosend");
x.t("api","functions");
x.t("api","function");
x.t("api","mac_receivestatuschangenotification");
x.t("api","reference");
x.t("api","message_free");
x.t("guide","details");
x.t("guide","4.5.4.1");
x.t("mac_outputqueuedequeuepacketforapriority","function");
x.t("entry","trace_any_protocol");
x.t("entry","msg_default");
x.t("entry","nodes");
x.t("entry","mac_protocol_myprotocol");
x.t("entry","trace_myprotocol");
x.t("applies","instances");
x.t("applies","nodes");
x.t("initialized","physical");
x.t("initialized","mac");
x.t("initialized","initialization");
x.t("initialized","protocol\u2019s");
x.t("initialized","first");
x.t("initialized","process");
x.t("initialized","bottom");
x.t("subnetaddressstring","char");
x.t("slot","time");
x.t("machwaddresstoipv4address","calls");
x.t("machwaddresstoipv4address","defaultmac802addresstoipv4address");
x.t("machwaddresstoipv4address","node");
x.t("machwaddresstoipv4address","translates");
x.t("unless","used");
x.t("assume","initialization");
x.t("mac_isonehopbroadcastnetwork","function");
x.t("mac_isonehopbroadcastnetwork","return");
x.t("mac_isonehopbroadcastnetwork","correctly");
x.t("interfacing","network");
x.t("check","frame");
x.t("check","destination");
x.t("due","collision");
x.t("remove","mac");
x.t("increase","numframereceived");
x.t("increase","numframetransmitted");
x.t("4.5.6.1","decide");
x.t("4.5.6.1","defining");
x.t("4-148","determining");
x.t("4-148","bool");
x.t("macdot11receivepacketfromphy","node");
x.t("csma_status_backoff","else");
x.t("csma_status_backoff","maccsmabackoff");
x.t("csma_status_backoff","case");
x.t("large","number");
x.t("switched-ethernet","macsetdefaulthwaddress");
x.t("switched-ethernet","models");
x.t("4-15","protocols");
x.t("mac.h","file");
x.t("mac.h","complete");
x.t("mac.h","functions");
x.t("mac.h","section");
x.t("mac.h","qualnet_home");
x.t("traffic","main");
x.t("overview","flow");
x.t("recommended","user-developed");
x.t("recommended","separate");
x.t("macdata802_3","shown");
x.t("macdata802_3","mac_802_3.h");
x.t("macdata802_3","mac802_3");
x.t("macdata802_3","node-");
x.t("macdata802_3","data");
x.t("macdata802_3","above");
x.t("macdata802_3","mac802_3statistics");
x.t("macdata802_3","mem_malloc");
x.t("macdata802_3","contains");
x.t("paramn","valuen");
x.t("paramn","names");
x.t("false","unsupported");
x.t("false","networkipisunnumberedinterface");
x.t("false","int64");
x.t("false","switch");
x.t("false","invalid");
x.t("false","processsubnetline");
x.t("false","strcmp");
x.t("false","mac_isbroadcastmac802address");
x.t("false","figure");
x.t("false","mac802_3-");
x.t("lengthofpacket","machwaddress");
x.t("macdatacsma","mac_csma.h");
x.t("macdatacsma","shown");
x.t("macdatacsma","4.5.6.2");
x.t("macdatacsma","csma");
x.t("macdatacsma","node-");
x.t("macdatacsma","data");
x.t("macdatacsma","mem_malloc");
x.t("4.5.6.2","initialization");
x.t("4-149","delivering");
x.t("4-149","function");
x.t("depends","upon");
x.t("csma","else");
x.t("csma","phystatustype");
x.t("csma","(clocktype)");
x.t("csma","user-specified");
x.t("csma","enters");
x.t("csma","performs");
x.t("csma","initialization");
x.t("csma","status");
x.t("csma","csma-");
x.t("csma","macdatacsma");
x.t("csma","specified");
x.t("csma","csma");
x.t("csma","functions");
x.t("csma","phy_idle");
x.t("csma","function");
x.t("csma","receive");
x.t("csma","sizeof");
x.t("csma","message");
x.t("csma","event");
x.t("csma","node-");
x.t("csma","null");
x.t("csma","msg");
x.t("csma","running");
x.t("csma","implementation");
x.t("csma","figure");
x.t("csma","//if//");
x.t("csma","models");
x.t("csma","data");
x.t("csma","protocol");
x.t("csma","transmit");
x.t("csma","carrier");
x.t("csma","contained");
x.t("csma","break");
x.t("interfaceisenabled","int");
x.t("handle","events");
x.t("handle","physical");
x.t("handle","packets");
x.t("handle","outgoing");
x.t("handle","message");
x.t("handle","packet");
x.t("inter-layer","communication");
x.t("delivered","mac");
x.t("delivered","upper");
x.t("specified","example");
x.t("specified","user");
x.t("specified","interface");
x.t("specified","channel");
x.t("specified","mac");
x.t("specified","programmer");
x.t("specified","format");
x.t("specified","qualnet");
x.t("specified","subnet");
x.t("true","else");
x.t("true","interface");
x.t("true","mac");
x.t("true","address");
x.t("true","return");
x.t("true","break");
x.t("writing","wired");
x.t("writing","wireless");
x.t("summarizes","actions");
x.t("declare","new");
x.t("declare","initialize");
x.t("declare","structure");
x.t("declare","statistics");
x.t("desired","section");
x.t("requires","operation");
x.t("requires","data");
x.t("requires","following");
x.t("directly","connected");
x.t("directly","macmyprotocolfinalize");
x.t("queues","interface");
x.t("listinit","node");
x.t("processed","freed");
x.t("processed","mac");
x.t("processed","otherwise");
x.t("eventtype","msg_mac_timerexpired");
x.t("eventtype","case");
x.t("mac802_3selftimer","info");
x.t("mac802_3selftimer","message_returninfo");
x.t("mac802_3retrievepacketfromqintoownbuffer","retrieve");
x.t("mac802_3retrievepacketfromqintoownbuffer","node");
x.t("stat","variables");
x.t("cycle","required");
x.t("4.5.6.3","implementing");
x.t("4.5.6.3","call");
x.t("relates","csma");
x.t("mac_protocol_802_11","node-");
x.t("mac_interfaceisenabled","node");
x.t("csma_status_xmit","dequeue");
x.t("csma_status_xmit","maccsmaxmit");
x.t("converts","mac");
x.t("mac_csma","error");
x.t("functionality","component");
x.t("functionality","incorporated");
x.t("(csma)","mac");
x.t("infrastructure","mode");
x.t("common","mac");
x.t("common","sources");
x.t("name","parameter");
x.t("name","files");
x.t("name","interface");
x.t("name","indicates");
x.t("name","enumeration");
x.t("name","different");
x.t("name","statistic");
x.t("name","protocol");
x.t("4.5.5.11.1","modifying");
x.t("4.5.5.11.1","write");
x.t("settings","files");
x.t("guidelines","section");
x.t("guidelines","qualnet");
x.t("creating","files");
x.t("creating","instance");
x.t("creating","activating");
x.t("/libraries/user_models","called");
x.t("enclosed","square");
x.t("subnet-data-rate","10000000");
x.t("sla=","nodesinsubnet");
x.t("operation","example");
x.t("operation","wireless");
x.t("operation","protocol");
x.t("interframe","gap");
x.t("stored","receiveframefn");
x.t("stored","sendframefn");
x.t("forward","upper");
x.t("forward","packet");
x.t("networkipisunnumberedinterface","node");
x.t("mac802_3broadcastmessage","node");
x.t("mac_csma.cpp","void");
x.t("mac_csma.cpp","folder");
x.t("mac_csma.cpp","data");
x.t("mac_csma.cpp","modify");
x.t("mac_csma.cpp","definitions");
x.t("bomin","minimum");
x.t("bomin","csma_bo_min");
x.t("4.5.6.4","implementing");
x.t("macmyprotocolreceivepacketfromphy","myprotcol");
x.t("macmyprotocolreceivepacketfromphy","check");
x.t("macmyprotocolreceivepacketfromphy","node");
x.t("wireless","protocols");
x.t("wireless","maca");
x.t("wireless","satcom");
x.t("wireless","mac");
x.t("wireless","networks");
x.t("wireless","macdot11e");
x.t("wireless","network");
x.t("wireless","csma");
x.t("wireless","gsm");
x.t("wireless","genericmac");
x.t("wireless","macdot11");
x.t("wireless","node");
x.t("wireless","umts-layer2");
x.t("zigbee","mac");
x.t("avoidance","(maca)");
x.t("phy-802.11n","wireless");
x.t("addresses","interfaces");
x.t("addresses","interface");
x.t("addresses","type");
x.t("addresses","mac");
x.t("addresses","ipv4");
x.t("addresses","function");
x.t("addresses","4.5.5.6.2");
x.t("addresses","following");
x.t("addresses","used");
x.t("addresses","4.5.5.7");
x.t("mac_protocol_wormhole","mac_protocol_anodr");
x.t("communication","physical");
x.t("communication","mac");
x.t("communication","api");
x.t("communication","section");
x.t("stop","listening");
x.t("tasks","create");
x.t("tasks","need");
x.t("tasks","declare");
x.t("tasks","internal");
x.t("tasks","mac802_3handlereceivedframe");
x.t("protocol\u2019s","initialization");
x.t("protocol\u2019s","header");
x.t("protocol\u2019s","event");
x.t("protocol\u2019s","configuration");
x.t("protocol\u2019s","statistics");
x.t("protocol\u2019s","operational");
x.t("mac_initialize","calls");
x.t("mac_initialize","initialization");
x.t("mac_initialize","function");
x.t("mac_initialize","reads");
x.t("mac_initialize","section");
x.t("mac_initialize","node");
x.t("mac_initialize","processsubnetline");
x.t("initialize","state");
x.t("initialize","interface");
x.t("initialize","times");
x.t("initialize","mac");
x.t("initialize","neighbor");
x.t("initialize","slot");
x.t("initialize","stat");
x.t("initialize","strcmp");
x.t("initialize","send");
x.t("initialize","protocol");
x.t("initialize","statistics");
x.t("4.5.5.11.2","void");
x.t("4.5.5.11.2","function");
x.t("4.5.5.11.2","implementing");
x.t("4.5.5.11.2","call");
x.t("param1","paramn");
x.t("param1","value1");
x.t("char","macprotocolname");
x.t("char","subnetaddressstring");
x.t("char","errorstr");
x.t("char","currentline");
x.t("char","buf");
x.t("char","nextsubnetstring");
x.t("char","mac_address_default_length");
x.t("char","buf1");
x.t("char","mem_malloc");
x.t("&macaddrinput","macaddrconfigured");
x.t("allocating","memory");
x.t("nodelist","int");
x.t("nodelist","numnodesinsubnet");
x.t("mac802_3_min_backoff_window","mac802_3-");
x.t("defaultmac802addresstoipv4address","implemented");
x.t("defaultmac802addresstoipv4address","translate");
x.t("defaultmac802addresstoipv4address","node");
x.t("enumerated","file");
x.t("handler","function");
x.t("previously","station");
x.t("numframetransmitted","frame");
x.t("numframetransmitted","function");
x.t("numframetransmitted","statistics");
x.t("5.2.3","adding");
x.t("4.5.6.5","example");
x.t("4.5.6.5","csma");
x.t("4.5.6.5","modifying");
x.t("4.5.6.5","modify");
x.t("notifications","physical");
x.t("notifications","myprotocol");
x.t("4.5.6.6.1","state");
x.t("4.5.6.6.1","physical");
x.t("4.5.6.6.1","mac");
x.t("4.5.6.6.1","write");
x.t("4.5.6.6.1","processing");
x.t("csma_status_","int32");
x.t("corresponds","latest");
x.t("mac_protocol_satellite_bentpipe","return");
x.t("macmyprotocolreceivephystatuschangenotification","myprotcol");
x.t("macmyprotocolreceivephystatuschangenotification","node");
x.t("virtual","local");
x.t("enumeration","type");
x.t("enumeration","file");
x.t("enumeration","traceprotocoltype");
x.t("enumeration","mac_protocol");
x.t("enumeration","protocol");
x.t("bytes","clocktype");
x.t("direct","physical");
x.t("direct","handle");
x.t("direct","send/buffer");
x.t("perform","tasks");
x.t("initializing","timers");
x.t("initializing","sending");
x.t("initializing","state");
x.t("initializing","mac");
x.t("initializing","neighbor");
x.t("initializing","send");
x.t("initializing","statistics");
x.t("dispatcher","4.5.5.8");
x.t("dispatcher","mac_processevent");
x.t("dispatcher","mac");
x.t("dispatcher","includes");
x.t("dispatcher","4.5.6.5");
x.t("dispatcher","protocol's");
x.t("dispatcher","function");
x.t("dispatcher","4.5.6.4.1");
x.t("dispatcher","step");
x.t("dispatcher","section");
x.t("dispatcher","informs");
x.t("dispatcher","enable");
x.t("dispatcher","include");
x.t("dispatcher","finalization");
x.t("dispatcher","4.5.5.7.1");
x.t("dispatcher","4.5.5.7.2");
x.t("component","file");
x.t("component","appropriate");
x.t("part","library");
x.t("part","initialization");
x.t("stats","linkedlist");
x.t("brackets","specification");
x.t("brackets","used");
x.t("qualify","parameter");
x.t("const","message");
x.t("const","nodeinput");
x.t("ipv4","networks");
x.t("ipv4","mac");
x.t("ipv4","addresses");
x.t("ipv4","ipv6");
x.t("ipv4","address");
x.t("ipv4","and/or");
x.t("ipv4","subnet");
x.t("errorstr","[max_string_length]");
x.t("errorstr","nodes");
x.t("handles","packets");
x.t("handles","packet");
x.t("handles","incoming");
x.t("4.5.6.6.2","mac");
x.t("4.5.6.6.2","status");
x.t("4.5.6.6.2","write");
x.t("4.5.6.6.2","processing");
x.t("botimes","times");
x.t("botimes","csma-");
x.t("pktssentunicast","csma-");
x.t("pktssentunicast","figure");
x.t("pktssentunicast","int32");
x.t("base","data");
x.t("4.5.6.6","interfacing");
x.t("message_removeheader","node");
x.t("provides","error-free");
x.t("provides","large");
x.t("provides","overview");
x.t("provides","detailed");
x.t("provides","outline");
x.t("parameters","example");
x.t("parameters","table");
x.t("parameters","description");
x.t("parameters","mac");
x.t("parameters","neighbor");
x.t("parameters","initialization");
x.t("parameters","specified");
x.t("parameters","requires");
x.t("parameters","csma");
x.t("parameters","initialize");
x.t("parameters","understand");
x.t("parameters","may");
x.t("parameters","section");
x.t("parameters","calling");
x.t("parameters","node");
x.t("parameters","identifier");
x.t("parameters","qualnet");
x.t("parameters","configuration");
x.t("parameters","myprotocol");
x.t("parameters","read");
x.t("parameters","protocol");
x.t("parameters","call");
x.t("parameters","statistics");
x.t("boolean","variable");
x.t("mac_isbroadcasthwaddress","(macaddr)");
x.t("mac_isbroadcasthwaddress","&desthwaddr");
x.t("mac_isbroadcasthwaddress","function");
x.t("mac_isbroadcasthwaddress","&desthwaddress");
x.t("programmer","name");
x.t("programmer","number");
x.t("helpful","examine");
x.t("src","create");
x.t("partition.h","qualnet_home");
x.t("collisioncounter","bool");
x.t("collisioncounter","mac802_3-");
x.t("window","message");
x.t("window","backoff");
x.t("hw_node_id","default");
x.t("checking","timer");
x.t("checking","whether");
x.t("updating","ieee");
x.t("updating","statistics");
x.t("integrating","mac");
x.t("integrating","protocol");
x.t("4.5.6.6.3","4.5.6.6.1");
x.t("4.5.6.6.3","processing");
x.t("4.5.6.6.3","include");
x.t("4.5.6.7","collecting");
x.t("generic","attribute");
x.t("area","network");
x.t("macros","functions");
x.t("prototypes","interface");
x.t("prototypes","api");
x.t("prototypes","functions");
x.t("mac_outputqueuetoppacket","function");
x.t("place","mac");
x.t("place","initialization");
x.t("place","folder");
x.t("indicate","type");
x.t("indicate","mac");
x.t("indicate","error");
x.t("declarations","source");
x.t("declarations","described");
x.t("standard","library");
x.t("continue","islink");
x.t("ipv6","networks");
x.t("ipv6","address");
x.t("ipv6","subnet");
x.t("1000000","initialize");
x.t("hwtype","case");
x.t("determine","type");
x.t("determine","packet");
x.t("numberinterfaces","interfaceindex");
x.t("(developer_srcdir)","/mac_background_traffic.cpp");
x.t("(developer_srcdir)","/mac_myprotocol.cpp");
x.t("(developer_srcdir)","/mac_link.cpp");
x.t("(developer_srcdir)","/mac_llc.cpp");
x.t("(developer_srcdir)","/adaptation.cpp");
x.t("(developer_srcdir)","/mac_satcom.cpp");
x.t("(developer_srcdir)","/adaptation_aal5.cpp");
x.t("(developer_srcdir)","/mac_arp.cpp");
x.t("(developer_srcdir)","/mobility_placement.cpp");
x.t("(developer_srcdir)","/multicast_igmp.cpp");
x.t("expired","maccsmalayer");
x.t("sends","mac");
x.t("sends","notification");
x.t("sends","packet");
x.t("rts","control");
x.t("4.5.6.8","finalization");
x.t("stack","shown");
x.t("stack","layer");
x.t("stack","list");
x.t("stack","qualnet_home");
x.t("stack","node");
x.t("stack","nodes");
x.t("enhancement","ieee");
x.t("composed","several");
x.t("address","parameter");
x.t("address","implement");
x.t("address","static");
x.t("address","mac_settwobytemacaddress");
x.t("address","nodeaddress");
x.t("address","&subnetbandwidth");
x.t("address","interface");
x.t("address","type");
x.t("address","calls");
x.t("address","mac");
x.t("address","belongs");
x.t("address","frame");
x.t("address","const");
x.t("address","part");
x.t("address","ipv4");
x.t("address","address");
x.t("address","functions");
x.t("address","configured");
x.t("address","next");
x.t("address","function");
x.t("address","combination");
x.t("address","may");
x.t("address","step");
x.t("address","section");
x.t("address","4.5.5.6.1");
x.t("address","assigned");
x.t("address","getmachwaddress");
x.t("address","any_dest");
x.t("address","configuration");
x.t("address","specific");
x.t("address","figure");
x.t("address","broadcast");
x.t("address","myprotocol");
x.t("address","information");
x.t("address","defined");
x.t("address","generation");
x.t("address","ipaddr");
x.t("address","structure");
x.t("address","based");
x.t("address","used");
x.t("address","subnet");
x.t("address","macaddnewinterface");
x.t("address","translation");
x.t("address","modify");
x.t("address","unicast");
x.t("map","node");
x.t("explained","below");
x.t("explained","section");
x.t("explained","maccsmanetworklayerhaspackettosend");
x.t("phynumber","void");
x.t("phynumber","networkipcreatequeues");
x.t("phynumber","index");
x.t("phynumber","msg");
x.t("macvlan","vlan");
x.t("decide","format");
x.t("sprintf","create");
x.t("sprintf","errorstr");
x.t("sprintf","buf");
x.t("subnetbandwidth","clocktype");
x.t("subnetbandwidth","node-");
x.t("modifying","mac");
x.t("modification","function");
x.t("desthwaddr","macdata802_3");
x.t("desthwaddr","int");
x.t("desthwaddr","message_free");
x.t("destination","ignore");
x.t("destination","source");
x.t("destination","layer");
x.t("final","step");
x.t("phy_gettxdatarate","implemented");
x.t("phy_gettxdatarate","initializes");
x.t("phy_gettxdatarate","node");
x.t("dequeue","packet");
x.t("4.5.6.9","including");
x.t("gsm","mac");
x.t("gsm","models");
x.t("gvrp","garp");
x.t("local","area");
x.t("examine","files");
x.t("examine","implementation");
x.t("examine","received");
x.t("fields","respectively");
x.t("fields","data");
x.t("fields","structure");
x.t("fields","packet");
x.t("fields","statistics");
x.t("int","subnetprefixlen");
x.t("int","seq_num");
x.t("int","subnetlistindex");
x.t("int","collisioncounter");
x.t("int","phynumber");
x.t("int","interfaceindex");
x.t("int","numnodesinsubnet");
x.t("int","bwinmbps");
x.t("int","message_returninfo");
x.t("int","seqnum");
x.t("int","backoffwindow");
x.t("int","protocol");
x.t("int","numhostbits");
x.t("int","networktype");
x.t("int","nodesinsubnet");
x.t("bgmainstruct","//ptr");
x.t("empty","mac802_3networklayerhaspackettosend");
x.t("empty","calls");
x.t("empty","indicates");
x.t("empty","indicate");
x.t("empty","mac_outputqueuedequeuepacket");
x.t("empty","self");
x.t("develop","code");
x.t("write","initialization");
x.t("write","function");
x.t("write","send");
x.t("write","finalization");
x.t("write","protocol");
x.t("string","mac802_3");
x.t("string","file");
x.t("string","indicating");
x.t("string","myprotocol");
x.t("string","containing");
x.t("traceprotocoltype","shown");
x.t("traceprotocoltype","file");
x.t("traceprotocoltype","figure");
x.t("fulldupstats","macdata802_3");
x.t("sets","pointers");
x.t("sets","experiment");
x.t("lines","starting");
x.t("msg_mac_jamsequence","indicates");
x.t("msg_mac_jamsequence","case");
x.t("started","send");
x.t("segment","ieee");
x.t("record","statistics");
x.t("pktstosend","csma-");
x.t("pktstosend","int32");
x.t("macdot11receivephystatuschangenotification","node");
x.t("addition","models");
x.t("ports","limited");
x.t("attribute","registration");
x.t("contain","source");
x.t("contain","detailed");
x.t("contain","index");
x.t("contain","code");
x.t("contain","following");
x.t("structures","provided");
x.t("structures","needed");
x.t("structures","mac");
x.t("structures","store");
x.t("structures","functions");
x.t("structures","step");
x.t("structures","defined");
x.t("structures","note");
x.t("structures","protocol");
x.t("input","files");
x.t("input","line");
x.t("input","file");
x.t("input","specified");
x.t("interfacecardfailed","figure");
x.t("mac_networklayerhaspackettosend","ieee");
x.t("mac_networklayerhaspackettosend","implemented");
x.t("mac_networklayerhaspackettosend","calls");
x.t("mac_networklayerhaspackettosend","mac_networklayerhaspackettosend");
x.t("mac_networklayerhaspackettosend","node");
x.t("mac_networklayerhaspackettosend","deliver");
x.t("mac_networklayerhaspackettosend","packet");
x.t("mac_networklayerhaspackettosend","call");
x.t("mac_networklayerhaspackettosend","used");
x.t("mac_networklayerhaspackettosend","ipv4addresstohwaddress");
x.t("mac_outputqueuedequeuepacket","function");
x.t("mac_outputqueuedequeuepacket","node");
x.t("flow","mac");
x.t("receiving","packets");
x.t("receiving","mac");
x.t("receiving","node");
x.t("understand","wired");
x.t("understand","wireless");
x.t("understand","configuration");
x.t("outgoing","packets");
x.t("outgoing","packet");
x.t("problems","even");
x.t("defining","data");
x.t("struct_mac_802_3_str","macdata");
x.t("protocol's","initialization");
x.t("protocol's","header");
x.t("protocol's","event");
x.t("retransmissions","reached");
x.t("extra","statistics");
x.t("&priority","msg");
x.t("sourceaddr","message_removeheader");
x.t("sourceaddr","hdr-");
x.t("developing","wired");
x.t("developing","protocol");
x.t("developing","adding");
x.t("umts","table");
x.t("umts","systems");
x.t("vlan","void");
x.t("vlan","virtual");
x.t("vlan","registration");
x.t("functions","ieee");
x.t("functions","mac_iswirednetwork");
x.t("functions","available");
x.t("functions","source");
x.t("functions","layer");
x.t("functions","implemented");
x.t("functions","interface");
x.t("functions","addnodetosubnet");
x.t("functions","needed");
x.t("functions","apis");
x.t("functions","checks");
x.t("functions","mac");
x.t("functions","listed");
x.t("functions","translate");
x.t("functions","file");
x.t("functions","4.5.5.5.4.3");
x.t("functions","mac_iswirelessnetwork");
x.t("functions","assign");
x.t("functions","network");
x.t("functions","machwaddresstoipv4address");
x.t("functions","stored");
x.t("functions","mac_initialize");
x.t("functions","map");
x.t("functions","structures");
x.t("functions","mac_networklayerhaspackettosend");
x.t("functions","functions");
x.t("functions","macmyprotocolnetworklayerhaspackettosend");
x.t("functions","collect");
x.t("functions","step");
x.t("functions","code");
x.t("functions","header");
x.t("functions","maccsmanetworklayerhaspackettosend");
x.t("functions","read");
x.t("functions","4.5.3");
x.t("functions","belonging");
x.t("functions","defined");
x.t("functions","correctly");
x.t("functions","contained");
x.t("functions","used");
x.t("functions","turn");
x.t("functions","performed");
x.t("functions","therefore");
x.t("functions","including");
x.t("functions","insert");
x.t("functions","ipv4addresstohwaddress");
x.t("functions","mac802_3getslottime");
x.t("functions","integrate");
x.t("functions","specify");
x.t("mac_protocol_ane","mac_protocol_wormhole");
x.t("random","link");
x.t("overloaded","function");
x.t("unexpected","problems");
x.t("store","state");
x.t("store","protocol\u2019s");
x.t("store","configuration");
x.t("store","information");
x.t("store","values");
x.t("[subnetindex]","subnetindex");
x.t("macmyprotocolnetworklayerhaspackettosend","macmyprotocolhandlereceivedframe");
x.t("macmyprotocolnetworklayerhaspackettosend","performs");
x.t("macmyprotocolnetworklayerhaspackettosend","stored");
x.t("macmyprotocolnetworklayerhaspackettosend","node");
x.t("macmyprotocolnetworklayerhaspackettosend","myprotocol");
x.t("present","need");
x.t("csmaheader","hdr");
x.t("csmaheader","msg-");
x.t("configured","infrastructure");
x.t("configured","record");
x.t("configured","function");
x.t("collect","neighbor");
x.t("collect","report");
x.t("collect","statistics");
x.t("strongly","recommended");
x.t("error","node");
x.t("error","adding");
x.t("supported","mac");
x.t("calculate","store");
x.t("inter-frame","gap");
x.t("point","functions");
x.t("frames","transmitted");
x.t("frames","received");
x.t("phy_idle","csma-");
x.t("simulates","faults");
x.t("mac_protocol_maca","mac_protocol_fama");
x.t("delay","equal");
x.t("delay","transmitting");
x.t("delay","mbps");
x.t("delay","specified");
x.t("delay","suffered");
x.t("delay","figure");
x.t("next","frame");
x.t("next","hop");
x.t("keeping","naming");
x.t("stationstate","idle_state");
x.t("stationstate","receiving_state");
x.t("stationstate","int");
x.t("stationstate","backoff_state");
x.t("respectively","void");
x.t("respectively","subnet-data-rate");
x.t("respectively","figure");
x.t("respectively","data");
x.t("currentline","nodeinput-");
x.t("currentline","bool");
x.t("subnetmemberdata","nodelist");
x.t("subnetmemberdata","subnetlist");
x.t("hold","protocol");
x.t("occurs","physical");
x.t("occurs","first");
x.t("occurs","function");
x.t("occurs","maccsmalayer");
x.t("discarded","due");
x.t("/mac_satcom.cpp","(developer_srcdir)");
x.t("maccsmaxmit","shown");
x.t("maccsmaxmit","maccsmabackoff");
x.t("maccsmaxmit","node");
x.t("maccsmaxmit","transmit");
x.t("mac_handoffsucessfullyreceivedpacket","packet");
x.t("cellular","mac-lte");
x.t("cellular","aloha");
x.t("cellular","systems");
x.t("select","mac");
x.t("select","protocol");
x.t("connecting","subnet");
x.t("//flag","link");
x.t("4.5.4.1","apis");
x.t("4.5.4.1","network");
x.t("appears","names");
x.t("first","handled");
x.t("first","step");
x.t("first","process");
x.t("clearly","indicates");
x.t("means","subnet");
x.t("processinpufilesubnetline","turn");
x.t("&retval","&macaddrinput");
x.t("linkdata","mem_malloc");
x.t("messages","contain");
x.t("messages","protocol");
x.t("mac_iswiredbroadcastnetwork","function");
x.t("collection","create");
x.t("collection","variables");
x.t("collection","enabled");
x.t("collection","protocol");
x.t("life","cycle");
x.t("developer_srcs","(developer_srcdir)");
x.t("minimum","backoff");
x.t("pktslostoverflow","csma-");
x.t("pktslostoverflow","int32");
x.t("number","times");
x.t("number","packets");
x.t("number","mac");
x.t("number","retransmissions");
x.t("number","frames");
x.t("number","correspond");
x.t("number","sequence");
x.t("cellular-mac-protocol","abstract-mac");
x.t("cellular-mac-protocol","umts-layer2");
x.t("briefly","examine");
x.t("communicate","physical");
x.t("communicate","mac");
x.t("communicate","network");
x.t("communicate","different");
x.t("processing","physical");
x.t("processing","input");
x.t("processing","outgoing");
x.t("processing","finalization");
x.t("processing","incoming");
x.t("interfaceindex","else");
x.t("interfaceindex","phystatustype");
x.t("interfaceindex","ipv4address");
x.t("interfaceindex","message_getinstanceid");
x.t("interfaceindex","channel");
x.t("interfaceindex","machwaddress");
x.t("interfaceindex","&desthwaddr");
x.t("interfaceindex","csma-");
x.t("interfaceindex","macdata802_3");
x.t("interfaceindex","char");
x.t("interfaceindex","const");
x.t("interfaceindex","address");
x.t("interfaceindex","csmaheader");
x.t("interfaceindex","subnetmemberdata");
x.t("interfaceindex","select");
x.t("interfaceindex","ismyaddr");
x.t("interfaceindex","buf");
x.t("interfaceindex","interfaceindex");
x.t("interfaceindex","index");
x.t("interfaceindex","macaddr");
x.t("interfaceindex","bool");
x.t("interfaceindex","return");
x.t("interfaceindex","abstract");
x.t("interfaceindex","message");
x.t("interfaceindex","strcmp");
x.t("interfaceindex","node-");
x.t("interfaceindex","msg");
x.t("interfaceindex","existing");
x.t("interfaceindex","machwaddr");
x.t("interfaceindex","figure");
x.t("interfaceindex","routing_protocol_default");
x.t("interfaceindex","subnetlist");
x.t("interfaceindex","break");
x.t("interfaceindex","&msg");
x.t("interfaceindex","nodeinput");
x.t("4.5.4.2","apis");
x.t("4.5.4.2","mac");
x.t("gui","new");
x.t("gui","during");
x.t("gui","settings");
x.t("gui","modify");
x.t("mymacdata","int");
x.t("mymacdata","node-");
x.t("mymacdata","figure");
x.t("mymacdata","int32");
x.t("mymacdata","mac802_3-");
x.t("isfullduplex","mac802_3fullduplexstatistics");
x.t("isfullduplex","mac802_3fullduplexfinalize");
x.t("fewer","two");
x.t("[interfaceindex]","promiscuousmode");
x.t("[interfaceindex]","state");
x.t("[interfaceindex]","csma-");
x.t("[interfaceindex]","phynumber");
x.t("[interfaceindex]","initializes");
x.t("[interfaceindex]","macprotocol");
x.t("[interfaceindex]","switch");
x.t("[interfaceindex]","macstats");
x.t("[interfaceindex]","propdelay");
x.t("[interfaceindex]","mplsvar");
x.t("[interfaceindex]","macvar");
x.t("[interfaceindex]","sendframefn");
x.t("[interfaceindex]","mac802_3-");
x.t("[interfaceindex]","bandwidth");
x.t("initializes","interface");
x.t("initializes","physical");
x.t("initializes","network");
x.t("initializes","fields");
x.t("initializes","protocol");
x.t("numnodesinsubnet","macdata802_3");
x.t("numnodesinsubnet","initialize");
x.t("numnodesinsubnet","mac802_3-");
x.t("seed","node-");
x.t("seed","setting");
x.t("macaddr-","hwtype");
x.t("mac_variablehwaddresstofourbytemacaddress","node");
x.t("10000","figure");
x.t("delivering","packets");
x.t("meant","network");
x.t("mac_sneakpeakatmacpacket","enable");
x.t("ismyaddr","mac_ismyhwaddress");
x.t("ismyaddr","false");
x.t("ismyaddr","mac_isbroadcasthwaddress");
x.t("notify","network");
x.t("buf","number");
x.t("buf","[max_string_length]");
x.t("buf","figure");
x.t("buf","ctoa");
x.t("viewing","dynamic");
x.t("csma_timer_type","csma_timer_backoff");
x.t("csma_timer_type","case");
x.t("csma_timer_type","csma_timer_yield");
x.t("desthwaddress","convert802addresstovariablehwaddress");
x.t("control","packets");
x.t("2012","scalable");
x.t("genericmac","models");
x.t("macdot11","models");
x.t("comments","functions");
x.t("virtualmacaddress","macvlan");
x.t("function","ieee");
x.t("function","included");
x.t("function","example");
x.t("function","maccsmapassive");
x.t("function","myprotcol");
x.t("function","mac_iswirednetwork");
x.t("function","mac802_3networklayerhaspackettosend");
x.t("function","mac802_3layer");
x.t("function","macmyprotocolhandlereceivedframe");
x.t("function","processlinkline");
x.t("function","mac_processevent");
x.t("function","maccsmainit");
x.t("function","4.5.6.2.4.2");
x.t("function","message_getinstanceid");
x.t("function","responsible");
x.t("function","macdot11init");
x.t("function","networkipcreatequeues");
x.t("function","mac802_3completeframetransmission");
x.t("function","convertvariablehwaddressto802address");
x.t("function","nodeaddress");
x.t("function","mac802_3createframe");
x.t("function","mac_receivephystatuschangenotification");
x.t("function","macmyprotocolinit");
x.t("function","addnodetosubnet");
x.t("function","wired");
x.t("function","partition_initializenodes");
x.t("function","macconfigurehwaddress");
x.t("function","checks");
x.t("function","mac");
x.t("function","createmac802_3");
x.t("function","translate");
x.t("function","4.5.5.5.4");
x.t("function","4.5.5.5.4.2");
x.t("function","initialization");
x.t("function","io_printstat");
x.t("function","mac_receivepacketfromphy");
x.t("function","mac_iswirelessnetwork");
x.t("function","maccsmayield");
x.t("function","assign");
x.t("function","add");
x.t("function","maccsmareceivepacketfromphy");
x.t("function","maccsmabackoff");
x.t("function","network");
x.t("function","machwaddresstoipv4address");
x.t("function","handle");
x.t("function","mac802_3retrievepacketfromqintoownbuffer");
x.t("function","csma");
x.t("function","stored");
x.t("function","macmyprotocolreceivepacketfromphy");
x.t("function","mac_initialize");
x.t("function","defaultmac802addresstoipv4address");
x.t("function","4.5.5.11.2");
x.t("function","wireless");
x.t("function","macmyprotocolreceivephystatuschangenotification");
x.t("function","handles");
x.t("function","sprintf");
x.t("function","phy_gettxdatarate");
x.t("function","write");
x.t("function","mac_networklayerhaspackettosend");
x.t("function","protocol's");
x.t("function","macmyprotocolnetworklayerhaspackettosend");
x.t("function","maccsmaxmit");
x.t("function","mac_handoffsucessfullyreceivedpacket");
x.t("function","processinpufilesubnetline");
x.t("function","messages");
x.t("function","initializes");
x.t("function","mac_sneakpeakatmacpacket");
x.t("function","function");
x.t("function","maccsmahandlepromiscousmode");
x.t("function","arp");
x.t("function","mac802_3finalize");
x.t("function","mac802_3sensechannel");
x.t("function","section");
x.t("function","mac_sneakpeekatmacpacket");
x.t("function","mac802_3handlereceivedframe");
x.t("function","processsubnetline");
x.t("function","bool");
x.t("function","given");
x.t("function","mac_notificationofpacketdrop");
x.t("function","maccsmanetworklayerhaspackettosend");
x.t("function","qualnet");
x.t("function","mac802_3getsubnetparameters");
x.t("function","mac_maclayeracknowledgement");
x.t("function","maccsmalayer");
x.t("function","include");
x.t("function","networkupdateforwardingtable");
x.t("function","phy_starttransmittingsignal");
x.t("function","process");
x.t("function","mac802_3getneighborinfo");
x.t("function","mac802_3convertframeintopacket");
x.t("function","macmyprotocolfinalize");
x.t("function","pointers");
x.t("function","myprotocol");
x.t("function","mac802_3printstats");
x.t("function","configure");
x.t("function","node_processevent");
x.t("function","maccsmareceivephystatuschangenotification");
x.t("function","defined");
x.t("function","finalization");
x.t("function","dequeues");
x.t("function","notifies");
x.t("function","print");
x.t("function","called");
x.t("function","checkphystatusandsendorbackoff");
x.t("function","protocol");
x.t("function","transmit");
x.t("function","call");
x.t("function","used");
x.t("function","macaddnewinterface");
x.t("function","mac_finalize");
x.t("function","returns");
x.t("function","partition_finalize");
x.t("function","ipv4addresstohwaddress");
x.t("function","mac802_3init");
x.t("function","delivers");
x.t("function","mem_malloc");
x.t("function","ipv4addresstodefaulthwaddress");
x.t("function","macmyprotocollayer");
x.t("function","mac_handoffsuccessfullyreceivedpacket");
x.t("function","mac_setfourbytemacaddress");
x.t("4.5.4.3","apis");
x.t("4.5.4.3","mac");
x.t("user_models","library");
x.t("user_models","subdirectory");
x.t("user_models","section");
x.t("user_models","follow");
x.t("bwinmbps","clocktype");
x.t("bwinmbps","(int)");
x.t("determining","mac");
x.t("determining","protocol");
x.t("&subnetdata-","subnetlist");
x.t("macaddrconfigured","strcmp");
x.t("macaddrconfigured","io_readcachedfile");
x.t("macaddrconfigured","readinterfacemacaddress");
x.t("commonly","performs");
x.t("implements","mac");
x.t("implements","function");
x.t("implements","switch");
x.t("implements","several");
x.t(".byte","unsigned");
x.t("design","msg_special_timer");
x.t("msg_mac_myprotocol_newevent1","msg_mac_myprotocol_newevent2");
x.t("msg_mac_starttransmission","example");
x.t("msg_mac_starttransmission","indicates");
x.t("msg_mac_starttransmission","occur");
x.t("signal","propagation");
x.t("retrieve","return");
x.t("retrieve","packet");
x.t("retrieve","pointer");
x.t("mac802_3getsrcanddestaddrfromframe","node");
x.t("maximum","number");
x.t("maximum","backoff");
x.t("reporting","statistics");
x.t("indicating","layer");
x.t("indicating","protocol");
x.t("addon","example");
x.t("addon","add");
x.t("(csmaheader)","trace_csma");
x.t("maccsmahandlepromiscousmode","removes");
x.t("maccsmahandlepromiscousmode","maccsmahandlepromiscousmode");
x.t("cts","rts");
x.t("may","provide");
x.t("may","lead");
x.t("may","protocol-specific");
x.t("may","needed");
x.t("may","need");
x.t("may","handle");
x.t("may","contain");
x.t("may","calculate");
x.t("may","notify");
x.t("may","receive");
x.t("may","added");
x.t("may","return");
x.t("may","include");
x.t("may","generate");
x.t("may","retransmit");
x.t("may","inform");
x.t("may","run");
x.t("different","interfaces");
x.t("different","components");
x.t("different","type");
x.t("different","wired");
x.t("different","mac");
x.t("different","certain");
x.t("different","addresses");
x.t("different","steps");
x.t("different","layers");
x.t("802.3","transmits");
x.t("802.3","performs");
x.t("802.3","void");
x.t("802.3","look");
x.t("802.3","addnodetosubnet");
x.t("802.3","mac");
x.t("802.3","initialization");
x.t("802.3","increments");
x.t("802.3","macdata802_3");
x.t("802.3","specified");
x.t("802.3","parameters");
x.t("802.3","understand");
x.t("802.3","functions");
x.t("802.3","function");
x.t("802.3","calling");
x.t("802.3","node");
x.t("802.3","mac802_3handlereceivedframe");
x.t("802.3","qualnet");
x.t("802.3","event");
x.t("802.3","any_dest");
x.t("802.3","running");
x.t("802.3","implementation");
x.t("802.3","data");
x.t("802.3","finalization");
x.t("802.3","described");
x.t("802.3","protocol");
x.t("802.3","contained");
x.t("802.3","statistics");
x.t("802.3","4.5.5.10.3");
x.t("phy-model","phy-802.11n");
x.t("(tdma)","mac");
x.t("macprotocol","mac_protocol_switched_ethernet");
x.t("macprotocol","mac");
x.t("macprotocol","mac_protocol_802_11");
x.t("macprotocol","mac_protocol_satellite_bentpipe");
x.t("macprotocol","mac_protocol_802_3");
x.t("macprotocol","mac_protocol_link");
x.t("macprotocol","mac_protocol_cellular");
x.t("macprotocol","mac_protocol_csma");
x.t("macprotocol","case");
x.t("macprotocol","mac_protocol_mpls");
x.t("macprotocol","mac_protocol_myprotocol");
x.t("macprotocol","d_uint32");
x.t("interfacestatushandlerlist","nodeaddress");
x.t("4-118","macdata");
x.t("whether","interface");
x.t("whether","mac");
x.t("whether","address");
x.t("whether","particular");
x.t("whether","message");
x.t("4.5.4.4","physical");
x.t("4.5.4.4","section");
x.t("arp","enabled");
x.t("hop","mac");
x.t("hop","arp");
x.t("hop","packet");
x.t("particular","mac");
x.t("particular","address");
x.t("define","data");
x.t("define","appropriate");
x.t("receive","events");
x.t("receive","functions");
x.t("receive","control");
x.t("receive","function");
x.t("receive","process");
x.t("trace_ip","trace_cbr");
x.t("specifies","subnet");
x.t("reads","mac");
x.t("reads","parameters");
x.t("reads","configuration");
x.t("(max_address_string_length)","nodeinput-");
x.t("combination","node");
x.t("msg_special_timer","message");
x.t("msg_mac_myprotocol_newevent2","msg_default");
x.t("mac802_3finalize","shown");
x.t("mac802_3finalize","implemented");
x.t("mac802_3finalize","node");
x.t("processes","notifications");
x.t("processes","packet");
x.t("instead","physical");
x.t("detailed","description");
x.t("detailed","traces");
x.t("detailed","comments");
x.t("detailed","models");
x.t("stores","mac");
x.t("stores","parameters");
x.t("stores","information");
x.t("stores","propagation");
x.t("stores","values");
x.t("stores","bandwidth");
x.t("index","instance");
x.t("index","mac_processevent");
x.t("index","interface");
x.t("index","physical");
x.t("index","calling");
x.t("index","parameter-value");
x.t("index","used");
x.t("index","buffer");
x.t("index","mac_setfourbytemacaddress");
x.t("4.5.4.5","mac");
x.t("4.5.4.5","complete");
x.t("step","integrating");
x.t("step","similar");
x.t("step","towards");
x.t("4-119","typedef");
x.t("4-119","adding");
x.t("3.4.1","node");
x.t("starting","keywords");
x.t("begins","keyword");
x.t("//my","interface");
x.t("scenario","configuration");
x.t("macaddr","&mac802addr");
x.t("macaddr","else");
x.t("macaddr","ipv4address");
x.t("macaddr","char");
x.t("macaddr","mac_isbroadcasthwaddress");
x.t("macaddr","interfaceindex");
x.t("macaddr",".byte");
x.t("macaddr","isresolved");
x.t("macaddr","bool");
x.t("macaddr","readmacaddress");
x.t("macaddr","break");
x.t("isresolved","false");
x.t("isresolved","true");
x.t("isresolved","figure");
x.t("neighboring","node");
x.t("msg_mac_timerexpired","seq_num");
x.t("msg_mac_timerexpired","self");
x.t("msg_mac_timerexpired","mac802_3timertype");
x.t("msg-","eventtype");
x.t("msg-","packet");
x.t("message_returninfo","(msg)");
x.t("ways","mac");
x.t("ways","packet");
x.t("mac802_3sensechannel","node");
x.t("mac802_3sensechannel","sense");
x.t("report","statistics");
x.t("4.5.6.4.1","describes");
x.t("4.5.6.4.1","declare");
x.t("4.5.6.4.1","modifying");
x.t("mac_receivestatuschangenotification","calls");
x.t("mac_receivestatuschangenotification","mac_receivestatuschangenotification");
x.t("potentialincomingpacket","switch");
x.t("potentialincomingpacket","break");
x.t("section","4.5.5.8");
x.t("section","4.5.5.10.5");
x.t("section","illustrate");
x.t("section","4.5.5.9");
x.t("section","lists");
x.t("section","describes");
x.t("section","3.3.2.2");
x.t("section","4.5.6.2.4.1");
x.t("section","4.5.6.2.4.2");
x.t("section","4.5.6.10");
x.t("section","4.5.5.5.1");
x.t("section","explains");
x.t("section","4.5.5.5.2");
x.t("section","4.5.5.5.3");
x.t("section","4.5.5.5.4.1");
x.t("section","4.5.5.5.4.2");
x.t("section","4.5.5.5.4");
x.t("section","4.5.5.5.4.3");
x.t("section","4.5.5.5.4.4");
x.t("section","4.5.6.1");
x.t("section","4.5.6.3");
x.t("section","4.5.5.11.1");
x.t("section","4.5.5.11.2");
x.t("section","5.2.3");
x.t("section","4.5.6.5");
x.t("section","4.5.6.6.1");
x.t("section","4.5.6.6.2");
x.t("section","provides");
x.t("section","4.5.6.6.3");
x.t("section","4.5.4.1");
x.t("section","briefly");
x.t("section","4.5.4.2");
x.t("section","4.5.4.3");
x.t("section","4.5.4.4");
x.t("section","4.5.4.5");
x.t("section","3.4.1");
x.t("section","4.5.6.4.1");
x.t("section","4.5.5.6.1");
x.t("section","3.4.2");
x.t("section","4.5.6.4.2");
x.t("section","4.5.5.6.2");
x.t("section","3.4.3");
x.t("section","4.10");
x.t("section","4.10.5");
x.t("section","4.5.5.10");
x.t("section","gives");
x.t("section","4.5.5.12");
x.t("section","4.5.5.9.1");
x.t("section","4.5.5.13");
x.t("section","4.5.3");
x.t("section","4.5.5.9.2");
x.t("section","4.5.5.9.3");
x.t("section","4.5.5");
x.t("section","4.5.6.2.1");
x.t("section","4.5.6.2.2");
x.t("section","4.5.6.2.3");
x.t("section","4.5.6.2.4");
x.t("section","4.5.5.1");
x.t("section","4.5.5.2");
x.t("section","4.5.5.3");
x.t("section","4.5.5.4");
x.t("section","4.5.5.10.1");
x.t("section","4.5.5.10.2");
x.t("section","describe");
x.t("section","4.5.5.6");
x.t("section","4.5.5.7.1");
x.t("section","4.5.5.10.3");
x.t("section","5.1.4");
x.t("section","4.5.5.7.2");
x.t("section","4.5.5.10.4");
x.t("typedef","enum");
x.t("typedef","struct");
x.t("int64","numframereceived");
x.t("int64","numframelossforcollision");
x.t("int64","numframetransmitted");
x.t("int64","subnetbandwidth");
x.t("int64","bandwidth");
x.t("mac_outputqueueisempty","functions");
x.t("mac_outputqueueisempty","node");
x.t("internal","mac");
x.t("internal","design");
x.t("format","protocol-specific");
x.t("format","mac");
x.t("format","initialize");
x.t("format","step");
x.t("format","identifier");
x.t("format","specifying");
x.t("types","included");
x.t("types","always");
x.t("types","channel");
x.t("types","added");
x.t("types","exchanged");
x.t("types","protocol");
x.t("types","used");
x.t("types","struct");
x.t("compile","section");
x.t("compile","created");
x.t("directory","qualnet_home");
x.t("handling","received");
x.t("handling","packet");
x.t("trace_cbr","trace_myprotcol");
x.t("interframegap","clocktype");
x.t("interframegap","mac802_3getinterframedelay");
x.t("seqnum","initialize");
x.t("seqnum","mac802_3statistics");
x.t("1us","decide");
x.t("keyword","link");
x.t("keyword","configuration");
x.t("keyword","subnet");
x.t("implementing","ieee");
x.t("implementing","csma");
x.t("implementing","address");
x.t("implementing","event");
x.t("implementing","protocol");
x.t("mac802_3getinterframedelay","mac802_3getjamtrdelay");
x.t("mac802_3getinterframedelay","node");
x.t("4.5.5.6.1","describes");
x.t("4.5.5.6.1","mac");
x.t("3.4.2","event");
x.t("4-130","enum");
x.t("4-130","declaring");
x.t("4-130","event");
x.t("declaring","new");
x.t("declaring","initializing");
x.t("declaring","statistics");
x.t("changes","shown");
x.t("changes","void");
x.t("changes","transmitting");
x.t("changes","physical");
x.t("changes","need");
x.t("changes","common");
x.t("changes","4.5.6.6");
x.t("changes","4.5.6.7");
x.t("changes","section");
x.t("changes","transmit");
x.t("properly","later");
x.t("mac_sneakpeekatmacpacket","void");
x.t("mac_sneakpeekatmacpacket","node");
x.t("4.5.6.4.2","describes");
x.t("4.5.6.4.2","csma");
x.t("4.5.6.4.2","write");
x.t("4.5.6.4.2","implementing");
x.t("4.5.6.4.2","modify");
x.t("csma_timer_switch","csma_timer_off");
x.t("node","&mac802addr");
x.t("node","ieee");
x.t("node","mac_iswirednetwork");
x.t("node","indicated");
x.t("node","version");
x.t("node","firstnode");
x.t("node","node\u2019s");
x.t("node","nodeid");
x.t("node","&address");
x.t("node","transmitting");
x.t("node","interface");
x.t("node","mac802_3");
x.t("node","timer");
x.t("node","&node-");
x.t("node","mix");
x.t("node","&srchwaddress");
x.t("node","multiple");
x.t("node","globaladdr");
x.t("node","mac");
x.t("node","interfaceaddress");
x.t("node","initialization");
x.t("node","proper");
x.t("node","&desthwaddr");
x.t("node","status");
x.t("node","4.5.5.5.4.4");
x.t("node","csma-");
x.t("node","initialized");
x.t("node","macdata802_3");
x.t("node","macdatacsma");
x.t("node","csma");
x.t("node","const");
x.t("node","ipv4");
x.t("node","mac_isbroadcasthwaddress");
x.t("node","ipv6");
x.t("node","sends");
x.t("node","address");
x.t("node","int");
x.t("node","started");
x.t("node","receiving");
x.t("node","functions");
x.t("node","interfaceindex");
x.t("node","control");
x.t("node","function");
x.t("node","reporting");
x.t("node","macaddr");
x.t("node","node");
x.t("node","added");
x.t("node","identifier");
x.t("node","mac802_3handlereceivedframe");
x.t("node","macdatamyprotocol");
x.t("node","ids");
x.t("node","level");
x.t("node","completes");
x.t("node","message");
x.t("node","operating");
x.t("node","qualnet");
x.t("node","event");
x.t("node","msg");
x.t("node","node-");
x.t("node","mac_ismyaddress");
x.t("node","macdatadot11");
x.t("node","broadcast");
x.t("node","case");
x.t("node","finalization");
x.t("node","structure");
x.t("node","itself");
x.t("node","&mac802_3-");
x.t("node","packet");
x.t("node","subnet");
x.t("node","macaddnewinterface");
x.t("node","starts");
x.t("node","pointer");
x.t("node","nodeinput");
x.t("node","mac802_3-");
x.t("node","maintains");
x.t("node","subnetaddress");
x.t("node","&desthwaddress");
x.t("switch","(timertype)");
x.t("switch","statement");
x.t("switch","csma-");
x.t("switch","ports");
x.t("switch","connecting");
x.t("switch","macaddr-");
x.t("switch","msg-");
x.t("switch","calling");
x.t("switch","message");
x.t("switch","node-");
x.t("switch","figure");
x.t("qualnet_home","/libraries");
x.t("qualnet_home","/libraries/wireless/src");
x.t("qualnet_home","/main/partition.cpp");
x.t("qualnet_home","/libraries/wireless/src//mac_dot11.cpp");
x.t("qualnet_home","/libraries/wireless/src/phy.cpp");
x.t("qualnet_home","/include/mapping.h");
x.t("qualnet_home","/include/partition.h");
x.t("qualnet_home","/libraries/developer/makefile-common");
x.t("qualnet_home","/main/mac.cpp");
x.t("qualnet_home","/libraries/user_models");
x.t("qualnet_home","/libraries/developer/src/network_ip.h");
x.t("qualnet_home","/libraries/user_models/src");
x.t("qualnet_home","/include/api.h");
x.t("qualnet_home","/main/node.cpp");
x.t("qualnet_home","/include/trace.h");
x.t("qualnet_home","/include/fileio.h");
x.t("qualnet_home","/libraries/developer/src");
x.t("qualnet_home","/include/mac.h");
x.t("qualnet_home","/include/phy.h");
x.t("qualnet_home","/libraries/developer/src/network_ip.cpp");
x.t("qualnet_home","/libraries/wireless/src/mac_dot11-sta.h");
x.t("important","fields");
x.t("important","organize");
x.t("important","free");
x.t("transmission","time");
x.t("transmission","mac");
x.t("transmission","start");
x.t("transmission","frame");
x.t("transmission","function");
x.t("transmission","4.5.4.4");
x.t("transmission","output");
x.t("transmission","packet");
x.t("added","needs");
x.t("added","added");
x.t("added","qualnet");
x.t("added","msg_default");
x.t("added","subnet");
x.t("added","mac_finalize");
x.t("added","mac802_3-");
x.t("calling","myprotocol\u2019s");
x.t("calling","api");
x.t("calling","functions");
x.t("calling","function");
x.t("calling","protocol");
x.t("(addnodetoipv6network)","calls");
x.t("(addnodetoipv6network)","determines");
x.t("(addnodetoipv6network)","initializes");
x.t("(addnodetoipv6network)","node");
x.t("(addnodetoipv6network)","call");
x.t("assigned","interface");
x.t("assigned","mac");
x.t("4.5.5.6.2","describes");
x.t("4.5.5.6.2","mac");
x.t("informs","appropriate");
x.t("4-131","ieee");
x.t("4-131","shows");
x.t("4-131","event");
x.t("msg_mac_transmissionfinished","indicates");
x.t("msg_mac_transmissionfinished","nodes");
x.t("msg_mac_transmissionfinished","station");
x.t("self","timer");
x.t("self","buffer");
x.t("3.4.3","finalization");
x.t("duplex","mode");
x.t("duplex","extra");
x.t("interest","occurs");
x.t("registration","protocol");
x.t("code","ieee");
x.t("code","files");
x.t("code","needs");
x.t("code","various");
x.t("code","mac_processevent");
x.t("code","components");
x.t("code","snippets");
x.t("code","mac");
x.t("code","directly");
x.t("code","csma");
x.t("code","segment");
x.t("code","function");
x.t("code","calling");
x.t("code","fragment");
x.t("code","executes");
x.t("end","lists");
x.t("end","jam");
x.t("end","transmission");
x.t("end","simulation");
x.t("reference","guide");
x.t("steps","writing");
x.t("steps","developing");
x.t("steps","different");
x.t("steps","implementing");
x.t("steps","similar");
x.t("steps","described");
x.t("4.10","instructions");
x.t("organize","code");
x.t("macdatamyprotocol","myprotcol");
x.t("macdatamyprotocol","node-");
x.t("macdatamyprotocol","data");
x.t("identifier","parameter-name");
x.t("identifier","interface");
x.t("identifier","address");
x.t("identifier","index");
x.t("identifier","node");
x.t("identifier","subnet");
x.t("parameter-value","identifier");
x.t("parameter-value","value");
x.t("connected","subnet");
x.t("connected","route");
x.t("setipv6addressinfo","&address");
x.t("error_assert","false");
x.t("invalid","mac");
x.t("task","initialization");
x.t("memset","mac802_3");
x.t("memset","csma");
x.t("memset","mac802_3-");
x.t("mac802_3handlereceivedframe","shown");
x.t("mac802_3handlereceivedframe","calls");
x.t("mac802_3handlereceivedframe","checks");
x.t("mac802_3handlereceivedframe","respectively");
x.t("mac802_3handlereceivedframe","node");
x.t("mac802_3handlereceivedframe","process");
x.t("mac802_3handlereceivedframe","ignores");
x.t("enable","network");
x.t("enable","protocol");
x.t("enable","statistics");
x.t("4-132","shows");
x.t("4-132","assume");
x.t("4-132","delivering");
x.t("/adaptation_aal5.cpp","(developer_srcdir)");
x.t("/mac_arp.cpp","(developer_srcdir)");
x.t("follow","instructions");
x.t("csma_bo_min","csma-");
x.t("correspond","latest");
x.t("notification","mac");
x.t("notification","operation");
x.t("abstract","mac");
x.t("abstract","wireless");
x.t("abstract","switch");
x.t("abstract","satellite");
x.t("abstract","models");
x.t("collision","counter");
x.t("collision","avoidance");
x.t("collision","enable");
x.t("collision","discard");
x.t("collision","mac802_3statistics");
x.t("ids","addresses");
x.t("folder","qualnet_home");
x.t("bool","mac_iswirednetwork");
x.t("bool","promiscuousmode");
x.t("bool","wasinbackoff");
x.t("bool","mac_iswirelessnetwork");
x.t("bool","interfaceisenabled");
x.t("bool","interfacecardfailed");
x.t("bool","isfullduplex");
x.t("bool","ismyaddr");
x.t("bool","isresolved");
x.t("bool","macstats");
x.t("bool","islink");
x.t("bool","isnewinterface");
x.t("bool","isllcenabled");
x.t("bool","fromlink");
x.t("bool","ipv4addresstohwaddress");
x.t("macstats","true");
x.t("macstats","boolean");
x.t("macstats","bool");
x.t("suffered","packet");
x.t("return","else");
x.t("return","seq_num");
x.t("return","csma-");
x.t("return","false");
x.t("return","true");
x.t("return","defaultmac802addresstoipv4address");
x.t("return","mac_variablehwaddresstofourbytemacaddress");
x.t("return","retrieve");
x.t("return","isresolved");
x.t("return","switch");
x.t("return","any_dest");
x.t("return","reversearptablelookup");
x.t("return","figure");
x.t("return","//if//");
x.t("return","correct");
x.t("level","initialization");
x.t("level","dispatcher");
x.t("level","functions");
x.t("processsubnetline","processlinkline");
x.t("processsubnetline","firstnode");
x.t("processsubnetline","input");
x.t("processsubnetline","assigns");
x.t("assigns","ipv4");
x.t("setmacconfigparameter","node");
x.t("sizeof","(macdatacsma)");
x.t("sizeof","(linkdata)");
x.t("sizeof","(csmaheader)");
x.t("sizeof","(macdata802_3)");
x.t("sizeof","unsigned");
x.t("4-133","determining");
x.t("4-133","bool");
x.t("adds","mac");
x.t("adds","header");
x.t("completes","transmission");
x.t("backoff_state","else");
x.t("corrupted","frame");
x.t("statistic","variables");
x.t("statistic","name");
x.t("statistic","collection");
x.t("statistic","value");
x.t("statistic","mac802_3-");
x.t("hierarchically","node");
x.t("csma_status_in_xmiting","csma-");
x.t("csma_status_in_xmiting","message_free");
x.t("expires","indicates");
x.t("non-transmitting","state");
x.t("header","transmits");
x.t("header","files");
x.t("header","source");
x.t("header","file");
x.t("header","sends");
x.t("header","calling");
x.t("header","received");
x.t("header","packet");
x.t("header","delivers");
x.t("message","msgbuffer");
x.t("message","intended");
x.t("message","type");
x.t("message","calls");
x.t("message","unknown");
x.t("message","info");
x.t("message","processed");
x.t("message","processing");
x.t("message","potentialincomingpacket");
x.t("message","types");
x.t("message","switch");
x.t("message","msg");
x.t("message","packet");
x.t("message","buffer");
x.t("message","lan");
x.t("successfully","reset");
x.t("successfully","check");
x.t("successfully","delivered");
x.t("successfully","transmitted");
x.t("mac_notificationofpacketdrop","function");
x.t("mac_notificationofpacketdrop","implementation");
x.t("listening","specified");
x.t("mac_ispointtopointnetwork","function");
x.t("mac_ispointtopointnetwork","return");
x.t("throughout","section");
x.t("given","name");
x.t("given","section");
x.t("operating","promiscuous");
x.t("operating","protocol");
x.t("jamtrdelay","mac802_3getjamtrdelay");
x.t("jamtrdelay","message");
x.t("square","brackets");
x.t("strcmp","macprotocolname");
x.t("strcmp","nodeinput-");
x.t("(numhostbits)","interfaceindex");
x.t("[max_string_length]","char");
x.t("[max_string_length]","sprintf");
x.t("[max_string_length]","ctoa");
x.t("mac_protocol_802_3","interfaceindex");
x.t("mac_protocol_802_3","mac802_3finalize");
x.t("mac_protocol_802_3","node-");
x.t("mac_protocol_802_3","case");
x.t("memory","ieee");
x.t("memory","files");
x.t("memory","state");
x.t("memory","csma");
x.t("memory","message");
x.t("memory","figure");
x.t("100","msg_prop_signalend");
x.t("ready","transmission");
x.t("ready","transmit");
x.t("4-134","implemented");
x.t("4-134","processing");
x.t("maccsmanetworklayerhaspackettosend","calls");
x.t("maccsmanetworklayerhaspackettosend","checks");
x.t("maccsmanetworklayerhaspackettosend","node");
x.t("maccsmanetworklayerhaspackettosend","maccsmanetworklayerhaspackettosend");
x.t("maccsmanetworklayerhaspackettosend","output");
x.t("maccsmanetworklayerhaspackettosend","checkphystatusandsendorbackoff");
x.t("qualnet","protocols");
x.t("qualnet","hints");
x.t("qualnet","needs");
x.t("qualnet","lists");
x.t("qualnet","table");
x.t("qualnet","describes");
x.t("qualnet","tree");
x.t("qualnet","source");
x.t("qualnet","mac");
x.t("qualnet","file");
x.t("qualnet","add");
x.t("qualnet","component");
x.t("qualnet","provides");
x.t("qualnet","simulates");
x.t("qualnet","gui");
x.t("qualnet","steps");
x.t("qualnet","qualnet");
x.t("qualnet","configuration");
x.t("qualnet","hosts");
x.t("qualnet","4.5.1");
x.t("qualnet","4.5");
x.t("qualnet","making");
x.t("qualnet","4.5.5.13");
x.t("qualnet","configure");
x.t("qualnet","protocol");
x.t("qualnet","corresponding");
x.t("qualnet","following");
x.t("qualnet","modify");
x.t("qualnet","user\u2019s");
x.t("e.g","folder");
x.t("e.g","implementation");
x.t("receiveframefn","field");
x.t("receiveframefn","mac");
x.t("receiveframefn","fields");
x.t("receiveframefn","node");
x.t("receiveframefn","pointer");
x.t("receiveframefn","linkedlist");
x.t("variable","example");
x.t("variable","indicates");
x.t("variable","store");
x.t("variable","stores");
x.t("variable","node-");
x.t("variable","mac802_3statistics");
x.t("printed","end");
x.t("mac_maclayeracknowledgement","function");
x.t("mac_maclayeracknowledgement","implementation");
x.t("getmachwaddress","function");
x.t("event","timer");
x.t("event","type");
x.t("event","mac");
x.t("event","indicates");
x.t("event","handler");
x.t("event","corresponds");
x.t("event","dispatcher");
x.t("event","msg_mac_jamsequence");
x.t("event","occurs");
x.t("event","msg_mac_starttransmission");
x.t("event","msg_mac_timerexpired");
x.t("event","types");
x.t("event","msg_mac_transmissionfinished");
x.t("event","occurred");
x.t("event","scheduled");
x.t("&ipv6subnetaddress","ipv6subnetprefixlen");
x.t("mac802_3getsubnetparameters","stores");
x.t("mac802_3getsubnetparameters","section");
x.t("mac802_3getsubnetparameters","node");
x.t("maccsmalayer","calls");
x.t("maccsmalayer","checks");
x.t("maccsmalayer","node");
x.t("maccsmalayer","ignores");
x.t("maccsmalayer","note");
x.t("101","message");
x.t("4-135","shows");
x.t("4-135","processing");
x.t("idle","try");
x.t("idle","previously");
x.t("whose","values");
x.t("4.10.5","integrate");
x.t("message_freelist","node");
x.t("upon","state");
x.t("upon","type");
x.t("enter","backoff");
x.t("trace_csma","hdr");
x.t("trace_csma","mac_handoffsuccessfullyreceivedpacket");
x.t("//switch//","figure");
x.t("machwaddr","mac");
x.t("machwaddr","bool");
x.t("machwaddr","&hdr-");
x.t("phy_stoplisteningtochannel","function");
x.t("made","part");
x.t("made","mac_networklayerhaspackettosend");
x.t("mac_tdma.cpp","files");
x.t("nextsubnetstring","currentline");
x.t("ipv6subnetprefixlen","&subnetdata-");
x.t("node-","globalseed");
x.t("node-","nodeid");
x.t("node-","numberinterfaces");
x.t("node-","macdata");
x.t("null","frame");
x.t("null","info");
x.t("null","csma-");
x.t("null","initialize");
x.t("null","memset");
x.t("null","mac802_3init");
x.t("msg","else");
x.t("msg","nodeaddress");
x.t("msg","&srchwaddress");
x.t("msg","&srchwaddr");
x.t("msg","seq_num");
x.t("msg","machwaddress");
x.t("msg","macheadervlantag");
x.t("msg","printf");
x.t("msg","&desthwaddr");
x.t("msg","csma-");
x.t("msg","macdata802_3");
x.t("msg","false");
x.t("msg","int");
x.t("msg","retrieve");
x.t("msg","sizeof");
x.t("msg","return");
x.t("msg","null");
x.t("msg","figure");
x.t("msg","mac802_3convertframeintopacket");
x.t("msg","hdr-");
x.t("msg","break");
x.t("msg","mac802_3-");
x.t("msg","containing");
x.t("msg","&taginfo");
x.t("msg","srcaddr");
x.t("mac_protocol_link","macaddr");
x.t("mac_protocol_link","node-");
x.t("mac_address_default_length","ipv4addresstodefaulthwaddress");
x.t("any_dest","else");
x.t("any_dest","mac");
x.t("any_dest","interfaceindex");
x.t("occurred","api");
x.t("msg_default","10000");
x.t("msg_default","event");
x.t("msg_default","otherwise");
x.t("mac802_3trytosendnextframe","node");
x.t("4-136","performs");
x.t("4-136","handling");
x.t("faced","int64");
x.t("existing","library");
x.t("existing","802.3");
x.t("and/or","ipv6");
x.t("yield","timer");
x.t("destaddr","convertvariablehwaddressto802address");
x.t("destaddr","csma-");
x.t("destaddr","mac_ismyaddress");
x.t("destaddr","message_free");
x.t("convert802addresstovariablehwaddress","node");
x.t("maccsmahandlepromiscuousmode","node");
x.t("layers","prototypes");
x.t("layers","section");
x.t("layers","calling");
x.t("layers","qualnet");
x.t("layers","mac_maclayeracknowledgement");
x.t("layers","event");
x.t("layers","myprotocol");
x.t("layers","protocol");
x.t("phy_starttransmittingsignal","function");
x.t("phy_starttransmittingsignal","node");
x.t("phy_starttransmittingsignal","send");
x.t("mac_ismyaddress","overloaded");
x.t("mac_ismyaddress","node");
x.t("include","statement");
x.t("include","network_ip.h");
x.t("include","stdlib.h");
x.t("include","api.h");
x.t("include","mac.h");
x.t("include","protocol\u2019s");
x.t("include","partition.h");
x.t("include","standard");
x.t("include","switch");
x.t("include","code");
x.t("include","statistic");
x.t("include","string.h");
x.t("include","information");
x.t("include","routing");
x.t("include","protocol");
x.t("include","packet");
x.t("include","following");
x.t("include","stdio.h");
x.t("include","mac_myprotocol.h");
x.t("configuration","file");
x.t("configuration","parameters");
x.t("configuration","function");
x.t("configuration","specifies");
x.t("configuration","format");
x.t("configuration","(.config)");
x.t("trace_undefined","trace_tcp");
x.t("backoffwindow","mac802_3_min_backoff_window");
x.t("backoffwindow","int");
x.t("instances","parameter");
x.t("instances","parameter-value");
x.t("networkupdateforwardingtable","add");
x.t("networkupdateforwardingtable","node");
x.t("(6-byte)","mac");
x.t("mac-address-config-file","&retval");
x.t("fragment","mac_processevent");
x.t("4-137","initializing");
x.t("4-137","initializes");
x.t("sources","developer_srcs");
x.t("macdatadot11","node-");
x.t("mac_isbroadcastmac802address","&hdr-");
x.t("running","layer");
x.t("running","interface");
x.t("running","different");
x.t("running","specific");
x.t("main","data");
x.t("main","structure");
x.t("mac_protocol_cellular","mac_protocol_ane");
x.t("mac_protocol_cellular","message_freelist");
x.t("similar","manner");
x.t("similar","node");
x.t("similar","steps");
x.t("similar","adding");
x.t("additional","event");
x.t("additional","protocol");
x.t("hosts","operating");
x.t("mac802_3fullduplexstatistics","fulldupstats");
x.t("value","calls");
x.t("value","during");
x.t("value","numframetransmitted");
x.t("value","used");
x.t("[i]","link");
x.t("[i]","char");
x.t("[i]","subnet");
x.t("configures","hardware");
x.t("allocate","memory");
x.t("reversearptablelookup","node");
x.t("interacts","physical");
x.t("interacts","network");
x.t("4.5.5.10","4.5.6.8");
x.t("4.5.5.10","collecting");
x.t("4-138","static");
x.t("4-138","updating");
x.t("csmatimer","timer");
x.t("figure","4-120");
x.t("figure","4-121");
x.t("figure","4-122");
x.t("figure","4-123");
x.t("figure","4-124");
x.t("figure","4-125");
x.t("figure","4-1");
x.t("figure","4-126");
x.t("figure","4-127");
x.t("figure","4-128");
x.t("figure","4-129");
x.t("figure","4-140");
x.t("figure","4-141");
x.t("figure","4-142");
x.t("figure","4-143");
x.t("figure","4-144");
x.t("figure","4-145");
x.t("figure","4-146");
x.t("figure","4-147");
x.t("figure","4-148");
x.t("figure","4-149");
x.t("figure","4-118");
x.t("figure","4-119");
x.t("figure","4-130");
x.t("figure","4-131");
x.t("figure","4-132");
x.t("figure","4-133");
x.t("figure","4-134");
x.t("figure","4-135");
x.t("figure","4-136");
x.t("figure","4-137");
x.t("figure","4-138");
x.t("figure","4-139");
x.t("figure","4-150");
x.t("figure","4-151");
x.t("figure","4-152");
x.t("figure","4-153");
x.t("figure","4-154");
x.t("gives","detailed");
x.t("4.5.1","mac");
x.t("developer","library");
x.t("developer","abstract-mac");
x.t("developer","switched-ethernet");
x.t("developer","mac802.15.4");
x.t("several","apis");
x.t("several","macros");
x.t("several","functions");
x.t("implementation","ieee");
x.t("implementation","provide");
x.t("implementation","mac_csma.h");
x.t("implementation","mac_802_3.h");
x.t("implementation","functions");
x.t("implementation","code");
x.t("implementation","4.5.5.2");
x.t("specific","interface");
x.t("specific","node");
x.t("specific","priority");
x.t("send","packets");
x.t("send","mac");
x.t("send","checks");
x.t("send","frame");
x.t("send","mac_networklayerhaspackettosend");
x.t("send","next");
x.t("send","function");
x.t("send","receive");
x.t("send","message");
x.t("send","output");
x.t("send","packet");
x.t("send","station");
x.t("prototype","initialization");
x.t("prototype","functions");
x.t("prototype","finalization");
x.t("activating","library");
x.t("already","exist");
x.t("constant","definitions");
x.t("declaration","ieee");
x.t("declaration","applies");
x.t("declaration","macdata802_3");
x.t("declaration","csma");
x.t("declaration","applicable");
x.t("declaration","mac802_3statistics");
x.t("islink","false");
x.t("islink","true");
x.t("variablenames","[i]");
x.t("message_getprotocol","(msg)");
x.t("free","memory");
x.t("4-139","calls");
x.t("4-139","function");
x.t("4.5.5.11","finalization");
x.t("randomseed","seed");
x.t("depending","upon");
x.t("originate","mac");
x.t("4.5","mac");
x.t("stp","spanning");
x.t("4.5.2","mac");
x.t("/libraries/developer/src/network_ip.h","file");
x.t("/libraries/developer/src/network_ip.h","include");
x.t("macdata","csma-");
x.t("macdata","mymacdata");
x.t("macdata","[interfaceindex]");
x.t("macdata","main");
x.t("macdata","data");
x.t("macdata","mac_protocol");
x.t("view","top");
x.t("broadcast","network");
x.t("broadcast","address");
x.t("broadcast","packet");
x.t("process","physical");
x.t("process","wired");
x.t("process","wireless");
x.t("process","indicate");
x.t("process","outgoing");
x.t("process","message");
x.t("process","received");
x.t("process","incoming");
x.t("process","packet");
x.t("process","adding");
x.t("process","performed");
x.t("deliver","physical");
x.t("deliver","packets");
x.t("deliver","control");
x.t("deliver","packet");
x.t("4.5.5.12","4.5.6.10");
x.t("4.5.5.12","protocol");
x.t("4.5.5.12","including");
x.t("compilation","process");
x.t("macmyprotocolfinalize","node");
x.t("macmyprotocolfinalize","additional");
x.t("macmyprotocolfinalize","finalization");
x.t("macmyprotocolfinalize","print");
x.t("macmyprotocolfinalize","statistics");
x.t("trace_udp","trace_ip");
x.t("valuen","param1");
x.t("valuen","values");
x.t("forwarding","table");
x.t("//inline//","void");
x.t("//inline//","addnodetosubnet");
x.t("//inline//","addnodetoipv6network");
x.t("isnewinterface","short");
x.t("isnewinterface","int");
x.t("isnewinterface","setipv6addressinfo");
x.t("isnewinterface","strcmp");
x.t("isnewinterface","bandwidth");
x.t("io_readcachedfile","node");
x.t("mac802_3getneighborinfo","node");
x.t("mac802_3getneighborinfo","figure");
x.t("transmitted","number");
x.t("transmitted","neighboring");
x.t("transmitted","buf1");
x.t("transmitted","packet");
x.t("satellite","model");
x.t("mac802_3convertframeintopacket","remove");
x.t("mac802_3convertframeintopacket","node");
x.t("making","changes");
x.t("pktsgotbroadcast","mac_ismyaddress");
x.t("pktsgotbroadcast","csmatimer");
x.t("pktsgotbroadcast","random_setseed");
x.t("4-150","notifying");
x.t("4-150","function");
x.t("//if//","static");
x.t("//if//","switch");
x.t("//if//","figure");
x.t("generate","receive");
x.t("models","ieee");
x.t("models","time");
x.t("models","multiple");
x.t("models","aloha");
x.t("models","gsm");
x.t("models","switch");
x.t("models","abstract");
x.t("models","qualnet");
x.t("models","made");
x.t("models","lte");
x.t("models","carrier");
x.t("models","model");
x.t("models","comprise");
x.t("services","physical");
x.t("systems","select");
x.t("mac802.16","models");
x.t("read","user-specified");
x.t("read","user");
x.t("read","protocol\u2019s");
x.t("read","input");
x.t("read","store");
x.t("read","message");
x.t("read","protocol");
x.t("4.5.3","example");
x.t("4.5.3","mac");
x.t("propdelay","subnetpropdelay");
x.t("propdelay","bool");
x.t("propdelay","variable");
x.t("although","working");
x.t("myprotocol","supports");
x.t("myprotocol","example");
x.t("myprotocol","shown");
x.t("myprotocol","void");
x.t("myprotocol","uses");
x.t("myprotocol","wired");
x.t("myprotocol","list");
x.t("myprotocol","initialization");
x.t("myprotocol","specified");
x.t("myprotocol","macmyprotocolreceivepacketfromphy");
x.t("myprotocol","param1");
x.t("myprotocol","wireless");
x.t("myprotocol","string");
x.t("myprotocol","write");
x.t("myprotocol","macmyprotocolnetworklayerhaspackettosend");
x.t("myprotocol","function");
x.t("myprotocol","receive");
x.t("myprotocol","section");
x.t("myprotocol","strcmp");
x.t("myprotocol","qualnet");
x.t("myprotocol","node-");
x.t("myprotocol","running");
x.t("myprotocol","macmyprotocolfinalize");
x.t("myprotocol","runs");
x.t("myprotocol","value1");
x.t("myprotocol","done");
x.t("myprotocol","modify");
x.t("myprotocol","names");
x.t("pointers","mac");
x.t("pointers","collect");
x.t("pointers","section");
x.t("pointers","send");
x.t("pointers","newly");
x.t("pointers","sendframefn");
x.t("runs","example");
x.t("runs","write");
x.t("runs","modify");
x.t("4.5.5.9.1","state");
x.t("4.5.5.9.1","mac");
x.t("4.5.5.9.1","write");
x.t("4.5.5.9.1","processing");
x.t("4.5.5.13","integrating");
x.t("4.5.5.13","4.5.5.1");
x.t("/libraries/user_models/src","name");
x.t("takes","place");
x.t("takes","appropriate");
x.t("(macdata802_3)","memset");
x.t("(macdata802_3)","mac802_3-");
x.t("mac802_3timertype","timertype");
x.t("considered","wired");
x.t("stats.numbackofffaced","mac802_3-");
x.t("stats.numframelossforcollision","figure");
x.t("template","mac802_3finalize");
x.t("makefile-common","library");
x.t("makefile-common","created");
x.t("abort","//switch//");
x.t("abort","break");
x.t("4-151","implemented");
x.t("4-151","processing");
x.t("transfer","data");
x.t("mac802.15.4","mac_settwobytemacaddress");
x.t("mac802.15.4","models");
x.t("output","files");
x.t("output","queue");
x.t("mac_protocol_csma","maccsmainit");
x.t("mac_protocol_csma","maccsmareceivepacketfromphy");
x.t("mac_protocol_csma","interfaceindex");
x.t("mac_protocol_csma","maccsmanetworklayerhaspackettosend");
x.t("mac_protocol_csma","maccsmalayer");
x.t("mac_protocol_csma","node-");
x.t("mac_protocol_csma","maccsmareceivephystatuschangenotification");
x.t("mac_protocol_csma","mac_protocol_fcsc_csma");
x.t("randfault","//ptr");
x.t("4.5.4","mac");
x.t("4.5.5.9.2","mac");
x.t("4.5.5.9.2","processing");
x.t("4.5.5.9.2","include");
x.t("dynamic","statistics");
x.t("mac_myprotocol.cpp","contain");
x.t("mac_myprotocol.cpp","strongly");
x.t("mac_myprotocol.cpp","constant");
x.t("separate","header");
x.t("string.h","include");
x.t("nodes","parameter-name");
x.t("nodes","network");
x.t("nodes","delay");
x.t("nodes","fewer");
x.t("nodes","connected");
x.t("nodes","subnet");
x.t("trace_tcp","trace_udp");
x.t("specifying","mac");
x.t("specifying","new");
x.t("applicable","enclosed");
x.t("experiment","section");
x.t("//base","address");
x.t("schedule","timers");
x.t("belonging","protocol");
x.t("sequence","number");
x.t("sequence","transmitted");
x.t("arrival","incoming");
x.t("runt","frame");
x.t("mac802_3printstats","shown");
x.t("mac802_3printstats","node");
x.t("/mobility_placement.cpp","(developer_srcdir)");
x.t("phy","layer");
x.t("phy","phystatus");
x.t("4-152","sending");
x.t("4-152","dequeues");
x.t("data","rate");
x.t("data","structures");
x.t("data","types");
x.t("data","structure");
x.t("data","across");
x.t("data","portion");
x.t("sensor","networks");
x.t("/include/api.h","file");
x.t("/include/api.h","section");
x.t("/include/api.h","include");
x.t("/include/api.h","protocol");
x.t("information","create");
x.t("information","instance");
x.t("information","node\u2019s");
x.t("information","interface");
x.t("information","mac");
x.t("information","may");
x.t("information","nodes");
x.t("information","protocol");
x.t("information","subnet");
x.t("information","operations");
x.t("attached","network");
x.t("4.5.5","steps");
x.t("4.5.5","adding");
x.t("correct","network");
x.t("typical","protocol");
x.t("facilitate","tracing");
x.t("optional","included");
x.t("value1","paramn");
x.t("value1","valuen");
x.t("configure","mac");
x.t("configure","protocol");
x.t("tla=","nla=");
x.t("mymacdata-","phynumber");
x.t("mymacdata-","interfaceindex");
x.t("mymacdata-","receiveframefn");
x.t("mymacdata-","macvar");
x.t("mymacdata-","bandwidth");
x.t("node_processevent","calls");
x.t("node_processevent","defined");
x.t("/main/node.cpp","event");
x.t("4.5.5.9.3","sending");
x.t("4.5.5.9.3","wireless");
x.t("4.5.5.9.3","4.5.5.9.1");
x.t("discard","runt");
x.t("4.5.6.2.1","determining");
x.t("4.5.6.2.1","call");
x.t("maccsmareceivephystatuschangenotification","shown");
x.t("maccsmareceivephystatuschangenotification","mac_receivephystatuschangenotification");
x.t("maccsmareceivephystatuschangenotification","csma");
x.t("maccsmareceivephystatuschangenotification","node");
x.t("4-153","checks");
x.t("4-153","processing");
x.t("besides","different");
x.t("besides","transporting");
x.t("faults","switches");
x.t("802.11e","mac");
x.t("defined","mac_csma.h");
x.t("defined","mac_802_3.h");
x.t("defined","mac.h");
x.t("defined","protocol\u2019s");
x.t("defined","scenario");
x.t("defined","qualnet_home");
x.t("defined","structure");
x.t("defined","following");
x.t("defined","mac.cpp");
x.t("received","events");
x.t("received","physical");
x.t("received","packets");
x.t("received","acknowledgement");
x.t("received","frame");
x.t("received","network");
x.t("received","number");
x.t("received","corrupted");
x.t("received","successfully");
x.t("received","event");
x.t("received","figure");
x.t("received","buf1");
x.t("received","packet");
x.t("received","station");
x.t("phy_startlisteningtochannel","function");
x.t("appropriate","recommend");
x.t("appropriate","action");
x.t("appropriate","protocol-specific");
x.t("appropriate","state");
x.t("appropriate","mac");
x.t("appropriate","actions");
x.t("appropriate","function");
x.t("appropriate","section");
x.t("appropriate","data");
x.t("appropriate","subsection");
x.t("examples","mac_802_3.h");
x.t("/include/trace.h","example");
x.t("error_reporterror","(errorstr)");
x.t("readmacaddress","ipaddr");
x.t("newly","created");
x.t("link-","mymacdata");
x.t("exchanged","simulation");
x.t("ignores","event");
x.t("ignores","received");
x.t("stats.numframetransmitted","figure");
x.t("stats.numframetransmitted","buf1");
x.t("stats.numframetransmitted","mac802_3-");
x.t("4.5.6","adding");
x.t("subsection","section");
x.t("4.5.6.2.2","calling");
x.t("4.5.6.2.2","call");
x.t("timeout","event");
x.t("hdr-","sourceaddr");
x.t("hdr-","destaddr");
x.t("hdr-","priority");
x.t("4-154","resets");
x.t("4-154","processing");
x.t("mac802.3","automatically");
x.t("mac802.3","models");
x.t("mac802.3","==0");
x.t("mac802.3","nodesinsubnet");
x.t("/include/fileio.h","file");
x.t("/include/fileio.h","requires");
x.t("/libraries/developer/src","library");
x.t("/libraries/developer/src","implement");
x.t("/libraries/developer/src","however");
x.t("/libraries/developer/src","qualnet_home");
x.t("/libraries/developer/src","code");
x.t("/libraries/developer/src","folders");
x.t("finalization","functions");
x.t("finalization","function");
x.t("finalization","step");
x.t("finalization","finalization");
x.t("propagation","ieee");
x.t("propagation","delay");
x.t("utility","apis");
x.t("collecting","reporting");
x.t("collecting","statistics");
x.t("values","observed");
x.t("values","slot");
x.t("values","parameters");
x.t("values","[i]");
x.t("values","protocol");
x.t("routing","information");
x.t("generation","function");
x.t("ipaddr","macaddrconfigured");
x.t("readinterfacemacaddress","node");
x.t("backoff","flag");
x.t("backoff","state");
x.t("backoff","timer");
x.t("backoff","window");
x.t("backoff","parameters");
x.t("backoff","faced");
x.t("backoff","int32");
x.t("backoff","mac802_3-");
x.t("case","csma_status_passive");
x.t("case","mac_protocol_dot11");
x.t("case","mac_802_3_timersendpacket");
x.t("case","mac_802_3_channelidle");
x.t("case","csma_status_carrier_sense");
x.t("case","mac_protocol_ces_wintgbs");
x.t("case","it's");
x.t("case","csma_timer_backoff");
x.t("case","csma_status_backoff");
x.t("case","hw_node_id");
x.t("case","msg_mac_jamsequence");
x.t("case","msg_mac_starttransmission");
x.t("case","msg_mac_timerexpired");
x.t("case","switch");
x.t("case","msg_mac_transmissionfinished");
x.t("case","mac_protocol_802_3");
x.t("case","maccsmalayer");
x.t("case","mac_protocol_link");
x.t("case","mac_protocol_csma");
x.t("case","mac_protocol_myprotocol");
x.t("case","csma_status_yield");
x.t("case","ipv4_linkaddress");
x.t("case","hw_type_ether");
x.t("case","mac_protocol_aloha");
x.t("case","csma_timer_yield");
x.t("int32","numbackofffaced");
x.t("int32","pktssentbroadcast");
x.t("int32","status");
x.t("int32","bomin");
x.t("int32","botimes");
x.t("int32","pktssentunicast");
x.t("int32","pktstosend");
x.t("int32","pktslostoverflow");
x.t("int32","pktsgotbroadcast");
x.t("int32","bomax");
x.t("int32","pktsgotunicast");
x.t("4.5.6.2.3","initializing");
x.t("4.5.6.2.3","myprotocol");
x.t("timer.seq","assert");
x.t("timer.seq","csma-");
x.t("lte","layer");
x.t("lte","mac802.3");
x.t("specification","qos");
x.t("specification","advanced");
x.t("specification","addition");
x.t("specification","phy-model");
x.t("specification","developer");
x.t("specification","sensor");
x.t("specification","optional");
x.t("specification","802.11");
x.t("/include/mac.h","file");
x.t("/include/mac.h","section");
x.t("/include/mac.h","include");
x.t("structure","ieee");
x.t("structure","included");
x.t("structure","void");
x.t("structure","uses");
x.t("structure","interface");
x.t("structure","mac");
x.t("structure","machwaddress");
x.t("structure","short");
x.t("structure","macdata802_3");
x.t("structure","macdatacsma");
x.t("structure","csma");
x.t("structure","prototypes");
x.t("structure","explained");
x.t("structure","calculate");
x.t("structure","hold");
x.t("structure","function");
x.t("structure","macprotocol");
x.t("structure","stores");
x.t("structure","node");
x.t("structure","macdatamyprotocol");
x.t("structure","constant");
x.t("structure","myprotocol");
x.t("structure","defined");
x.t("structure","structure");
x.t("structure","mac802_3stationstate");
x.t("structure","used");
x.t("structure","definitions");
x.t("structure","4.5.5.5");
x.t("mac_protocol_mpls","node-");
x.t("mac_protocol_mpls","mac_protocol_csma");
x.t("mac_protocol_abstract","mac_protocol_cellular");
x.t("mac_protocol_anodr","mac_protocol_802_15_4");
x.t("mac_protocol_none","last");
x.t("mplsvar","machasframetosendfn");
x.t("mplsvar","null");
x.t("dequeues","specific");
x.t("dequeues","packet");
x.t("notifies","mac");
x.t("notifies","upper");
x.t("notifies","network");
x.t("described","section");
x.t("described","above");
x.t("described","detail");
x.t("print","protocol\u2019s");
x.t("print","string");
x.t("print","protocol");
x.t("print","statistics");
x.t("called","mac");
x.t("called","simulator");
x.t("called","src");
x.t("called","user_models");
x.t("called","hierarchically");
x.t("called","myprotocol");
x.t("called","mac_myprotocol.cpp");
x.t("called","print");
x.t("called","mac_myprotocol.h");
x.t("mac_protocol_myprotocol","macmyprotocolinit");
x.t("mac_protocol_myprotocol","macmyprotocolreceivepacketfromphy");
x.t("mac_protocol_myprotocol","macmyprotocolreceivephystatuschangenotification");
x.t("mac_protocol_myprotocol","macmyprotocolnetworklayerhaspackettosend");
x.t("mac_protocol_myprotocol","node-");
x.t("mac_protocol_myprotocol","macmyprotocolfinalize");
x.t("mac_protocol_myprotocol","case");
x.t("mac_protocol_myprotocol","mac_protocol_none");
x.t("mac_protocol_myprotocol","mac_protocol");
x.t("mac_protocol_myprotocol","macmyprotocollayer");
x.t("above","mac-protocol");
x.t("above","declaration");
x.t("4-byte","mac");
x.t("retransmit","packet");
x.t("4.5.6.2.4","implementing");
x.t("4.5.6.2.4","protocol");
x.t("4.5.6.2.4","statistics");
x.t("checkphystatusandsendorbackoff","shown");
x.t("checkphystatusandsendorbackoff","timer");
x.t("checkphystatusandsendorbackoff","calls");
x.t("checkphystatusandsendorbackoff","checks");
x.t("checkphystatusandsendorbackoff","function");
x.t("checkphystatusandsendorbackoff","node");
x.t("protocol","states");
x.t("protocol","parameter");
x.t("protocol","available");
x.t("protocol","library");
x.t("protocol","provide");
x.t("protocol","mac802_3networklayerhaspackettosend");
x.t("protocol","just");
x.t("protocol","receives");
x.t("protocol","multimedia");
x.t("protocol","implement");
x.t("protocol","resides");
x.t("protocol","files");
x.t("protocol","description");
x.t("protocol","refer");
x.t("protocol","user-specified");
x.t("protocol","layer");
x.t("protocol","source");
x.t("protocol","discussed");
x.t("protocol","implemented");
x.t("protocol","mac_tdma.h");
x.t("protocol","drops");
x.t("protocol","macmyprotocolinit");
x.t("protocol","state");
x.t("protocol","interface");
x.t("protocol","calculates");
x.t("protocol","physical");
x.t("protocol","type");
x.t("protocol","wired");
x.t("protocol","addnodetosubnet");
x.t("protocol","4.5.5.5.1");
x.t("protocol","4.5.5.5.2");
x.t("protocol","checks");
x.t("protocol","mac");
x.t("protocol","indirectly");
x.t("protocol","list");
x.t("protocol","initialization");
x.t("protocol","status");
x.t("protocol","add");
x.t("protocol","initialized");
x.t("protocol","macdatacsma");
x.t("protocol","depends");
x.t("protocol","desired");
x.t("protocol","requires");
x.t("protocol","specified");
x.t("protocol","creating");
x.t("protocol","name");
x.t("protocol","wireless");
x.t("protocol","initialize");
x.t("protocol","handles");
x.t("protocol","parameters");
x.t("protocol","programmer");
x.t("protocol","checking");
x.t("protocol","place");
x.t("protocol","stack");
x.t("protocol","explained");
x.t("protocol","string");
x.t("protocol","understand");
x.t("protocol","umts");
x.t("protocol","functions");
x.t("protocol","supported");
x.t("protocol","configured");
x.t("protocol","keeping");
x.t("protocol","cellular");
x.t("protocol","life");
x.t("protocol","gui");
x.t("protocol","commonly");
x.t("protocol","implements");
x.t("protocol","function");
x.t("protocol","different");
x.t("protocol","may");
x.t("protocol","section");
x.t("protocol","handling");
x.t("protocol","typedef");
x.t("protocol","changes");
x.t("protocol","added");
x.t("protocol","calling");
x.t("protocol","node");
x.t("protocol","mac_notificationofpacketdrop");
x.t("protocol","header");
x.t("protocol","ready");
x.t("protocol","qualnet");
x.t("protocol","event");
x.t("protocol","maccsmalayer");
x.t("protocol","existing");
x.t("protocol","configuration");
x.t("protocol","include");
x.t("protocol","running");
x.t("protocol","similar");
x.t("protocol","interacts");
x.t("protocol","implementation");
x.t("protocol","declaration");
x.t("protocol","prototype");
x.t("protocol","message_getprotocol");
x.t("protocol","macmyprotocolfinalize");
x.t("protocol","models");
x.t("protocol","although");
x.t("protocol","myprotocol");
x.t("protocol","takes");
x.t("protocol","output");
x.t("protocol","data");
x.t("protocol","4.5.6.2.1");
x.t("protocol","received");
x.t("protocol","appropriate");
x.t("protocol","finalization");
x.t("protocol","called");
x.t("protocol","structure");
x.t("protocol","dequeues");
x.t("protocol","packet");
x.t("protocol","used");
x.t("protocol","model");
x.t("protocol","understanding");
x.t("protocol","statistics");
x.t("protocol","maintains");
x.t("protocol","4.5.5.10.1");
x.t("protocol","point-to-point");
x.t("protocol","mac802_3init");
x.t("protocol","satellites");
x.t("protocol","macmyprotocollayer");
x.t("protocol","delivers");
x.t("protocol","specify");
x.t("incorporated","mac");
x.t("sense","response");
x.t("sense","multiple");
x.t("sense","channel");
x.t("802.11","mac");
x.t("note","once");
x.t("note","partial");
x.t("note","besides");
x.t("note","pointer");
x.t("mac_protocol","shown");
x.t("mac_protocol","enumeration");
x.t("mac_protocol","macprotocol");
x.t("mac_protocol","figure");
x.t("mac_protocol","macdata");
x.t("mac_protocol","defined");
x.t("macvar","void");
x.t("macvar","destination");
x.t("macvar","int");
x.t("macvar","switch");
x.t("macvar","node-");
x.t("macvar","packet");
x.t("macvar","pointer");
x.t("macvar","break");
x.t("macvar","mac802_3-");
x.t("macvar","oldphystatus");
x.t("isllcenabled","bool");
x.t("priority","csmaheader");
x.t("priority","phy_starttransmittingsignal");
x.t("priority","priority");
x.t("priority","packet");
x.t("two","files");
x.t("two","subnet");
x.t("trace_myprotocol","traceprotocoltype");
x.t("subnet-propagation-delay","1us");
x.t("fromlink","false");
x.t("fromlink","(fromlink)");
x.t("done","ieee");
x.t("done","ipv4");
x.t("done","protocol");
x.t("otherwise","program");
x.t("otherwise","macconfigurehwaddress");
x.t("otherwise","simulator");
x.t("==0","strcmp");
x.t("transmit","packets");
x.t("transmit","new");
x.t("transmit","frame");
x.t("transmit","packet");
x.t("message/event","description");
x.t("event/message","types");
x.t("(ismyaddr)","frame");
x.t("buf1","io_printstat");
x.t("buf1","sprintf");
x.t("buf1","[max_string_length]");
x.t("executes","during");
x.t("macdot11networklayerhaspackettosend","node");
x.t("based","mac");
x.t("based","name");
x.t("inform","mac");
x.t("inform","network");
x.t("phy_settransmissionchannel","function");
x.t("&interfaceindex","nodeinput");
x.t("in6_addr","globaladdr");
x.t("in6_addr","subnetaddr");
x.t("mac-link-11","strcmp");
x.t("work","correctly");
x.t("correctly","indicate");
x.t("correctly","msg_mac_myprotocol_newevent1");
x.t("itself","files");
x.t("ctoa","mac802_3-");
x.t("bomax","csma_bo_max");
x.t("bomax","maximum");
x.t("carrier","sense");
x.t("d_uint32","macprotocoldynamic");
x.t("macprotocoldynamic","int");
x.t("//ptr","background");
x.t("//ptr","random");
x.t("packet","available");
x.t("packet","else");
x.t("packet","shown");
x.t("packet","static");
x.t("packet","node\u2019s");
x.t("packet","addressed");
x.t("packet","convertvariablehwaddressto802address");
x.t("packet","schedules");
x.t("packet","physical");
x.t("packet","timer");
x.t("packet","trace");
x.t("packet","time");
x.t("packet","calls");
x.t("packet","mac");
x.t("packet","queue");
x.t("packet","machwaddress");
x.t("packet","upper");
x.t("packet","maccsmareceivepacketfromphy");
x.t("packet","network");
x.t("packet","mac_interfaceisenabled");
x.t("packet","handler");
x.t("packet","sends");
x.t("packet","phynumber");
x.t("packet","maximum");
x.t("packet","function");
x.t("packet","may");
x.t("packet","processes");
x.t("packet","section");
x.t("packet","switch");
x.t("packet","node");
x.t("packet","calling");
x.t("packet","transmission");
x.t("packet","return");
x.t("packet","adds");
x.t("packet","successfully");
x.t("packet","ready");
x.t("packet","send");
x.t("packet","deliver");
x.t("packet","output");
x.t("packet","4.5.5.9.2");
x.t("packet","4.5.5.9.3");
x.t("packet","received");
x.t("packet","case");
x.t("packet","packet");
x.t("packet","break");
x.t("packet","dropped");
x.t("packet","arrived");
x.t("packet","buffer");
x.t("packet","delivers");
x.t("packet","sent");
x.t("call","myprotocol\u2019s");
x.t("call","macconfigurehwaddress");
x.t("call","mac");
x.t("call","protocol\u2019s");
x.t("call","protocol's");
x.t("call","function");
x.t("call","myprotocol");
x.t("call","appropriate");
x.t("call","finalization");
x.t("call","protocol");
x.t("call","translation");
x.t("incoming","packets");
x.t("incoming","packet");
x.t("mac802_3stationstate","enumeration");
x.t("mac802_3stationstate","stationstate");
x.t("numhostbits","char");
x.t("numhostbits","&ipv6subnetaddress");
x.t("numhostbits","&interfaceindex");
x.t("sla","error_reporterror");
x.t("created","files");
x.t("created","instance");
x.t("created","new");
x.t("created","model");
x.t("(int)","mac802_3-");
x.t("&mac802_3-","neighborlist");
x.t("reached","mac");
x.t("mac_dot11-sta.h","function");
x.t("recompile","qualnet");
x.t("struct_mac_csma_str","macdata");
x.t("ld.\\n","node-");
x.t("run","different");
x.t("corresponding","model");
x.t("model","library");
x.t("model","implement");
x.t("model","files");
x.t("model","interface");
x.t("model","specified");
x.t("model","direct");
x.t("model","signal");
x.t("model","detailed");
x.t("model","considered");
x.t("model","makefile-common");
x.t("model","finalize");
x.t("links","developer");
x.t("subnet","ieee");
x.t("subnet","else");
x.t("subnet","multimedia");
x.t("subnet","static");
x.t("subnet","interface");
x.t("subnet","calls");
x.t("subnet","link");
x.t("subnet","wireless");
x.t("subnet","mac_initialize");
x.t("subnet","means");
x.t("subnet","function");
x.t("subnet","keyword");
x.t("subnet","identifier");
x.t("subnet","configuration");
x.t("subnet","data");
x.t("subnet","tla=");
x.t("subnet","4.5.6.2.3");
x.t("subnet","model");
x.t("subnet","macaddnewinterface");
x.t("subnet","occur");
x.t("subnet","nodesinsubnet");
x.t("umts-layer2","umts");
x.t("umts-layer2","models");
x.t("relevant","mac");
x.t("following","statements");
x.t("following","mac802_3networklayerhaspackettosend");
x.t("following","events");
x.t("following","statement");
x.t("following","list");
x.t("following","tasks");
x.t("following","parameters");
x.t("following","prototypes");
x.t("following","functions");
x.t("following","ways");
x.t("following","format");
x.t("following","header");
x.t("following","include");
x.t("following","configuration");
x.t("following","data");
x.t("following","packet");
x.t("following","folders");
x.t("/include/phy.h","file");
x.t("/include/phy.h","functions");
x.t("mac_802_3.cpp","files");
x.t("mac_802_3.cpp","every");
x.t("mac_802_3.cpp","static");
x.t("mac_802_3.cpp","mac_802_3.h");
x.t("mac_802_3.cpp","void");
x.t("mac_802_3.cpp","checks");
x.t("mac_802_3.cpp","folder");
x.t("mac_802_3.cpp","data");
x.t("mac_802_3.cpp","definitions");
x.t("used","ieee");
x.t("used","parameter");
x.t("used","physical");
x.t("used","interface");
x.t("used","wired");
x.t("used","multiple");
x.t("used","mac");
x.t("used","upper");
x.t("used","network");
x.t("used","handle");
x.t("used","csma");
x.t("used","forward");
x.t("used","communication");
x.t("used","qualify");
x.t("used","hold");
x.t("used","internal");
x.t("used","implementing");
x.t("used","qualnet");
x.t("used","layers");
x.t("used","4.5.5.10");
x.t("used","send");
x.t("used","view");
x.t("used","myprotocol");
x.t("used","protocol");
x.t("sendframefn","void");
x.t("sendframefn","field");
x.t("sendframefn","node");
x.t("sendframefn","receiveframefn");
x.t("sendframefn","pointer");
x.t("sendframefn","macreceiveframefn");
x.t("simulation","promiscuousmode");
x.t("simulation","enum");
x.t("simulation","last");
x.t("simulation","function");
x.t("simulation","section");
x.t("simulation","4.5.5.11");
x.t("simulation","finalization");
x.t("pointer","function");
x.t("pointer","node");
x.t("pointer","send");
x.t("pointer","data");
x.t("pointer","pointer");
x.t("contained","mac_csma.h");
x.t("contained","mac_802_3.h");
x.t("contained","file");
x.t("4.5.5.1","header");
x.t("4.5.5.1","naming");
x.t("turn","calls");
x.t("turn","call");
x.t("bottom","manner");
x.t("subnetlist","int");
x.t("subnetlist","[subnetindex]");
x.t("subnetlist","nodesinsubnet");
x.t("partitionsubnetmemberdata","subnetlist");
x.t("macaddnewinterface","calls");
x.t("macaddnewinterface","initializes");
x.t("macaddnewinterface","reads");
x.t("macaddnewinterface","node");
x.t("routing_protocol_default","select");
x.t("random_setseed","csma-");
x.t("random_setseed","mac802_3-");
x.t("translates","mac");
x.t("translates","ipv4");
x.t("translates","address");
x.t("mac_fourbytemacaddresstovariablehwaddress","implemented");
x.t("mac_fourbytemacaddresstovariablehwaddress","node");
x.t("mac_fourbytemacaddresstovariablehwaddress","translates");
x.t("break","default");
x.t("break","switch");
x.t("break","return");
x.t("break","figure");
x.t("break","case");
x.t("either","full");
x.t("either","calls");
x.t("either","inside");
x.t("either","maccsmaxmit");
x.t("special","message");
x.t("scheduled","transmitting");
x.t("scheduled","node");
x.t("starts","transmitting");
x.t("indications","network");
x.t("&msg","&desthwaddr");
x.t("&hdr-","sourceaddr");
x.t("&hdr-","destaddr");
x.t("csma_status_yield","calls");
x.t("csma_status_yield","maccsmayield");
x.t("csma_status_yield","int");
x.t("using","example");
x.t("using","api");
x.t("using","function");
x.t("using","services");
x.t("using","following");
x.t("general","api");
x.t("additionally","following");
x.t("dropped","mac");
x.t("dropped","packet");
x.t("understanding","discussed");
x.t("4.5.5.2","creating");
x.t("4.5.5.2","include");
x.t("4.5.5.2","modify");
x.t("mac_finalize","calls");
x.t("mac_finalize","function");
x.t("mac_finalize","section");
x.t("mac_finalize","node");
x.t("mac_finalize","defined");
x.t("nodeinput","else");
x.t("nodeinput","ipv4subnetaddress");
x.t("nodeinput","networkipcreatequeues");
x.t("nodeinput","nodeaddress");
x.t("nodeinput","macprotocolname");
x.t("nodeinput","sitecounter");
x.t("nodeinput","machwaddress");
x.t("nodeinput","macdatacsma");
x.t("nodeinput","char");
x.t("nodeinput","address");
x.t("nodeinput","int");
x.t("nodeinput","interfaceindex");
x.t("nodeinput","macaddr");
x.t("nodeinput","mac-address-config-file");
x.t("nodeinput","figure");
x.t("nodeinput","in6_addr");
x.t("nodeinput","nodeinput");
x.t("/libraries/developer/src/network_ip.cpp","ieee");
x.t("/libraries/developer/src/network_ip.cpp","maccsmainit");
x.t("ethernet-type","(6-byte)");
x.t("mac802_3-","msgbuffer");
x.t("mac802_3-","link=");
x.t("mac802_3-","wasinbackoff");
x.t("mac802_3-","stats.numframereceived");
x.t("mac802_3-","link");
x.t("mac802_3-","collisioncounter");
x.t("mac802_3-","stationstate");
x.t("mac802_3-","mymacdata");
x.t("mac802_3-","seed");
x.t("mac802_3-","isfullduplex");
x.t("mac802_3-","bwinmbps");
x.t("mac802_3-","interframegap");
x.t("mac802_3-","seqnum");
x.t("mac802_3-","jamtrdelay");
x.t("mac802_3-","backoffwindow");
x.t("mac802_3-","stats.numbackofffaced");
x.t("mac802_3-","stats.numframelossforcollision");
x.t("mac802_3-","mymacdata-");
x.t("mac802_3-","link-");
x.t("mac802_3-","stats.numframetransmitted");
x.t("mac802_3-","slottime");
x.t("mac802_3-","neighborlist");
x.t("setting","timers");
x.t("setting","backoff");
x.t("ipv4_linkaddress","return");
x.t("message_free","unless");
x.t("message_free","node");
x.t("message_free","event");
x.t("containing","frame");
x.t("containing","statistic");
x.t("containing","statistics");
x.t("finalize","node-");
x.t("across","link");
x.t("802.16","mac");
x.t("(maca)","mac");
x.t("folders","source");
x.t("folders","contain");
x.t("folders","may");
x.t("folders","section");
x.t("folders","relevant");
x.t("mac_protocol_fcsc_csma","mac_protocol_maca");
x.t("linkedlist","interfacestatushandlerlist");
x.t("linkedlist","neighborlist");
x.t("statistics","4.5.5.10.5");
x.t("statistics","ieee");
x.t("statistics","illustrate");
x.t("statistics","static");
x.t("statistics","variables");
x.t("statistics","related");
x.t("statistics","layer");
x.t("statistics","discussed");
x.t("statistics","mac");
x.t("statistics","file");
x.t("statistics","during");
x.t("statistics","declare");
x.t("statistics","specified");
x.t("statistics","initialize");
x.t("statistics","final");
x.t("statistics","collection");
x.t("statistics","may");
x.t("statistics","step");
x.t("statistics","section");
x.t("statistics","declaring");
x.t("statistics","statistic");
x.t("statistics","printed");
x.t("statistics","variable");
x.t("statistics","dynamic");
x.t("statistics","data");
x.t("statistics","appropriate");
x.t("statistics","protocol");
x.t("statistics","call");
x.t("statistics","mac802_3-");
x.t("statistics","statistics");
x.t("statistics","4.5.5.10.4");
x.t("dequeuing","mac_outputqueuedequeuepacketforapriority");
x.t("pass","indication");
x.t("pass","received");
x.t("returns","interface");
x.t("returns","mac");
x.t("returns","true");
x.t("adding","wired");
x.t("adding","mac");
x.t("adding","new");
x.t("adding","wireless");
x.t("adding","node");
x.t("adding","code");
x.t("adding","myprotocol");
x.t("adding","dynamic");
x.t("adding","model");
x.t("subsequent","sections");
x.t("4.5.5.3","define");
x.t("4.5.5.3","including");
x.t("route","forwarding");
x.t("nla","sla");
x.t("&subnetpropdelay","fromlink");
x.t("translation","mac");
x.t("translation","ipv4");
x.t("translation","functions");
x.t("translation","function");
x.t("hw_type_ether","mac802address");
x.t("send/buffer","packet");
x.t("non-empty","mac");
x.t("non-empty","explained");
x.t("/libraries/wireless/src/mac_dot11-sta.h","function");
x.t("partition_finalize","defined");
x.t("reader","appropriate");
x.t("portion","relates");
x.t("802.11n","mac");
x.t("limited","subnet");
x.t("definitions","ieee");
x.t("definitions","api");
x.t("definitions","csma");
x.t("definitions","common");
x.t("definitions","data");
x.t("definitions","general");
x.t("operations","qualnet_home");
x.t("associated","mac");
x.t("names","mac_");
x.t("names","components");
x.t("names","parameters");
x.t("names","different");
x.t("names","based");
x.t("without","dequeuing");
x.t("performed","mac");
x.t("performed","part");
x.t("performed","node");
x.t("performed","adding");
x.t("outline","developing");
x.t("outline","code");
x.t("modify","mac_receivephystatuschangenotification");
x.t("modify","addnodetosubnet");
x.t("modify","macconfigurehwaddress");
x.t("modify","mac");
x.t("modify","file");
x.t("modify","mac_receivepacketfromphy");
x.t("modify","mac_networklayerhaspackettosend");
x.t("modify","functions");
x.t("modify","gui");
x.t("modify","function");
x.t("modify","qualnet_home");
x.t("4.5.5.4","example");
x.t("4.5.5.4","mac");
x.t("4.5.5.4","decide");
x.t("4.5.5.4","defining");
x.t("4.5.5.4","statistics");
x.t("4.5.5.10.1","initialize");
x.t("4.5.5.10.1","define");
x.t("4.5.5.10.1","declaring");
x.t("towards","adding");
x.t("towards","statistics");
x.t("designate","files");
x.t("therefore","protocol");
x.t("mac802_3statistics","shown");
x.t("mac802_3statistics","void");
x.t("mac802_3statistics","macdata802_3");
x.t("mac802_3statistics","stats");
x.t("mac802_3statistics","defined");
x.t("mac802_3statistics","statistics");
x.t("networktype","address");
x.t("networktype","bool");
x.t("networktype","networktype");
x.t("networktype","tostype");
x.t("maintains","state");
x.t("maintains","list");
x.t("occur","mac");
x.t("occur","neighbor");
x.t("occur","propagation");
x.t("mac802_3fullduplexfinalize","node");
x.t("oldphystatus","phystatustype");
x.t("oldphystatus","newphystatus");
x.t("oldphystatus","phy_transmitting");
x.t("tostype","priority");
x.t("phy_transmitting","assert");
x.t("point-to-point","link");
x.t("point-to-point","network");
x.t("point-to-point","links");
x.t("including","compiling");
x.t("including","initialization");
x.t("including","myprotocol");
x.t("struct","enum");
x.t("struct","struct_mac_802_3_stat");
x.t("struct","struct_mac_802_3_str");
x.t("struct","macdata");
x.t("struct","struct_mac_csma_str");
x.t("bandwidth","bytes");
x.t("bandwidth","base");
x.t("bandwidth","1000000");
x.t("bandwidth","subnetbandwidth");
x.t("bandwidth","phy_gettxdatarate");
x.t("bandwidth","variable");
x.t("bandwidth","attached");
x.t("bandwidth","mac802_3-");
x.t("ipv4addresstohwaddress","calls");
x.t("ipv4addresstohwaddress","convert");
x.t("ipv4addresstohwaddress","ipv4");
x.t("ipv4addresstohwaddress","node");
x.t("ipv4addresstohwaddress","call");
x.t("ipv4addresstohwaddress","contained");
x.t("ipv4addresstohwaddress","translates");
x.t("ipv4addresstohwaddress","ipv4addresstodefaulthwaddress");
x.t("4.5.5.10.2","initializing");
x.t("4.5.5.10.2","update");
x.t("describe","interface");
x.t("describe","tasks");
x.t("describe","collect");
x.t("describe","steps");
x.t("stdio.h","include");
x.t("insert","following");
x.t("slottime","clocktype");
x.t("slottime","mac802_3getslottime");
x.t("4.5.5.5","initialization");
x.t("nodesinsubnet","network_ipv4");
x.t("nodesinsubnet","network_ipv6");
x.t("nodesinsubnet","tla");
x.t("nodesinsubnet","char");
x.t("nodesinsubnet","int");
x.t("nodesinsubnet","figure");
x.t("nodesinsubnet","networktype");
x.t("nodesinsubnet","subnetaddress");
x.t("unsigned","short");
x.t("unsigned","char");
x.t("unsigned","int");
x.t("mac802_3init","ieee");
x.t("mac802_3init","shown");
x.t("mac802_3init","networkipcreatequeues");
x.t("mac802_3init","calculates");
x.t("mac802_3init","calls");
x.t("mac802_3init","sets");
x.t("mac802_3init","initializes");
x.t("mac802_3init","node");
x.t("mac802_3init","calling");
x.t("(.config)","file");
x.t("arrived","node");
x.t("info-","timertype");
x.t("peak","packet");
x.t("receiveduration","const");
x.t("receiveduration","potentialincomingpacket");
x.t("satellites","developer");
x.t("mac.cpp","mac");
x.t("mac.cpp","add");
x.t("mac.cpp","wireless");
x.t("mac.cpp","4.5.4.2");
x.t("mac.cpp","section");
x.t("mac.cpp","include");
x.t("mac.cpp","figure");
x.t("mac.cpp","myprotocol");
x.t("mac.cpp","mac_finalize");
x.t("mac.cpp","contains");
x.t("mac_handoffsuccessfullyreceivedpacket","function");
x.t("mac_handoffsuccessfullyreceivedpacket","node");
x.t("mac_handoffsuccessfullyreceivedpacket","packet");
x.t("delivers","packet");
x.t("4.5.5.6","4.5.6.4");
x.t("4.5.5.6","implementing");
x.t("4.5.5.6","call");
x.t("4.5.5.7.1","describes");
x.t("4.5.5.7.1","declare");
x.t("4.5.5.7.1","modifying");
x.t("4.5.5.7.1","4.5.6.4.2");
x.t("4.5.5.10.3","updating");
x.t("4.5.5.10.3","write");
x.t("naming","coding");
x.t("naming","guidelines");
x.t("comprise","two");
x.t("mac_myprotocol.h","statements");
x.t("mac_myprotocol.h","example");
x.t("mac_myprotocol.h","4.5.6.2.4.1");
x.t("mac_myprotocol.h","source");
x.t("mac_myprotocol.h","4.5.5.5.4.1");
x.t("mac_myprotocol.h","contain");
x.t("mac_myprotocol.h","section");
x.t("mac_myprotocol.h","4.5.5.12");
x.t("mac_myprotocol.h","4.5.5.3");
x.t("even","compilation");
x.t("macmyprotocollayer","void");
x.t("macmyprotocollayer","node");
x.t("macmyprotocollayer","finalization");
x.t("neighborlist","nodelist");
x.t("neighborlist","bool");
x.t("neighborlist","mac802_3-");
x.t("reading","configuration");
x.t("mem_malloc","(max_address_string_length)");
x.t("mem_malloc","sizeof");
x.t("mem_malloc","allocate");
x.t("operational","parameters");
x.t("(mode)","backoff");
x.t("buffer","initialization");
x.t("buffer","increase");
x.t("buffer","mac802_3retrievepacketfromqintoownbuffer");
x.t("buffer","empty");
x.t("buffer","string");
x.t("buffer","mac802_3-");
x.t("mac802_3getslottime","mac802_3getinterframedelay");
x.t("mac802_3getslottime","node");
x.t("station","state");
x.t("station","listinit");
x.t("station","forward");
x.t("station","int64");
x.t("station","idle");
x.t("station","backoff");
x.t("station","int32");
x.t("station","(ismyaddr)");
x.t("station","sent");
x.t("ipv4addresstodefaulthwaddress","node");
x.t("ipv4addresstodefaulthwaddress","translates");
x.t("ipv4addresstodefaulthwaddress","mac_fourbytemacaddresstovariablehwaddress");
x.t("mac_protocol_aloha","case");
x.t("one-hop","broadcast");
x.t("&taginfo","mac_sneakpeekatmacpacket");
x.t("&taginfo","mac_handoffsuccessfullyreceivedpacket");
x.t("sent","frame");
x.t("sent","phy");
x.t("/multicast_igmp.cpp","figure");
x.t("5.1.4","2008");
x.t("5.1.4","4.5.6");
x.t("csma_timer_yield","csma-");
x.t("csma_timer_yield","switch");
x.t("message_addheader","node");
x.t("contains","ieee");
x.t("contains","layer");
x.t("contains","mac");
x.t("contains","prototypes");
x.t("contains","implementation");
x.t("contains","definitions");
x.t("macreceiveframefn","receiveframefn");
x.t("unicast","address");
x.t("detail","subsequent");
x.t("4.5.5.7.2","describes");
x.t("4.5.5.7.2","write");
x.t("4.5.5.7.2","implementing");
x.t("4.5.5.7.2","modify");
x.t("integrate","new");
x.t("integrate","user_models");
x.t("update","value");
x.t("update","statistics");
x.t("4.5.5.10.4","printing");
x.t("4.5.5.10.4","add");
x.t("4.5.5.10.4","finalization");
x.t("generally","wired");
x.t("generally","header");
x.t("specify","configuration");
x.t("specify","prototype");
x.t("numlines","char");
x.t("subnetaddress","convertnumhostbitstosubnetmask");
x.t("subnetaddress","//base");
x.t("subnetaddress","error_reporterror");
x.t("(fromlink)","setmacconfigparameter");
x.t("mac_setfourbytemacaddress","assign");
x.t("mac_setfourbytemacaddress","node");
x.t("mac_setfourbytemacaddress","myprotocol");
x.t("4.5.5.7","implementing");
x.t("srcaddr","desthwaddr");
x.t("lan","neighbor");
x.t("user\u2019s","guide");
x.t("pktsgotunicast","else");
x.t("pktsgotunicast","csma-");
x.t("pktsgotunicast","int32");
x.t("msg_mac_timerexpred","event");
x.t("&desthwaddress","machwaddress");
x.t("&desthwaddress","csma-");
x.t("&desthwaddress","mac_isbroadcasthwaddress");
x.t("&desthwaddress","&hdr-");
x.t("transporting","upper");
}
