# ***** QualNet Configuration File *****
#
# Copyright (c) 2001-2009, Scalable Network Technologies, Inc.
#                     6100 Center Drive
#                     Suite 1250
#                     Los Angeles, CA 90045
#                     sales@scalable-solutions.com
# All Rights Reserved.
#
#
#
# Anything following a "#" is treated as a comment.


VERSION 6.1


###############################################################################
# General simulation properties                                               #
###############################################################################

#
# The following parameter specifies the name of the experiment.  The name of
# the experiment also determines the filename of the statistical output file.
#
# For example: If EXPERIMENT-NAME is specified to be "default", then
# the statistical # output file will be named "default.stat"
#

EXPERIMENT-NAME    abstract-tcp-4drop

#
# The following parameter specifies the maximum simulation time.
# The numbered portion can be followed by letters to indicate units of
# simulation time.
#
# For example:
#
#        100NS   - 100 nanoseconds
#        100US   - 100 microseconds
#        100MS   - 100 milliseconds
#        100S    - 100 seconds
#        100     - 100 seconds (default case)
#        100M    - 100 minutes
#        100H    - 100 hours
#        100D    - 100 days
#

SIMULATION-TIME     6S

#
# The following is a random number seed used to initialize part of the seed
# of various randomly generated numbers in the simulation.  This can be used
# to vary the seed of the simulation to see the consistency of results
# of the simulation.
#

SEED   1

#
# The following represents the number of partitions (or entities) used to
# represent the terrain in which the simulation is being simulated.  Generally,
# the higher the number of partitions in your simulation the faster your
# simulation will run.  Of course, this is only true upto a certain limit.  For
# example, if you have a 100 by 100 region and try to run your simulation with
# (100 * 100) partitions your simulation will run slowly.  As a rough estimate
# try to set the length and width of each partition such that it is greater
# than the power range of a phy.
#
# NOTE: THIS IS NOT CURRENTLY SUPPORTED IN THE SEQUENTIAL VERSION
#
# Number of partitions in x and y range.
#

PARTITION-NUM-X   1
PARTITION-NUM-Y   1

#
# The following parameter specify the size of terrain, in meters, in which
# the nodes are being simulated.  For example, the following represents
# an area of size 1500 meters by 1500 meters.
#
# If TERRAIN-DIMENSIONS is set too large, some NODE-PLACEMENT definitions
# will space nodes too far away to transmit to each other.
#

COORDINATE-SYSTEM    CARTESIAN

TERRAIN-DIMENSIONS   (1500, 1500)

#
# The following changes the coordinate system to use from Cartesian to
# latitude-longitude-altitude.
#
# COORDINATE-SYSTEM    LATLONALT
#
# TERRAIN-SOUTH-WEST-CORNER  (30.00, 40.00)
# TERRAIN-NORTH-EAST-CORNER  (30.01, 40.01)
#

###############################################################################
# Topology                                                                    #
###############################################################################

#
# The following specifies the network topology (number of nodes in
# wireless subnets, connectivity of wired networks, etc.).
#
# Nodes can be mobile or staionary.
#
# Nodes in QualNet are uniquely identified by a nodeId.  A nodeId can be
# any integer >= 1 (but less than about 4 billion).  It is not necessary
# for the nodes in a QualNet scenario to have consecutive nodeIds.
# Terminology:  "node 4" means the node with nodeId equal to 4.
#
# Nodes can have one or multiple network interfaces.  A network interface
# can be wireless or wire-based ("wired").  Currently, QualNet requires
# every network interface (wireless or wired) to have an IPv4 address
# and subnet mask. (IPv6 support in development)
#
# Note that an IP address and subnet mask define a network address, as
# well as a range of IP addresses available for hosts on the subnet.
#
# There are two keywords used for topology setup:  SUBNET (wireless)
# and LINK (wired).
#

#
# The SUBNET keyword is used for wireless subnets.  The example below
# defines a wireless subnet consisting of 1 wireless network interface on
# each of 30 nodes (nodes 1 through 30).  This subnet has a network
# address of 0.0.0.0.  The subnet mask is 32 - 16 = 16 bits long.
# That is, this is the 0.0.0.0/16 subnet.
#
# IP addresses are assigned automatically to network interfaces, starting
# from the first available host address (0.0.0.1) assigned to the first
# node listed in brackets (node 1), and increasing until the last node
# (node 30) is assigned a host address (0.0.0.30).
#
# Other parameters further define the wireless network interface.
# The MAC-PROTOCOL and PHY-MODEL parameters define the basic data-link
# layer and physical layer properties of the network interface.
# Parameters in the "Channel properties" section define which channels
# the wireless interface is listening to.
#
# RESTRICTION:  The old restriction that all wireless network
# interfaces belong to a single 0.0.0.0 subnet is relaxed.
# Multiple wireless networks can now be declared, with non-zero network
# addresses.  However, routing only works on the first wireless subnet.
#

#SUBNET N16-0 { 1 thru 30 }

#
# The LINK keyword is used to define a "point-to-point link".
# A point-to-point link is a dedicated, error-free channel between exactly
# two nodes.  As properties, point-to-point links have a fixed (one-way)
# propagation delay, and a fixed bandwidth (bits per second).  Data
# can travel at the full bandwidth in both directions simultaneously.
#
# The example below defines three 112 kbps links with a propagation delay
# of 50 ms for each link.  Node 1 is connected to node 2, node 2 is
# connected to node 3, and node 3 is connected to node 4. (a string
# topology)
#
# Point-to-point links also belong to IPv4 subnets.  In the example below,
# there are two network interfaces on nodes 1 and 2 belonging to the
# 0.0.1.0/30 subnet; two network interfaces on nodes 2 and 3 belonging
# to the 0.0.2.0/30 subnet; and so on.
#
# Point-to-point link network interfaces are automatically assigned IPv4
# host addresses in the same way it's done for wireless interfaces.
#
# NOTE:  The example below assumes a pure wire-based network, so the
# SUBNET line must be commented out if the LINK lines are made active.
# Also, select a wired routing protocol, and make sure the applications
# in app.conf specify only nodes in this 4-node example.
#
# LINK-BANDWIDTH           112000
# LINK-PROPAGATION-DELAY   50MS
#
# LINK N2-1.0 { 1, 2 }
# LINK N2-2.0 { 2, 3 }
# LINK N2-3.0 { 3, 4 }

# This topology corresponds to net0
#        s1(node 1)
#         \
# 10Mb,5ms \          0.8Mb,100ms
#           r1(node 3) --------- k1(node 4)
# 10Mb,5ms /
#         /
#        s2(node 2)
LINK N8-1.0 {1, 3}
[N8-1.0] LINK-BANDWIDTH 10000000
[N8-1.0] LINK-PROPAGATION-DELAY 5MS

LINK N8-2.0 {2, 3}
[N8-2.0] LINK-BANDWIDTH 10000000
[N8-2.0] LINK-PROPAGATION-DELAY 5MS

LINK N8-3.0 {3, 4}
[N8-3.0] LINK-BANDWIDTH 800000
[N8-3.0] LINK-PROPAGATION-DELAY 100MS

#
# The following parameter represents the node placement strategy.
# - UNIFORM:  Based on the number of nodes in the simulation, the physical
#   terrain is divided into a number of cells.  Within each cell, a node is
#   placed randomly.
# - RANDOM:  Nodes are placed randomly within the physical terrain.
# - GRID:  Node placement starts at (0, 0) and are placed in grid format with
#   each node GRID-UNIT away from its neighbors.  The number of nodes has to
#   be a square of an integer.
# - FILE:  Position of nodes is read from NODE-POSITION-FILE.  On each line of
#   the file, the x and y position of a single node is separated by a space.
#

NODE-PLACEMENT   UNIFORM
# NODE-PLACEMENT   RANDOM

# NODE-PLACEMENT   GRID
# GRID-UNIT        30

# NODE-PLACEMENT        FILE
# NODE-POSITION-FILE   ./nodes.in

#
# The following represent parameters for mobility.  If MOBILITY is set to NO,
# than there is no movement of nodes in the model.
#
# For random waypoint, a node randomly selects a destination from the
# physical terrain.  It moves in the direction of the destination in a
# speed uniformly chosen between MOBILITY-WP-MIN-SPEED and
# MOBILITY-WP-MAX-SPEED (meters/sec).  After it reaches its destination,
# the node stays there for MOBILITY-WP-PAUSE time.
#

MOBILITY   NONE

# MOBILITY                RANDOM-WAYPOINT
# MOBILITY-WP-PAUSE       30S
# MOBILITY-WP-MIN-SPEED   0
# MOBILITY-WP-MAX-SPEED   10

# MOBILITY                TRACE
# NODE-POSITION-FILE     ./mobility.in

# MOBILITY   PATHLOSS-MATRIX

# not completely implemented yet
#
# MOBILITY-TRACE-DUMP ./test
#

#
# The following parameters are necessary for all mobility models.
#

MOBILITY-POSITION-GRANULARITY   0.5

###############################################################################
# Channel properties                                                          #
###############################################################################

PROPAGATION-CHANNEL-FREQUENCY 2.4e9 # required
#PROPAGATION-CHANNEL-FREQUENCY[0] 2.4e9 # multi channel example
#PROPAGATION-CHANNEL-FREQUENCY[1] 2.5e9

# this is the only option now
PROPAGATION-MODEL           STATISTICAL
#PROPAGATION-MODEL[1]           STATISTICAL

#
# PROPAGATION-LIMIT:
#   Signals with power below PROPAGATION-LIMIT (in dBm)
#   (before the antenna gain at the receiver) will not be
#   delivered to nodes. Lower value should make the
#   simulation more precise, but it also make the execution
#   time longer.
#

PROPAGATION-LIMIT   -111.0
#PROPAGATION-LIMIT[1]   -111.0

#
# PROPAGATION-PATHLOSS: pathloss model
#   FREE-SPACE:
#     Friss free space model.
#     (path loss exponent, sigma) = (2.0, 0.0)
#   TWO-RAY:
#     Two ray model.  It uses free space path loss
#     (2.0, 0.0) for near sight and plane earth
#     path loss (4.0, 0.0) for far sight. The antenna
#     height is hard-coded in the model (1.5m).
#   PATHLOSS-MATRIX:
#

PROPAGATION-PATHLOSS-MODEL  TWO-RAY
#PROPAGATION-PATHLOSS-MODEL[1]  TWO-RAY
# PROPAGATION-PATHLOSS-MODEL  FREE-SPACE
#
# temporary disabled
#
# PROPAGATION-PATHLOSS-MODEL  PATHLOSS-MATRIX

#
# PROPAGATION-SHADOWING-SIGMA (in dB)
#
PROPAGATION-SHADOWING-SIGMA 0.0

# PROPAGATION-FADING-MODEL:
#   NONE:     no fading
#   RAYLEIGH: Rayleigh fading
#   RICEAN:   Ricean fading (requires PROPAGATION-RICEAN-K-FACTOR)
#
PROPAGATION-FADING-MODEL NONE
# PROPAGATION-FADING-MODEL RAYLEIGH
# PROPAGATION-FADING-MODEL RICEAN
# PROPAGATION-RICEAN-K-FACTOR 0.0


###############################################################################
# Phy layer                                                                   #
###############################################################################

#########################################
#
# PHY-MODEL: phy model to transmit and receive packets
#
PHY-MODEL                   PHY802.11b
PHY-LISTENABLE-CHANNEL-MASK 1
PHY-LISTENING-CHANNEL-MASK  1

#
# PHY-TEMPERATURE: temperature of the phy model (in K)
#
PHY-TEMPERATURE             290

#
# PHY-NOISE-FACTOR: noise factor used to calculate thermal noise level
#                   of the phy model
#
PHY-NOISE-FACTOR            10.0

#
# PHY-RX-MODEL: packet reception model
#   SNR-THRESHOLD-BASED:
#     If the Signal to Noise Ratio (SNR) is more than
#     PHY-RX-SNR-THRESHOLD (in dB), it receives the signal
#     without error.  Otherwise the packet is dropped.
#     PHY-RX-SNR-THRESHOLD needs to be specified.
#   BER-BASED:
#     It looks up Bit Error Rate (BER) in the SNR - BER table
#     specified by PHY-RX-BER-TABLE-FILE.
#
# DPSK gives lower performance than BPSK, but is commonly used due to ease
# of implementation.  DPSK is used in 802.11 WaveLAN radios
#
# PHY-RX-MODEL                BER-BASED
# PHY-RX-BER-TABLE-FILE          ./ber_dpsk.in
# PHY-RX-BER-TABLE-FILE          ./ber_bpsk.in
# PHY-RX-MODEL                SNR-THRESHOLD-BASED
# PHY-RX-SNR-THRESHOLD        10.0

#
# PHY802.11b-DATA-RATE: phy data rate (in bps)
#
PHY802.11b-DATA-RATE          2000000

#
# PHY802.11b-TX-POWER: phy transmission power (in dBm)
#
PHY802.11b-TX-POWER           15.0

#
# PHY802.11b-RX-SENSITIVITY: sensitivity of the phy (in dBm)
#
PHY802.11b-RX-SENSITIVITY     -91.0

#
# PHY802.11b-RX-THRESHOLD: Minimum power for received packet
# (in dBm)
#
PHY802.11b-RX-THRESHOLD       -81.0

#
# ANTENNA-GAIN: antenna gain (in dBi)
#
ANTENNA-GAIN    0.0

#
# ANTENNA-HEIGHT: antenna height (in meters)
#
ANTENNA-HEIGHT  1.5

# ANTENNA-MODEL:
#
ANTENNA-MODEL   OMNIDIRECTIONAL
# ANTENNA-MODEL   SWITCHED-BEAM
# ANTENNA-SWITCHED-BEAM-AZIMUTH-PATTERN-FILE ./antenna_azimuth.in


###############################################################################
# MAC layer                                                                   #
###############################################################################

#
# The following specifies the MAC protocol used for wireless network
# interfaces.  (Point-to-point links do not require, and ignore this setting.)
#

MAC-PROTOCOL   MACDOT11
# MAC-PROTOCOL   CSMA
# MAC-PROTOCOL   MACA

#
# MAC-PROPAGATION-DELAY specifies an additional delay for messages
# sent by the MAC layer to the phy layer.  Some MAC protocols use
# a multiple of this value.  The default value is 1 microsecond,
# kept in the MAC_PROPAGATION_DELAY macro in include/mac.h.
#
# MAC-PROPAGATION-DELAY   1500NS
#

#
# PROMISCUOUS-MODE defaults to YES and is necessary if nodes want
# to overhear packets destined to neighboring nodes.
# Currently this option needs to be set to YES only if DSR is selected
# as the routing protocol.  Setting it to "NO" may save a trivial amount
# of time for other protocols.
#

PROMISCUOUS-MODE   YES

###############################################################################
# Network layer                                                               #
###############################################################################

#
# IP is currently the only choice for network-layer protocol.
#

NETWORK-PROTOCOL   IP

#
# The number of separate priority queues is specified below, QualNet
# currently generates three types, CONTROL, REAL_TIME, and NON_REAL_TIME,
# so "3" is a good minimum value.  If you specify less than "3", the
# lower priority packets will be placed in the lowest-priority queue that
# exists.  Specifying less than "1" is an error condition due to the
# inability of that node to store any packets at the IP layer.
#

IP-QUEUE-NUM-PRIORITIES   3

#
# The following parameter specifies the size of each of the
# "priority queues", the number of which is specified by
# IP-QUEUE-NUM-PRIORITIES.  If there are 3 "priority queues", each
# will have a byte-capacity equal to the value of
# IP-QUEUE-PRIORITY-QUEUE-SIZE specified below.
#
# You can also specify each priority queue's size separately, using the
# Instance ID [] after the parameter name, as in an example below.  Make sure
# that you use Instance ID's numbering from
# { 0, ..., (IP-QUEUE-NUM-PRIORITIES-1) }
#
# You can also use Node and Network Specific Parameterization with brackets
# before the parameter name.
#
# 50000 bytes == 1500 "DEFAULT_ETHERNET_MTU * 33.333 packets
#
# Example: NodeId 1 has a 25000 byte queue for priority 2
#
#          [1] IP-QUEUE-PRIORITY-QUEUE-SIZE[2] 25000
#

IP-QUEUE-PRIORITY-QUEUE-SIZE   150000

#
# The IP-QUEUE-TYPE parameter specifies the type of queueing mechanism to use
# for the particular priority queue.  It can be specified as a global
# default, per node or network, per priority queue, or any valid combination
# of these.
#
# Example: All nodes have a FIFO queue for priority 2
#          IP-QUEUE-TYPE[2] FIFO
#

#
# FIFO represents "First In, First Out" IP packet queueing.
#

IP-QUEUE-TYPE   FIFO

#
# RED represents Random Early Detection(Drop) as presented in
#      Sally Floyd and Van Jacobson,
#      "Random Early Detection For Congestion Avoidance",
#      IEEE/ACM Transactions on Networking, August 1993.
#      This implementation drops packets, it does not mark them.
#
# RED requires the following additional parameters:
#
#      RED-MIN-THRESHOLD : the number of packets in the queue that represents
#                          the lower bound at which packets can be randomly
#                          dropped.
#      RED-MAX-THRESHOLD : the number of packets in the queue that represents
#                          the upper bound at which packets can be randomly
#                          dropped.
#      RED-MAX-PROBABILITY : the maximum probability (0...1) at which a
#                            packet can be dropped (before the queue is
#                            completely full, of course).
#      RED-QUEUE-WEIGHT : the queue weight determines bias towards recent
#                         or historical queue lengths in calculating the
#                         average.
#      RED-SMALL-PACKET-TRANSMISSION-TIME : a sample amount of time that it
#                                           would take to transmit a small
#                                           packet - used to estimate the
#                                           queue average during idle periods.
#
# IP-QUEUE-TYPE         RED
# RED-MIN-THRESHOLD     5
# RED-MAX-THRESHOLD     15
# RED-MAX-PROBABILITY   0.02
# RED-QUEUE-WEIGHT      0.002
# RED-SMALL-PACKET-TRANSMISSION-TIME   10MS
#

# RIO represents Random Early Detection(Drop)with In/Out Bit
# It is a variant of RED and uses twin RED algorithm
# - one for the IN profile packets and
# - one for the OUT of profile packets
#
# RIO specific parameters:
#
# IP-QUEUE-TYPE         RIO
# RIO-IN-MIN-THRESHOLD     10
# RIO-IN-MAX-THRESHOLD     20
# RIO-IN-MAX-PROBABILITY   0.02
# RIO-OUT-MIN-THRESHOLD     5
# RIO-OUT-MAX-THRESHOLD     10
# RIO-OUT-MAX-PROBABILITY   0.02


# WRED represents Weighted Random Early Detection(Drop)
# It is a variant of RED and uses three RED algorithms
# - the first for the Green profile packets and
# - the second for Yellow profile packets and
# - the third for Red profile packets.
#
# WRED specific parameters:
#
# IP-QUEUE-TYPE         WRED
# WRED-GREEN-MIN-THRESHOLD        12
# WRED-GREEN-MAX-THRESHOLD        20
# WRED-GREEN-MAX-PROBABILITY      0.02
# WRED-YELLOW-MIN-THRESHOLD       8
# WRED-YELLOW-MAX-THRESHOLD       13
# WRED-YELLOW-MAX-PROBABILITY     0.02
# WRED-RED-MIN-THRESHOLD          5
# WRED-RED-MAX-THRESHOLD          10
# WRED-RED-MAX-PROBABILITY        0.02



#
# The "STRICT-PRIORITY" scheduler for IP indicates that all packets of
# a higher priority are sent before any packets for a lower priority.
#
# The "WEIGHTED-FAIR" scheduler implements Weighted Fair Queueing with
# the highest priority queue getting a weight which is higher than that
# of all the other queues.
#
# The "ROUND-ROBIN" scheduler cycles from the first priority queue to
# the last, pulling a single packet from each
#
# The highest priority is numbered "0", and the lowest priority is "n-1",
# where n = IP-QUEUE-NUM-PRIORITIES
#

IP-QUEUE-SCHEDULER   STRICT-PRIORITY
# IP-QUEUE-SCHEDULER   WEIGHTED-FAIR
# IP-QUEUE-SCHEDULER ROUND-ROBIN


###############################################################################
# Routing - forwarding, static, default routes                                #
###############################################################################

#
# The following determines whether or not a node will forward packets.
# Hosts, for example personal computers connected to a company LAN, generally
# do not forward packets, while routers generally do.  By default, all nodes
# forward packets (in wireless ad-hoc networks, all nodes tend to be both
# hosts and routers).  To change the default, specify the global default to
# be "NO".  You can then specify which nodes should forward packets using
# node/network specific parameterization.
#

IP-FORWARDING YES
# IP-FORWARDING NO

#
# The following specifies static and default routes.  Static routes
# have priority over routes discovered through routing protocols while
# default routes have the lowest priority.
#

# STATIC-ROUTE        YES
# STATIC-ROUTE-FILE   static.rte

# DEFAULT-ROUTE       YES
# DEFAULT-ROUTE-FILE  default.rte

###############################################################################
# Routing - wireless ad hoc                                                   #
###############################################################################

#
# The following specifies the routing protocol.
# Models which work for wireless ad hoc networks are listed.
#

# ROUTING-PROTOCOL   AODV
# ROUTING-PROTOCOL   LAR1
# ROUTING-PROTOCOL   DSR
# ROUTING-PROTOCOL   BELLMANFORD
# ROUTING-PROTOCOL   OSPFv2

# ROUTING-PROTOCOL   ZRP
# ZONE-RADIUS        2

#
# The STAR Routing Protocol requires the following NEIGHBOR-PROTOCOL parameters
# and a choice between STAR-ROUTING-MODE ORA or LORA.
#

# ROUTING-PROTOCOL STAR
# STAR-ROUTING-MODE LORA
# STAR-ROUTING-MODE ORA
# NEIGHBOR-PROTOCOL-SEND-FREQUENCY 2S
# NEIGHBOR-PROTOCOL-ENTRY-TTL 4S

#
# Fisheye routing is currently disabled in QualNet.
#
# ROUTING-PROTOCOL   FISHEYE
#

###############################################################################
# Routing - wired                                                             #
###############################################################################

#
# The following specifies the routing protocol.
# Models which work for wired networks are listed.
#

# ROUTING-PROTOCOL   BELLMANFORD

#
# OSPFv2 is compliant with RFC 2328.  This model follows the RFC closely,
# so few routes are set up until 30 minutes of simulation time have
# passed.  Please select application (ftp/telnet/...) start times
# at late enough times for routes to stabilize.
#
# ROUTING-PROTOCOL   OSPFv2
#

#
# RIPv2 attempts to match the Cisco implementation from publicly
# available materials, and follows RFC 2453 otherwise.  Please see
# application/ripv2.pc for more information.
#
# ROUTING-PROTOCOL   RIPv2
#


###############################################################################
# Routing - exterior gateway protocol                                         #
###############################################################################

# The information is needed for the Border Gateway Protocol
# EXTERIOR-GATEWAY-PROTOCOL BGPv4

# To give the hold timer manually.  Otherwise, it will be initialized
# with a default value of 90 seconds.
# BGP-HOLD-TIME-INTERVAL

# To give large hold time value manually.  Otherwise, it will be initialized
# with a default value of 4 minutes.
# BGP-LARGE-HOLD-TIME-INTERVAL

# To give the value of minimum route advertise interval manually.
# Otherwise, it will be initialized with a default value of 30 seconds.
# BGP-MIN-RT-ADVERTISEMENT-INTERVAL

# To specify the min interval between inter AS routing interval manually.
# Otherwise, it will be initialized with a default value of 15 seconds.
# BGP-MIN-AS-ORIGINATION-INTERVAL

# To give the keepalive timer interval manually.
# Otherwise, it will be initialized with a default value of 30 seconds.
# BGP-KEEPALIVE-INTERVAL

# To give the connect retry interval value manually.
# Otherwise, it will be initialized with a default value of 120 seconds.
# BGP-CONNECT-RETRY-INTERVAL

# BGP input files
#
# To specify the interconnection between the BGP speakers.
# The input in the file should be as follows:
#
#     <ip address of speaker1> <ip address of speaker 2>
#
# These ip addresses should be configured correctly as BGP will
# give TCP these addresses to establish the transport connection
# between the BGP speakers.
#
# BGP-CONNECTION-CONFIG-FILE  ./as.conf

# To assign the routes each BGP speaker is advertising.
# The entries of this file is as follows:
#
#     <node id of speaker> <as id of speaker> <route1> <route 2> ... <route n>
#
# The routes can be given as aggregation like N8-2.0 or
# specific ip addresses like 239.133.10.9 or
# node id's, in which case the default interface address of that node is used.
#
# BGP-SPEAKER-CONFIG-FILE ./speaker.conf

###############################################################################
# Transport layer                                                             #
###############################################################################

# The following describes the various TCP variants that QualNet supports.
# TCP code is ported from FreeBSD 2.2.2.
# By default, if TCP is not specified, LITE is used.

#
# TAHOE: Slow Start, Congestion Avoidance, and Fast Retransmit.
# RENO:  TAHOE plus Fast Recovery
# LITE:  RENO plus Big Window and Protection Against
#        Wrapped Sequence Numbers options.
#
# TCP    TAHOE | RENO | LITE
#

#
# Whether received segments are acked immediately.
# If not specified, default is YES
# TCP-DELAY-ACKS                         YES | NO
#

#
# Whether ack of short packets are delayed.
# If not specified, default is NO.
# TCP-DELAY-SHORT-PACKETS-ACKS           YES | NO
#

#
# Whether to use the Nagle algorithm to coalesce short packets.
# If not specified, default is YES
# TCP-USE-NAGLE-ALGORITHM                YES | NO
#

#
# Whether to send window scale and timestamps in TCP header options.
# If not specified, default is NO
# TCP-USE-RFC1323                        YES | NO
#

#
# Whether keep-alive probes are to be used.
# If not specified, default is YES
# TCP-USE-KEEPALIVE-PROBES               YES | NO
#

#
# Whether the Push bit in TCP header is set (except for FIN segments).
# If not specified, default is YES
# TCP-USE-PUSH                           YES | NO
#

#
# Value of maximum segment size.
# If not specified, default is 512
# TCP-MSS                                512
#

#
# Value of send buffer space.
# If not specified, default is 16384 bytes
# TCP-SEND-BUFFER                        16384
#

#
# Value of receive buffer space.
# If not specified, default is 16384 bytes
# TCP-RECEIVE-BUFFER                     16384
#


###############################################################################
# Application layer                                                           #
###############################################################################

#
# The following is used to set up applications such as FTP and Telnet.
# The file will need to contain parameters that will be used to
# determine connections and other characteristics of the particular
# application.
#

#APP-CONFIG-FILE   ./app.conf

###############################################################################
# Statistics                                                                  #
###############################################################################

#
# The following parameters determine if you are interested in the
# statistics of a single or multiple layer.  By specifying the following
# parameters as YES, the simulation will provide you with statistics for
# that particular layer.  All the statistics are compiled together into
# a file called "qualnet.stat" that is produced at the end of the simulation.
# If you need the statistics for a particular node or particular protocol,
# it is easy to do the filtering.  Every single line in the file is of
# the following format:
#
# Node:      9, Layer:  PhyNoCapture, Total number of collisions is 0
#

APPLICATION-STATISTICS                  YES
TCP-STATISTICS                          YES
UDP-STATISTICS                          NO
ROUTING-STATISTICS                      NO
EXTERIOR-GATEWAY-PROTOCOL-STATISTICS    NO
NETWORK-LAYER-STATISTICS                NO
QUEUE-STATISTICS                        NO
MAC-LAYER-STATISTICS                    NO
PHY-LAYER-STATISTICS                    NO


#
# GUI-OPTION has been superseded by the -animate command line parameter,
# and is no longer used.
#


STATIC-ROUTE YES
STATIC-ROUTE-FILE   abstract-tcp-4drop.routes-static

TCP ABSTRACT-TCP

[1] TCP-TRACE TCPDUMP-ASCII
TCP-TRACE-DIRECTION BOTH

TCP-MSS 1000
TCP-DELAY-ACKS NO
TCP-SEND-BUFFER 28000
TCP-RECEIVE-BUFFER 28000

APP-CONFIG-FILE abstract-tcp-4drop.app
TCP-VERIFICATION-DROP-COUNT 4

ROUTING-PROTOCOL NONE
